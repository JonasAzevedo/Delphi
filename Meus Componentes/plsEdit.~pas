unit plsEdit;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms, Dialogs,
  StdCtrls;

type
  TEntraCaracteres = (esquerdaDireita, direitaEsquerda);

type
  TCaracteresAceitos = (todos,numeros,letras,monetario,monetario2,percentagem);

type
  TPlsEdit = class(TEdit)
  private
    colorRecebeFoco: TColor;
    colorPerdeFoco: TColor;
    enterMudaCampo: boolean;
    aceitaCaracteres: boolean;
    entraCaracteres: TEntraCaracteres;
    caracteresAceitos: TCaracteresAceitos;

    FbPodeExecutarOnChange: Boolean; //usando quando plsCaracteresAceitos=monetario2

    procedure setColorRecebeFoco(pCor: TColor);
    procedure setColorPerdeFoco(pCor: TColor);
    procedure setEnterMudaCampo(pbEnter: boolean);
    procedure setAceitaCaracteres(pbAceitaCarac: boolean);
    procedure setEntraCaracteres(pEntraCaractres: TEntraCaracteres);
    procedure setCaracteresAceitos(pCaracAceitos: TCaracteresAceitos);

    function getColorRecebeFoco: TColor;
    function getColorPerdeFoco: TColor;
    function getEnterMudaCampo(): boolean;
    function getAceitaCaracteres: boolean;
    function getEntraCaracteres(): TEntraCaracteres;
    function getCaracteresAceitos(): TCaracteresAceitos;

    procedure formatarValorMonetario();
    procedure formatarSeValorEhZero();
    procedure FormatarValorMonetario2();
    procedure FormatarPercentagem();
  protected
    procedure DoEnter; override;
    procedure DoExit; override;
    procedure KeyDown(var Key: Word; Shift: TShiftState); override;
    procedure KeyPress(var Key: Char); override;

    procedure Change(); override;
  public
    constructor Create(AOwner: Tcomponent);override;
    destructor Destroy; override;
  published
    property plsCorRecebeFoco: TColor read getColorRecebeFoco write setColorRecebeFoco default clGreen;
    property plsCorPerdeFoco: TColor read getColorPerdeFoco write setColorPerdeFoco default clWindow;
    property plsEnterMudaCampo: boolean read getEnterMudaCampo write setEnterMudaCampo default false;
    property plsAceitaCaractres: boolean read getAceitaCaracteres write setAceitaCaracteres default true;
    property plsEntraCaracteres: TEntraCaracteres read getEntraCaracteres write setEntraCaracteres default esquerdaDireita;
    property plsCaracteresAceitos: TCaracteresAceitos read getCaracteresAceitos write setCaracteresAceitos default todos;
  end;

procedure Register;

implementation

uses StrUtils;

{ TEdit_Pulse }

(* constructor *)
constructor TPlsEdit.Create(AOwner: Tcomponent);
begin
  inherited;

  colorRecebeFoco := clGreen;
  colorPerdeFoco := clWindow;
  enterMudaCampo := false;
  aceitaCaracteres := true;

  plsCorRecebeFoco := clGreen;
  plsCorPerdeFoco := clWindow;
  plsEnterMudaCampo := false;
  plsAceitaCaractres := true;

  FbPodeExecutarOnChange := True;
end;

(* destructor *)
destructor TPlsEdit.Destroy;
begin
  inherited;
end;

(* get's e set's *)
function TPlsEdit.getColorRecebeFoco: TColor;
begin
  Result := Self.colorRecebeFoco;
end;

function TPlsEdit.getColorPerdeFoco: TColor;
begin
  Result := Self.colorPerdeFoco;
end;

function TPlsEdit.getEnterMudaCampo(): boolean;
begin
  Result := Self.enterMudaCampo;
end;

function TPlsEdit.getAceitaCaracteres(): Boolean;
begin
  Result := Self.aceitaCaracteres;
end;

function TPlsEdit.getEntraCaracteres(): TEntraCaracteres;
begin
  Result := Self.entraCaracteres;
end;

function TPlsEdit.getCaracteresAceitos(): TCaracteresAceitos;
begin
  Result := Self.caracteresAceitos;
end;

procedure TPlsEdit.setColorRecebeFoco(pCor: TColor);
begin
  Self.colorRecebeFoco := pCor;
end;

procedure TPlsEdit.setColorPerdeFoco(pCor: TColor);
begin
  Self.colorPerdeFoco := pCor;
end;

procedure TPlsEdit.setEnterMudaCampo(pbEnter: Boolean);
begin
  Self.enterMudaCampo := pbEnter;
end;

procedure TPlsEdit.setAceitaCaracteres(pbAceitaCarac: boolean);
begin
  Self.aceitaCaracteres := pbAceitaCarac;
end;

procedure TPlsEdit.setEntraCaracteres(pEntraCaractres: TEntraCaracteres);
begin
  Self.entraCaracteres := pEntraCaractres;
end;

procedure TPlsEdit.setCaracteresAceitos(pCaracAceitos: TCaracteresAceitos);
begin
  Self.caracteresAceitos := pCaracAceitos;
end;

(* métodos insere cor no botão *)
procedure TPlsEdit.DoEnter();
begin
  inherited;

  Self.Color := plsCorRecebeFoco;
end;

procedure TPlsEdit.DoExit();
var
  dValor: Double;
begin
  inherited;

  if(Self.plsCaracteresAceitos in [monetario,monetario2])then
  begin
    formatarValorMonetario();
    formatarSeValorEhZero();
  end

  else if(Self.plsCaracteresAceitos in [percentagem])then
  begin
    try
      dValor := StrToFloat(Self.Text);
    except
      dValor := 0;
    end;

    if(dValor>100)then
      Self.Text := '100,00'
    else
      formatarValorMonetario();
  end;

  Self.Color := plsCorPerdeFoco;
end;

procedure TPlsEdit.KeyDown(var Key: Word; Shift: TShiftState);
begin
  inherited;

  if(getEnterMudaCampo)then
  begin
    if (Key = VK_RETURN) then
      TControl(Owner).Perform(WM_NEXTDLGCTL, 0, 0);
  end;
end;

procedure TPlsEdit.KeyPress(var Key: Char);
  //formata o valor do campo para o tipo monetário
  //formata valor para conter apenas duas casas decimais
(*  procedure FormatarValorMonetarioKeyPress();
  const
    find = ',';
  var
    nIndex: byte;
    sTexto: String;
    sTextoCasasDecimais: String;

    n: Integer;
    sTextoFormatado: String;
  begin
    //se existe casa decimal: caracter ','
    if(AnsiContainsStr(Self.Text,','))then
    begin
      sTexto := Self.Text;
      nIndex := Pos(find, sTexto);
      if(nIndex <> 0)then //existe ','
      begin
        sTextoCasasDecimais := Copy(sTexto, nIndex + Length(find), 255);
        if(Length(sTextoCasasDecimais)>2)then //existem mais que 2 casas decimais
        begin
          sTextoFormatado := '';
          //formata valor. Exemplo: 1.000.000,100 para 1.000.000,10
          for n:=1 to Length(sTexto) do
          begin
            if(sTexto[n] <> ',')then
              sTextoFormatado := sTextoFormatado + sTexto[n]
            else
            begin
              sTextoFormatado := sTextoFormatado + sTexto[n]; //vírgula
              sTextoFormatado := sTextoFormatado + sTexto[n+1]; //1ª casa decimal
              sTextoFormatado := sTextoFormatado + sTexto[n+2]; //2ª casa decimal
              break;
            end;
          end; //for
          Self.Text := sTextoFormatado;
        end; //if(Length(sTextoCasasDecimais)>2)then
      end; //if(nIndex <> 0)then
    end; //if(AnsiContainsStr(Self.Text,','))then
  end; //fim - FormatarValorMonetarioKeyPress()
*)
begin
  inherited;

  if(not(Self.plsAceitaCaractres))then
    Key := #0
  else
  begin
    if(Self.plsCaracteresAceitos=numeros)then
    begin
      if not(Key in['0'..'9',Chr(8)])then
        Key:= #0;
    end
    else if(Self.plsCaracteresAceitos=letras)then
    begin
      if not(Key in['a'..'z','A'..'Z',Chr(8)])then
        Key:= #0;
    end
    else if(Self.plsCaracteresAceitos=monetario)then
    begin
      if not(Key in['0'..'9',',','.',Chr(8)])then
        Key:= #0
      //verifica se não tem mais de 1 ','
      else if(Key in [','])then
      begin
        if(AnsiContainsStr(Self.Text,','))then
          Key := #0; //não valida caracter
      end;
      //FormatarValorMonetarioKeyPress();
    end
    else if(Self.plsCaracteresAceitos=monetario2)then
    begin
      if not(Key in['0'..'9',',',Chr(8)])then
        Key:= #0
      //verifica se não tem mais de 1 ','
      else if(Key in [','])then
      begin
        if(AnsiContainsStr(Self.Text,','))then
          Key := #0; //não valida caracter
        FbPodeExecutarOnChange := True;
      end
      else
        FbPodeExecutarOnChange := True;
      //FormatarValorMonetarioKeyPress();
    end
    else if(Self.plsCaracteresAceitos=percentagem)then
    begin
      if not(Key in['0'..'9',',',Chr(8)])then
        Key:= #0
      //verifica se não tem mais de 1 ','
      else if(Key in [','])then
      begin
        if(AnsiContainsStr(Self.Text,','))then
          Key := #0; //não valida caracter
        FbPodeExecutarOnChange := True;
      end
      else
        FbPodeExecutarOnChange := True;
      //FormatarValorMonetarioKeyPress();
    end


  end;
end;

procedure TPlsEdit.Change();
begin
  inherited;
  if(FbPodeExecutarOnChange)then
  begin
    FbPodeExecutarOnChange := False;
    if(Self.plsCaracteresAceitos=monetario2)then
      FormatarValorMonetario2()
    else if(Self.plsCaracteresAceitos=percentagem)then
      FormatarPercentagem();
  end;
end;

(* métodos para uso da classe *)
procedure TPlsEdit.formatarValorMonetario();
var
  i, x: Integer;
  nQtdeCarac: Integer; //quatidade de caracteres do texto
  nQtdeCaracNumeroInteiro: Integer; ////quatidade de caracteres da parte inteira
  cCaracterAtual: Char; //caracter atual, que o loop está passando
  nCentena: Integer; //se  achou a centena, que o ponto irá separar
  sTexto: string; //texto a formatar
  sTextoParteDecimal: string; //texto a formatar - somente parte decimal
  sParteInteira: string; //parte inteira do número
  sParteDecimal: string; //parte decimal do número
  sRetorno: string; //retorno do método
  sUnidade: string; //cada número retornado no loop (sem ou com ponto)

begin
  //inicializa variáveis
  if(Trim(Self.Text)<>'')then
  begin
    sTexto := StringReplace (Self.Text, '.', '', [rfReplaceAll, rfIgnoreCase]);

    sTextoParteDecimal := '';
    sParteInteira := '';
    sParteDecimal := '';
    sRetorno := '';
    nQtdeCarac := length(sTexto);
    nCentena := 0;
    nQtdeCaracNumeroInteiro := 0;

    //conta caracteres na parte inteira
    for i:=1 to nQtdeCarac do
    begin
      if(sTexto[i]<>',')then
        inc(nQtdeCaracNumeroInteiro)
      else
      begin
        for x:=i+1 to nQtdeCarac do
          sTextoParteDecimal := sTextoParteDecimal + sTexto[x];
        break;
      end;
    end;

    //formata parte inteira do número
    for i:=nQtdeCaracNumeroInteiro downto 1 do
    begin
      cCaracterAtual := sTexto[i];
      inc(nCentena);
      if((nCentena=3)and(i<>1))then
      begin
        sUnidade := '.' + cCaracterAtual;
        nCentena := 0;
      end
      else
        sUnidade := cCaracterAtual;

      sParteInteira := sUnidade + sParteInteira;
    end;

    //formata parte inteira do número
    if(Length(sTextoParteDecimal)<=0)then
      sParteDecimal := '00'
    else if(Length(sTextoParteDecimal)=1)then
      sParteDecimal := sTextoParteDecimal + '0'
    else
      sParteDecimal := Copy(sTextoParteDecimal,1,2);

    //número formatado
    if(sParteInteira = '')then
      sParteInteira := '00';
    sRetorno := sParteInteira + ',' + sParteDecimal;
    Self.Text := sRetorno;
  end;
end;

procedure TPlsEdit.formatarSeValorEhZero();
var
  sTexto: String;
  dValor: Currency;
begin
  sTexto := Self.Text;
  sTexto := StringReplace(sTexto, ',', '', [rfReplaceAll, rfIgnoreCase]);
  sTexto := StringReplace(sTexto, '.', '', [rfReplaceAll, rfIgnoreCase]);
  try
    dValor := StrToCurr(sTexto);
    if(dValor = 0)then
      Self.Text := '0,00';
  except
  end;
end;

procedure TPlsEdit.FormatarValorMonetario2();
var
  sTexto: String; //texto a ser formatado
  nPosVirgula: Integer; //posição da virgula no texto - da virgula em diante não formatar texto
  nTotalCarac: Integer; //total de caracteres do texto a ser formatado
  nPrimeiroPonto: Integer; //local do 1º ponto (.). Ex.: 1.111, 11.111, 111.111
  sTextoFmt: String; //texto formatado
  sTextoDepoisVirgula: String; //texto da virgula em diante, que depois será acrecentado ao sTextoFmt
  nContCentena:  Integer; //conta se chegou a centena. Se chegou a 3, insere um ponto
  n: Integer; //contador do for para copiar texto formatado
begin
  //sTexto := Self.Text;
  sTextoDepoisVirgula := '';
  sTexto := StringReplace (Self.Text, '.', '', [rfReplaceAll, rfIgnoreCase]);
  nPosVirgula := Pos(',',sTexto);
  if(nPosVirgula > 0)then
  begin
    sTextoDepoisVirgula := Copy(sTexto,nPosVirgula,(length(sTexto)-nPosVirgula)+1); //ex.: ('135,7','4','2'), onde, (length(sTexto)-nPosVirgula)+1 = (5-4+1)=2
    sTexto := Copy(sTexto,1,nPosVirgula-1);
  end;

  nTotalCarac := length(sTexto);
  sTextoFmt := '';
  nContCentena := 1;

  if(nTotalCarac > 3)then //formata valor (insere pontos(.))
  begin
    nPrimeiroPonto := nTotalCarac mod 3;
    //percorre todos os caracteres a serem formatados
    for n:=1 to nTotalCarac do
    begin
      sTextoFmt := sTextoFmt + Copy(sTexto,n,1); //copia caracter a caracter
      //se chegou no primeiro ponto a ser inserido, ou chegou a uma centena,
      //e não chegou ao final do texto, insere o ponto
      if((n=nPrimeiroPonto)or(nContCentena=3))and(n<>nTotalCarac)then
      begin
        sTextoFmt := sTextoFmt + '.';
        nContCentena := 1;
      end
      else
        inc(nContCentena);
    end;
  end;

  if (sTextoFmt <> '')then
  begin
    if(sTextoDepoisVirgula <> '')then
      sTextoFmt := sTextoFmt + sTextoDepoisVirgula;
    Self.Text := sTextoFmt;
    Self.SelStart := Length(Self.text); //foco no final do edit
  end;
end;

procedure TPlsEdit.FormatarPercentagem();
begin
  if(Length(Self.Text)>=2)then
  begin
    Self.Text := Self.Text + ',';
    Self.SelStart := Length(Self.text); //foco no final do edit
  end
  else if(Length(Self.Text)>=6)then
    Self.Text := '100,00';
end;

(* registra componente na palheta PULSE *)
procedure Register;
begin
  RegisterComponents('Pulse', [TPlsEdit]);
end;

end.
