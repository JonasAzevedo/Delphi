unit TDAPIOLELib_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 14791 $
// File generated on 24/07/2008 11:56:25 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\Common Files\Mercury Interactive\Quality Center\OTAClient.dll (1)
// LIBID: {F645BD06-E1B4-4E6A-82FB-E97D027FD456}
// LCID: 0
// Helpfile: 
// HelpString: OTA COM Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\stdole2.tlb)
// Errors:
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Member 'Property' of 'ITDField' changed to 'Property_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Member 'Property' of 'IGraphDefinition' changed to 'Property_'
//   Hint: Member 'Property' of 'ISearchOptions' changed to 'Property_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
// ************************************************************************ //
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
interface

uses Windows, ActiveX, Classes, Graphics, OleServer, StdVCL, Variants;
  

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  TDAPIOLELibMajorVersion = 1;
  TDAPIOLELibMinorVersion = 0;

  LIBID_TDAPIOLELib: TGUID = '{F645BD06-E1B4-4E6A-82FB-E97D027FD456}';

  IID_ITDConnection: TGUID = '{DB67E08D-7FA7-4DAC-87BB-2A55CBFFE008}';
  IID_ITDConnection2: TGUID = '{4E3DA2DC-070F-4E73-BE64-2E91A8CA7DF8}';
  IID_ITDConnection3: TGUID = '{D5630429-4097-45C3-B581-2A01C6999DDD}';
  IID_ITDProgressNotify: TGUID = '{B3391F80-3861-11D3-AFAB-00600855298D}';
  IID_IList: TGUID = '{F73CCC7B-05FA-4FD7-8FAA-B53DFFFE22DC}';
  DIID__DIOtaEvents: TGUID = '{C79EC040-A067-11D5-9D6E-000102E0AC0C}';
  DIID__DIProgressEvents: TGUID = '{F4E85688-FCD7-11D4-9D8A-0001029DEAF5}';
  IID_IUnitTestSupport: TGUID = '{24B17582-D52C-4074-8BD6-D7DD82705D15}';
  CLASS_TDConnection: TGUID = '{C5CBD7B2-490C-45F5-8C40-B8C3D108E6D7}';
  IID_IFileData: TGUID = '{3A2C3A43-4D96-4682-91CC-9E091B64C1FE}';
  CLASS_FileData: TGUID = '{37B25CC5-C319-4DAD-A57D-05A8D1201EE0}';
  IID_IExtendedStorage: TGUID = '{BF9B38B0-935B-4112-92EC-49FED46AC64D}';
  CLASS_ExtendedStorage: TGUID = '{C79B8E7E-8AAF-47B5-94A3-C824BF8453E6}';
  CLASS_ProjectRepository: TGUID = '{49444E30-82A0-4786-9566-E7DA73044631}';
  CLASS_ExtendedStorageProxy: TGUID = '{41BAF7D8-718C-45B6-9115-C91850F27074}';
  IID_IBaseFactory: TGUID = '{F13E4E0F-2BF2-41A2-97B1-06AD03204518}';
  IID_IBaseFactoryEx: TGUID = '{B1F47936-EFAC-4AEE-9876-8110B16F037D}';
  IID_ITestFactory: TGUID = '{5BB6D957-669D-47B2-8324-981492EDC42E}';
  IID_ISupportCopyPaste: TGUID = '{EBB38286-D5A3-41DD-9EBA-F2791C10522F}';
  IID_ISupportCopyPaste2: TGUID = '{057DAE0E-5171-4D8F-99B0-2BFC9F660443}';
  IID__IBaseFactory: TGUID = '{47E4C767-87DA-409F-A70E-04B3FCE28BCE}';
  IID_ISearchableFactory: TGUID = '{03986C41-712B-4A6F-8C65-B50CBF7FC640}';
  IID_IAlertableEntityFactory: TGUID = '{FF0182C5-D203-4875-BC2C-48FF8DA7266D}';
  IID_IBaseFactory2: TGUID = '{3E46BE58-4943-48AA-BA08-38EEBA837A04}';
  CLASS_TestFactory: TGUID = '{D398384F-9D08-4E70-8400-910D8750BDAB}';
  IID_IBugFactory: TGUID = '{E46670F8-B7CE-4DA6-AC5F-AE1FB9181337}';
  CLASS_BugFactory: TGUID = '{5DB9FED8-D26F-4F27-911F-99216ED75986}';
  IID_ICoverageFactory: TGUID = '{FD167DFE-8DEE-4930-AFAA-A83C2B1480EB}';
  CLASS_CoverageFactory: TGUID = '{D68C44C2-DF91-4095-B145-7FF8E430FBA7}';
  IID_IReqCoverageFactory: TGUID = '{3F004630-2A1E-4E7A-9133-6A0EA826C48F}';
  IID_IReqCoverageInformation: TGUID = '{860CDC34-7616-4A2B-9005-9FBEF00FEF68}';
  CLASS_ReqCoverageFactory: TGUID = '{AAFCDC5B-5E1A-4E41-829A-225C14BB0C88}';
  IID_IObjectLockingSupport: TGUID = '{260EDCFF-BF72-4146-BC41-5B2280652ED0}';
  IID_IBaseField: TGUID = '{E2F29752-72F0-42DB-995C-3DB385F4CCE5}';
  IID_ICoverageEntity: TGUID = '{BCF7E6D7-4281-40FA-923B-32DFA90715D7}';
  IID__IBaseField: TGUID = '{DCD217D3-9BE9-4BED-B386-1A105D84E1F0}';
  IID_IBaseField2: TGUID = '{BE73DDAA-AD0F-4A89-8936-0EDA17599273}';
  IID_IBaseField3: TGUID = '{E4DC1359-6281-42FA-B739-CFA8E4ECC23F}';
  IID_IMultiValue: TGUID = '{EB180CC0-6FDE-4A1E-A68E-F106EEED5E15}';
  CLASS_CoverageEntity: TGUID = '{F87FF5C2-4631-4E5E-BF46-38490501A12B}';
  IID_ITestSetFactory: TGUID = '{6199FE11-C44D-4712-99DF-4F5EF3F80A29}';
  CLASS_TestSetFactory: TGUID = '{50A81398-8F2F-4F38-B88D-F734C727706C}';
  CLASS_HostFactory: TGUID = '{19F58A3A-0E31-441A-A95B-70F416B7AC53}';
  IID_ISysTreeNode: TGUID = '{8538CCBA-0B3E-481F-BB2B-14F0553CA146}';
  IID_ISubjectNode: TGUID = '{0F500A37-F2F1-4079-9BE7-48C1DA715E27}';
  IID__ITreeNode: TGUID = '{81113FC0-ECB4-43E5-AEF6-BFEEC9560CB4}';
  CLASS_SubjectNode: TGUID = '{7300228B-0F1B-44D3-BF3A-790253622527}';
  CLASS_SysTreeNode: TGUID = '{BCE38540-36CC-4C3A-B474-11C8E8EEEDE0}';
  IID_ITreeManager: TGUID = '{E60B4439-691C-433D-B6D9-793044915A01}';
  CLASS_TreeManager: TGUID = '{77D80D34-C6FF-43A5-9E67-C7E0A81CF3F2}';
  IID_IVCS: TGUID = '{6C66F3F1-52E8-4B39-840B-FB1C9800C676}';
  CLASS_VCS: TGUID = '{2D1E1D34-561E-40BE-845B-E1F872209A32}';
  IID_IAttachmentVcs: TGUID = '{CE4BEF63-1922-4C81-8C81-DC18FF94D8E7}';
  CLASS_AttachmentVcs: TGUID = '{6C25C267-173B-45CB-8150-7BD1F9584981}';
  CLASS_List: TGUID = '{9007A7F1-AC71-4563-A943-CFF4051E7E3D}';
  IID_IFactoryList: TGUID = '{68FE31A3-6242-4AA4-9BBE-D0715F810DB3}';
  CLASS_FactoryList: TGUID = '{3F767372-C6D1-4F1B-8F27-1EABB614551C}';
  IID_IHierarchySupportList: TGUID = '{DDE517F0-AF73-4327-A1BD-403E6A047B0A}';
  CLASS_HierarchySupportList: TGUID = '{E214FA66-87AE-4088-8F25-75DBDCB21B7D}';
  IID_IFieldProperty: TGUID = '{C2E1AF68-28C8-4DA3-8C65-5E1D230B1FF6}';
  IID_IFieldProperty2: TGUID = '{F5DEB618-2CF4-44A1-81A1-00922B9C4F5B}';
  IID_IFieldProperty3: TGUID = '{990DDBDD-99AB-4689-980C-4B0F8FE6E29A}';
  CLASS_FieldProperty: TGUID = '{B7E70913-D656-4DB9-8763-3812FC75BB46}';
  IID_ITDField: TGUID = '{3D416474-2373-446E-9090-DBC083B6C382}';
  CLASS_TDField: TGUID = '{20F3E82A-9A7D-44FA-94C6-03E84C49521D}';
  IID_IBaseFieldEx: TGUID = '{8937B744-DE14-4E34-9A56-4E9E308B1863}';
  IID_IBaseFieldExMail: TGUID = '{BF873A99-2FB9-43DB-9559-F9F0872F7534}';
  IID_ITest: TGUID = '{4777BC00-DDBD-4DBD-ACE6-BEAE379E2051}';
  IID_IAlertable: TGUID = '{101CD251-91FB-4FB0-A440-DE755D905584}';
  IID_IAlertable2: TGUID = '{B19C1039-D667-48D1-81B0-C864E9CC3109}';
  IID_IFollowUpManager: TGUID = '{6EE10992-2569-4838-86DA-DAE1E1240E79}';
  IID_ILinkable: TGUID = '{9B1CCF47-8DC6-4B9D-AC24-35DD3361A175}';
  IID_ICoverable: TGUID = '{C5DF6450-F927-425A-A293-3A5CF0EBE56D}';
  CLASS_Test: TGUID = '{FBED7041-8CD1-471D-A1D8-C15A7C1D4CE9}';
  CLASS_DesignStepFactory: TGUID = '{D5941686-5E86-431D-87E3-A06D67B3AC44}';
  IID_IDesignStep: TGUID = '{E04B8E16-1118-4D05-90CE-3DCC39633158}';
  CLASS_DesignStep: TGUID = '{19AD0931-4FF6-4B1C-83AB-464A9D200345}';
  IID_IBug: TGUID = '{2AF970F7-6CCC-4DFB-AA78-08F689481F94}';
  CLASS_Bug: TGUID = '{AF9180F9-8C16-4824-9EA1-A9010B072B2C}';
  IID_ITestSet: TGUID = '{5BBB5891-F832-497C-BE92-76A242809E67}';
  CLASS_TestSet: TGUID = '{729074D5-C699-4B07-8E8E-25E827C71ED2}';
  IID_IRunFactory: TGUID = '{682F76CF-D479-4A34-AD8F-108F6B6C23DB}';
  CLASS_RunFactory: TGUID = '{3A24FCD2-D5E3-4B5E-82BE-2202DD566FAD}';
  IID_IRun: TGUID = '{34023178-4154-4B16-80A4-6C610096648A}';
  IID_IRun2: TGUID = '{16EF2BF4-8509-475E-B34E-3BF99C221221}';
  CLASS_Run: TGUID = '{5AB19406-71C9-40F0-AFD3-4EF9A77FE648}';
  CLASS_StepFactory: TGUID = '{12BEFCBF-0269-4BC3-9745-8B6BF5895027}';
  CLASS_BPStepFactory: TGUID = '{C8511847-C115-4680-9512-16D4371F9D58}';
  IID_IStep: TGUID = '{992BABA3-6360-4BD1-A337-B75F67BDB417}';
  IID_IStep2: TGUID = '{5FF530DD-245E-4F97-A59F-3DE69FFCC55E}';
  CLASS_Step: TGUID = '{C29AB208-56D4-493C-80FB-EA952235BAFB}';
  IID_IHostGroupFactory: TGUID = '{FA8C3437-3B5B-4246-B775-523DEEB2734A}';
  CLASS_HostGroupFactory: TGUID = '{29823A4B-9739-4E55-972D-6091096E9090}';
  IID_IHostGroup: TGUID = '{B3468A97-FD4C-4A05-9E49-1FD0ED7FD9E2}';
  CLASS_HostGroup: TGUID = '{78E51781-1777-4A05-A13F-1BB9FAFE3E48}';
  IID_IHost: TGUID = '{F90E8FE5-EC4E-4EBA-8A81-32BCCEE3AB94}';
  CLASS_Host: TGUID = '{6AF3BFA2-C914-4FF8-9531-A047745F2597}';
  CLASS_TSTestFactory: TGUID = '{1586DCBE-08C3-430F-98F1-D3F078A01E34}';
  IID_ITSTest: TGUID = '{FFE8FF09-7522-448E-933E-724B6A149887}';
  IID_ITSTest2: TGUID = '{133B9314-9A98-4659-866D-4BA8DCD4A643}';
  CLASS_TSTest: TGUID = '{488D6BE8-A962-4958-8E11-6E2EE9A20EFF}';
  IID_IConditionFactory: TGUID = '{8C63633A-6537-41B5-93A3-982823DE8689}';
  CLASS_ConditionFactory: TGUID = '{EEBD59D7-740A-48EE-82F2-14BC33B54F14}';
  IID_ICondition: TGUID = '{8A01DC68-2D34-4CB2-81D7-968F37C50715}';
  CLASS_Condition: TGUID = '{453FE104-67B0-470D-8D1E-70E7A8CF7774}';
  IID_IParam: TGUID = '{AE1410CC-D940-4356-A926-6DF6C1F45AED}';
  IID_ICommand: TGUID = '{35DE061D-B934-4DEB-9F53-6A376EB034DF}';
  IID_ICommand2: TGUID = '{F3D168E0-A5FD-4083-ADDF-1E64EE968E59}';
  CLASS_Command: TGUID = '{56FD2617-AEC0-46C8-805A-E69481480B68}';
  IID_IColumnInfo: TGUID = '{0993EF6D-FAF3-42FF-BCF9-85BBB83753F6}';
  IID_IRecordset: TGUID = '{025854DA-9D81-40E8-853D-F4EA33073A77}';
  CLASS_Recordset: TGUID = '{4FEDB030-AE1C-407C-8732-0A9E042E9B27}';
  IID_ITDFilter: TGUID = '{452897AD-D9F8-4EAE-80DB-B9C11807507F}';
  IID_ITDFilter2: TGUID = '{B14CE979-E8D8-426B-AFCF-B8AA9AFE267B}';
  IID_ISupportEntityTypes: TGUID = '{CAFABBC2-CE43-48CD-A6AC-2DBDA404C076}';
  CLASS_TDFilter: TGUID = '{6F671E95-2720-4583-BCD8-7CC3E5D3C4AF}';
  IID_IHierarchyFilter: TGUID = '{BE140C38-7D92-4C50-8C1C-A4E43C0FC329}';
  CLASS_HierarchyFilter: TGUID = '{DCA4F956-F4B7-43BB-B544-58E56D0DEDC8}';
  IID_IHistory: TGUID = '{15FBB8D4-7034-413E-A8F0-1E03B7FA4F0B}';
  CLASS_History: TGUID = '{1422200A-A929-430A-8683-6D8FDCA8BA89}';
  IID_IHistoryRecord: TGUID = '{BCAE2958-39FA-4742-93B4-16D204CF67AB}';
  IID_IHistoryRecord2: TGUID = '{E672B813-30DA-4429-97A7-A1616F0B7D2D}';
  CLASS_HistoryRecord: TGUID = '{89E2DE95-A1CA-47D1-ABCE-21D48A645E98}';
  IID_IAttachmentFactory: TGUID = '{C691D4B4-3924-4488-B554-A7E08842C625}';
  CLASS_AttachmentFactory: TGUID = '{9D02F17C-BECD-4845-AA04-5326832104AA}';
  IID_IAttachment: TGUID = '{613E9BF2-7888-438F-979F-D05DAB87B9C8}';
  CLASS_Attachment: TGUID = '{46A97504-127F-4A93-BCD0-889AF362754E}';
  IID_ILink: TGUID = '{79CFC0C1-7BB6-48CE-BC47-8074DDBCA542}';
  CLASS_Link: TGUID = '{75180DF9-EF06-4FB4-8EDB-5697713AB54C}';
  IID_ILinkFactory: TGUID = '{49B715FA-458E-46EA-A171-0E0BFB38B3AF}';
  CLASS_LinkFactory: TGUID = '{2D52E7C5-B6DE-4D8D-B885-7C1F1DC509B8}';
  IID_IReqTraceFactory: TGUID = '{59AFC6E7-D640-401D-80C4-934340993704}';
  CLASS_ReqTraceFactory: TGUID = '{F48BBDF9-2CBB-41C7-8C60-4810D71CE2CB}';
  IID_ITrace: TGUID = '{47ED7949-FBFC-4C85-9AE0-32A3180D7256}';
  CLASS_Trace: TGUID = '{161ABCAB-885F-400F-B549-C74678B0754C}';
  IID_IReq: TGUID = '{4592C936-2524-4D05-9978-95901EDE0A54}';
  IID_IReq2: TGUID = '{35692E1B-C235-426A-A77B-CD0D159C4F2E}';
  IID_ICoverableReq: TGUID = '{F061ABB7-A65F-4146-8621-5A8B04C87B8D}';
  IID_ISequentialStream: TGUID = '{0C733A30-2A1C-11CE-ADE5-00AA0044773D}';
  IID_IStream: TGUID = '{0000000C-0000-0000-C000-000000000046}';
  IID_ISupportRBTAnalysisParent: TGUID = '{C4BFEF87-D2BB-487F-B149-65B892644DFB}';
  IID_ISupportRBTAssessment: TGUID = '{7D7FDD57-E6B0-4CD5-BB97-0D2DFFD2DD70}';
  IID_ISupportRBTAnalysisChild: TGUID = '{16E049C8-05E8-4D98-B9F4-CED6BCC763FD}';
  CLASS_Req: TGUID = '{A94555C2-77AD-4F2D-B061-A9ED11AE9FE6}';
  IID_IReqFactory: TGUID = '{833093EE-C983-46F7-88BF-DE5D7E2FCBBD}';
  IID_IReqFactory2: TGUID = '{1F73BDFF-AC15-47FF-8264-88ADE733AAB7}';
  IID_IReqFactory3: TGUID = '{FDF842AD-361C-4F9A-82E6-6A2DB156FD27}';
  CLASS_ReqFactory: TGUID = '{F4E856D4-FCD7-11D4-9D8A-0001029DEAF5}';
  IID_IActionPermission: TGUID = '{1EE78B77-A68F-49D8-9707-9A7C8CEA10D2}';
  CLASS_ActionPermission: TGUID = '{8D7BCC69-04CB-422A-8F85-2654E3539340}';
  IID_IGraphDefinition: TGUID = '{96615E7A-A7C4-4B6F-A00A-418B92070F83}';
  CLASS_GraphDefinition: TGUID = '{FDF08CE0-896F-498D-928D-F85512B52F4F}';
  IID_IGraphBuilder: TGUID = '{8F96D0C2-FFFE-4C6F-984E-CE022A50EA0E}';
  CLASS_GraphBuilder: TGUID = '{771F8212-D6CE-48A1-9F3A-87EF3E6E4CD5}';
  IID_IGraph: TGUID = '{ECCB1143-8914-497A-ACA0-8789CA64C2D6}';
  CLASS_Graph: TGUID = '{8CEB0A26-08A1-4110-A851-6BB50278BF94}';
  IID_ISearchOptions: TGUID = '{2444C43F-5371-4B4A-B6B6-34D205644C35}';
  CLASS_SearchOptions: TGUID = '{EEFE895F-49F8-4E82-9E78-4A6596B5E6F2}';
  IID_ITestExecStatus: TGUID = '{C1ED849E-CB41-45A9-A256-9A0D3CFDB350}';
  CLASS_TestExecStatus: TGUID = '{170FFBC3-AE31-4AE8-9C65-0F0FC5AD5CCD}';
  IID_IExecutionStatus: TGUID = '{D367F107-1BCE-4AAB-8E6B-BF6399BD64FC}';
  CLASS_ExecutionStatus: TGUID = '{E2E80F73-808A-495E-89F6-430721FE9623}';
  IID_ITSScheduler: TGUID = '{E99AC0C8-46AB-42C3-9CB2-9C9AEC35A861}';
  CLASS_TSScheduler: TGUID = '{C121682C-6B6E-4A3F-A1CE-9E78FE897009}';
  IID_IDBManager: TGUID = '{437A2A3C-00EB-4B53-89C8-BBC5DED2D52C}';
  CLASS_DBManager: TGUID = '{F8BBE233-A298-4C0D-8D86-3D442BB8ED08}';
  IID_ICustomization: TGUID = '{9D4F53EF-41A2-4059-8AB3-13BBCA8333E8}';
  IID_ICustomization2: TGUID = '{01A21FB9-74F1-4934-81F0-8C473F7A6E50}';
  IID_ICustomization3: TGUID = '{D42ED49E-B4CD-4434-88E4-CB6A0521EF3A}';
  CLASS_Customization: TGUID = '{E6F08C7F-A34B-43DA-A632-9410170F3D00}';
  IID_ICustomizationField: TGUID = '{E34F74EC-DC52-42D8-A7E4-B4F06A56CF40}';
  IID_ICustomizationField2: TGUID = '{2FA7E440-704F-4EFE-B500-EB93E7AFD294}';
  CLASS_CustomizationField: TGUID = '{48BB9422-E786-463A-8617-25ADA366FAA0}';
  IID_ICustomizationFields: TGUID = '{6388B1FB-C735-4D24-B1E4-97221B302461}';
  CLASS_CustomizationFields: TGUID = '{FAE217FE-0F81-471F-B4A8-73B045C1710C}';
  IID_ICustomizationLists: TGUID = '{4EA26B82-65DC-4315-AD7F-D963A1C4EB2F}';
  CLASS_CustomizationLists: TGUID = '{6B8183C1-5676-4315-B202-2B78A15E1D6C}';
  IID_ICustomizationList: TGUID = '{1E1C07CA-7339-4741-A41D-DEC5A065B1F1}';
  CLASS_CustomizationList: TGUID = '{1E3AB54D-4D98-4B9F-9A0B-E6427054FED6}';
  IID_ICustomizationListNode: TGUID = '{18C04A97-2141-4852-8E02-0E79D3CAEAD3}';
  CLASS_CustomizationListNode: TGUID = '{80A02CF4-53FB-499C-9549-2EE19815179A}';
  IID_ICustomizationTypedField: TGUID = '{780EDB90-97D3-4146-AD5F-F2F313EDF29E}';
  CLASS_CustomizationTypedField: TGUID = '{14A4FF74-C84F-47B8-9D93-8DFAB4056581}';
  IID_ICustomizationTypes: TGUID = '{30873CCD-888B-4383-AECD-6C4D9EFF553F}';
  CLASS_CustomizationTypes: TGUID = '{146333EF-B7E8-4612-9542-1584271AB302}';
  IID_ITableProperties: TGUID = '{C015CC00-5F0F-4DD6-9D8C-733B1412BB1B}';
  CLASS_TableProperties: TGUID = '{065BC2FC-3B99-453C-9115-2188B73A105E}';
  IID_ICustomizationType: TGUID = '{EB345576-4831-4653-816F-791478BFE555}';
  IID_ICustomizationReqType: TGUID = '{05518018-2339-4E08-87BE-D14C69527B7A}';
  CLASS_CustomizationReqType: TGUID = '{D60E10A6-2D26-467A-9B5D-B1C206795FC2}';
  IID_ICustomizationRBT: TGUID = '{ACAEB7E2-FD86-4A8C-957E-A934FB730219}';
  CLASS_CustomizationRBT: TGUID = '{65C8CB91-586A-49B3-B8BF-4E7AD2D4B40F}';
  IID_ICustomizationRBTQuestion: TGUID = '{D641AF43-F4B6-4F9C-AC81-413557DC576C}';
  CLASS_CustomizationRBTQuestion: TGUID = '{CB0F249E-106A-4D81-9296-065B74814D4F}';
  IID_ICustomizationRBTAnswer: TGUID = '{75D8B306-2274-4D9B-9DF4-491A7D2A9B9A}';
  CLASS_CustomizationRBTAnswer: TGUID = '{67F3DD01-A10C-43E2-A5CE-FADA48DCF019}';
  IID_ISettings: TGUID = '{55110A8D-110B-460C-9D28-F8B4BCF3DFF0}';
  IID_ISettings2: TGUID = '{B761098B-AC59-4C3D-A427-D09231A402B8}';
  CLASS_Settings: TGUID = '{BD969260-2F3A-40D0-BE71-7ACE587FB343}';
  IID_ITDMailConditions: TGUID = '{FCA0B016-AC98-4E63-A7EE-34759BF8038C}';
  CLASS_TDMailConditions: TGUID = '{90A0FD6D-D4F5-4951-AA4D-3954864997C6}';
  IID_ICustomizationPermissions: TGUID = '{7EE7D348-AED6-4B3C-8FC7-5D9D8EA8E4C9}';
  CLASS_CustomizationPermissions: TGUID = '{01C802C0-3021-4FE3-91AB-8C2AD5116BB4}';
  IID_ICustomizationUsersGroups: TGUID = '{1CD20510-7700-42B6-83AB-4AFC0419318D}';
  IID_ICustomizationUsersGroups2: TGUID = '{2EDCC94A-817B-498F-A896-1E7C638B0097}';
  CLASS_CustomizationUsersGroups: TGUID = '{AB6C55FF-1D41-4AE7-A8FD-6C7BA8BE2620}';
  IID_ICustomizationUsersGroup: TGUID = '{7E12617E-3B01-42BD-A16F-13118038D0B7}';
  CLASS_CustomizationUsersGroup: TGUID = '{7545BFC6-913F-4DF9-9F70-C815E13E4CBA}';
  IID_ICustomizationUser: TGUID = '{C10389DD-70AC-48F5-BCF0-9A1CBA5FCAD9}';
  CLASS_CustomizationUser: TGUID = '{A870D9D0-B890-45E7-B3B3-53B5FA0C4F03}';
  IID_ICustomizationUsers: TGUID = '{DCFC6A77-C0F7-4F36-82E2-5164749254AF}';
  IID_ICustomizationUsers2: TGUID = '{A23C23B0-5705-409C-8FC3-842D5CFFBF5E}';
  IID_ICustomizationUsers3: TGUID = '{7236494B-BBE3-40D2-8176-E26F65D0F995}';
  CLASS_CustomizationUsers: TGUID = '{8FE1F909-64F2-49B3-908F-4F15C64D9F08}';
  IID_ICustomizationActions: TGUID = '{E746670E-69C7-4DC1-93BC-9B4662B6015D}';
  CLASS_CustomizationActions: TGUID = '{A74CE8AE-2AA0-47F4-A85E-A6E96DA8EA1E}';
  IID_ICustomizationAction: TGUID = '{217D92D5-CD8A-4ADA-8ECC-9D13C224DCA8}';
  CLASS_CustomizationAction: TGUID = '{2BE06C1F-06AF-4EA7-B3D2-B5CAFD13AE88}';
  IID_ICustomizationModules: TGUID = '{2EEC167C-FBBF-4A2F-8DE6-DE8A05EDDB50}';
  IID_ICustomizationModules2: TGUID = '{3A2F36D9-0CEF-4864-A067-7246D6615D9E}';
  IID_ICustomizationModules3: TGUID = '{109DCBCF-8D7D-4280-837B-4F950604B48B}';
  CLASS_CustomizationModules: TGUID = '{78B7C423-5E9B-4225-811A-95ABE879B461}';
  IID_IModule: TGUID = '{56799AB1-FA33-4ED4-BD4F-3CAB0E207EEB}';
  IID_ITDChat: TGUID = '{D323F3D1-837E-4C0F-9ACB-7CBCDDA557DC}';
  CLASS_TDChat: TGUID = '{C7CE06D8-F6D2-47B1-AB82-EE9A762171CD}';
  IID_ICustomizationTransitionRule: TGUID = '{93FF8BA2-20E4-40C0-BB37-638B5BFD8DAC}';
  CLASS_CustomizationTransitionRule: TGUID = '{F4332BCF-1D24-4F24-AD5E-FEDEC7FAFBB6}';
  IID_ICustomizationTransitionRules: TGUID = '{365FA56C-AE1E-46EB-A776-6EDDB82BF290}';
  CLASS_CustomizationTransitionRules: TGUID = '{1570FD42-5F4B-49B2-839C-712098B3543E}';
  IID_IErrorInfo: TGUID = '{1CF2B120-547D-101B-8E65-08002B2BD119}';
  IID_ITDErrorInfo: TGUID = '{DEBC6003-2ABE-4C93-A769-646F300A7986}';
  CLASS_TDErrorInfo: TGUID = '{5BC906B1-56F3-4DC0-A6BB-78440F908823}';
  CLASS_ChangeEntryFactory: TGUID = '{D7B3D7EE-FC85-460D-AB27-21E86176599F}';
  IID_IChangeEntry: TGUID = '{0977F04D-0A7C-403D-A07B-1C2780362C46}';
  CLASS_ChangeEntry: TGUID = '{34881384-E4DD-40D2-AF7B-F7A14D226F2D}';
  CLASS_ChangeFactory: TGUID = '{2291E05E-F2FE-4BDC-BA75-706788C70F62}';
  IID_IChange: TGUID = '{74B94507-8A42-4D11-B5BD-943B76C9A982}';
  CLASS_Change: TGUID = '{DBCF02A8-E281-4C0B-92B8-4F8AF677DD6C}';
  IID_IComFrec: TGUID = '{D2FA8791-3A81-4D03-95CA-74EF6E059C4F}';
  CLASS_ComFrec: TGUID = '{B2F590F7-BD30-45DD-90B7-F243D7E8B210}';
  IID_IExecEventNotifyByMailSettings: TGUID = '{615FBF36-3E96-4C0F-9827-12FA20D13C58}';
  CLASS_ExecEventNotifyByMailSettings: TGUID = '{D1D6B200-B24D-4C8D-8622-77FDBF49AC99}';
  IID_IProjectProperties: TGUID = '{59A79946-0678-4E59-B4B0-9967E4314CCA}';
  CLASS_ProjectProperties: TGUID = '{31905CFC-D317-4B8D-85DC-F63D8D3E6E28}';
  IID_IStepParams: TGUID = '{B4776982-5666-4075-99A3-0574EDA12EF2}';
  CLASS_StepParams: TGUID = '{86BDCEC4-35BD-4DA8-8373-474C4EBDFA9F}';
  IID_ITextParser: TGUID = '{328737D2-7777-4E5E-BB9A-488277C730C5}';
  CLASS_TextParser: TGUID = '{AAF726A2-9187-4DF5-9528-A3E66CDD28E2}';
  IID_IExecEventInfo: TGUID = '{5377347E-3F8D-4B54-B962-18527B652EDD}';
  CLASS_ExecEventInfo: TGUID = '{0409CEAA-2CAA-4596-A9EF-B9F0644D17EA}';
  IID_IAmarillusHash: TGUID = '{5073A186-2A46-4C93-A3F5-F8C0AA66694F}';
  CLASS_AmarillusHash: TGUID = '{61C395DB-BDD5-4431-995D-E5F38E8FAC70}';
  IID_IVersionItem: TGUID = '{38D402FA-9823-4D25-979E-62C377AC2E77}';
  CLASS_VersionItem: TGUID = '{0DCB2995-2738-4BE5-873D-ADAEB29262FA}';
  IID_IVcsAdmin: TGUID = '{4FB0D662-F589-4C2D-BC4E-1A6E75845472}';
  CLASS_VcsAdmin: TGUID = '{0FC5B9FD-629D-4E3F-8A36-41347ADA3107}';
  IID_IExecutionSettings: TGUID = '{41120F91-BBBE-4913-975D-5346234765A6}';
  CLASS_ExecSettings: TGUID = '{85F1A554-CF12-42A1-BC3F-BBF8BBE83DF1}';
  IID_IOnExecEventSchedulerActionParams: TGUID = '{CBD80CD0-1961-4191-A318-ABC50AB2ACD9}';
  CLASS_ExecEventActionParams: TGUID = '{F64C065B-D9BF-41CB-91AD-C1672A8220DF}';
  IID_IOnExecEventSchedulerRestartParams: TGUID = '{3120287D-98B1-4D49-9BC5-3324555D8D04}';
  CLASS_ExecEventRestartActionParams: TGUID = '{A57D9723-040E-44C9-829C-64439CC526C1}';
  IID_ITestSetTreeManager: TGUID = '{FD53A549-A095-469F-AD8E-95F9F034D2DF}';
  CLASS_TestSetTreeManager: TGUID = '{911B9D10-736A-49A2-9A19-34C3CFE6B2E9}';
  IID_ITestSetFolder: TGUID = '{E9E2BCFE-CAAC-492D-A210-C2E49A68C78F}';
  IID_ITestSetFolder2: TGUID = '{18B58E14-B956-40A3-A37F-B8EF1136F238}';
  IID_ITestSetFolder3: TGUID = '{42A0D93D-2E7A-4D93-A9DF-754928F7F6BC}';
  IID__ITestSetFolder: TGUID = '{5FCA1AE7-AE4A-4709-BD98-13240D68BBD4}';
  IID_ITestSetFolderInternal: TGUID = '{19F5C80C-DB4A-48B0-9EE8-AE0AE3090D89}';
  CLASS_TestSetFolder: TGUID = '{606FDBBB-55A7-48D6-BF70-06A7CE08049C}';
  IID_ICustomizationMailConditions: TGUID = '{2D05E2CD-60E9-4C56-A05D-D25872A00335}';
  CLASS_CustomizationMailConditions: TGUID = '{93FB7AD9-0302-4EA3-8BE5-3437F4F52906}';
  IID_ICustomizationMailCondition: TGUID = '{509C8491-47BF-454B-B899-852A55A17F46}';
  CLASS_CustomizationMailCondition: TGUID = '{78D71CB3-1DC2-49A6-BF0C-6D36AFD9E93E}';
  IID_IAnalysis: TGUID = '{557AF6E9-FB13-4934-9A8F-6620BA38C547}';
  CLASS_Analysis: TGUID = '{E8D39BCF-F7AF-4DE0-82B2-8B51AE2C8427}';
  IID_IAlert: TGUID = '{A1314B45-32F6-4841-9EB6-922EC4A76CB2}';
  CLASS_Alert: TGUID = '{0A29F8B6-0FFE-4783-B3B0-71FB3FB8D6D9}';
  IID_IAlertManager: TGUID = '{7A0B3B0B-60C4-4B84-8A35-1E9337AD055E}';
  IID_IAlertManager2: TGUID = '{AAA7D0A8-433C-4A92-8A8C-E160C743FD68}';
  CLASS_AlertManager: TGUID = '{7F04BEF8-6460-4BF2-825A-F758E8657F51}';
  IID_IRuleManager: TGUID = '{FCBDBAD5-380A-43F5-B4D4-4CD988B0C924}';
  CLASS_RuleManager: TGUID = '{2C6320EE-DE3C-46E3-9BCB-7204F3ADEC19}';
  IID_IRule: TGUID = '{5186B0F4-DAC2-4ABD-B248-8ED6E852C40D}';
  IID_IRule2: TGUID = '{2B4FDFEF-7FD6-4152-944D-11E5D938ACB6}';
  CLASS_Rule: TGUID = '{B2FDDFE1-6019-4444-9EE6-479FA0E554A2}';
  IID_IReqSummaryStatus: TGUID = '{CCD9F62A-3899-4233-9C2C-A25BFF1AF041}';
  CLASS_ReqSummaryStatus: TGUID = '{6C760530-757D-4D83-B07A-DD5F29559457}';
  IID_IReqCoverageStatus: TGUID = '{650BCE02-3C9A-4C22-ABCF-C2872EED73EB}';
  CLASS_ReqCoverageStatus: TGUID = '{54770024-A5FB-4710-8A9E-64A9A0DCBCFA}';
  IID_ICacheMgr: TGUID = '{30300941-F52E-4FFD-8314-3EA232206EB0}';
  CLASS_CacheMgr: TGUID = '{21DB8AA3-957F-4ACE-9CA7-AECFF8085BB4}';
  IID_IComponentFactory: TGUID = '{A4CEDAE3-5E32-43FC-9D39-FDA737799A1E}';
  CLASS_ComponentFactory: TGUID = '{0B280A46-1606-4FD3-90E4-EF5149725200}';
  IID_IComponentFolderFactory: TGUID = '{D6F05DAE-7F99-4FE0-9432-D48CAC4BA16E}';
  CLASS_ComponentFolderFactory: TGUID = '{36F5E5F1-C949-40AF-91E8-A4BC647B2A92}';
  IID_IComponent: TGUID = '{E8BFF66F-A020-4909-B9E3-1591182D27D7}';
  CLASS_Component: TGUID = '{71CFAB12-C911-4E7A-B4CE-3F65E45344A1}';
  IID_IComponentFolder: TGUID = '{7A6F279C-7729-4394-B5BB-BC3E8902DA56}';
  CLASS_ComponentFolder: TGUID = '{E5A4F777-79B4-4999-B9CF-4733946D6381}';
  IID_IBusinessProcess: TGUID = '{590E515E-D527-4436-B04C-40942DBFFB5F}';
  CLASS_BusinessProcess: TGUID = '{5BE353A8-508B-48B5-848B-53DF49791E52}';
  CLASS_ComponentParamFactory: TGUID = '{05A59D3B-C4D9-4E73-BD19-D7D0233D3E1C}';
  IID_IBaseParam: TGUID = '{DC091A33-E1E8-4A17-8C55-529C09B0670B}';
  IID_IComponentParam: TGUID = '{F65AD9CD-D5A3-4EC5-8904-017E4E9D2351}';
  CLASS_ComponentParam: TGUID = '{4FFF066E-4D6B-444B-94B1-73209211C62B}';
  IID_IBPComponent: TGUID = '{42AD6542-9DBC-4A66-BC3F-7692832D33CB}';
  CLASS_BPComponent: TGUID = '{C64F7478-FF48-49A7-8260-251EAB8D5B7C}';
  IID_IRTParam: TGUID = '{E0C8D290-50AF-4811-A5FB-3ED5B78B99F3}';
  CLASS_RTParam: TGUID = '{5666ABB3-0FC1-4C22-A4B0-8D43CD1E54A3}';
  IID_IBPIteration: TGUID = '{F96FB8D9-0CD2-4B82-85FA-AB07C435F87F}';
  CLASS_BPIteration: TGUID = '{6E67A18A-81DD-4546-9D64-10701F5E9558}';
  IID_IBPIterationParam: TGUID = '{B40742AD-3BED-40B4-BD58-0F24E41ACDD2}';
  CLASS_BPIterationParam: TGUID = '{F0D306D2-2BE8-43E8-B229-9B8EA279B8D5}';
  IID_IBPParam: TGUID = '{51A0C1D6-F748-41D1-988F-B0B93013F1BC}';
  CLASS_BPParameter: TGUID = '{67CDC9EF-6EEB-4E19-80E1-77855970409A}';
  IID_IExport: TGUID = '{08E8895B-686D-4F75-9F16-F9E130D99470}';
  CLASS_Export: TGUID = '{DCB4C421-E9F4-4A89-9190-B49411B17167}';
  IID_IImport: TGUID = '{3A6DFEA9-5E15-4E8F-B480-2B025730F7BD}';
  CLASS_Import: TGUID = '{CD3E5686-4B11-462F-9619-D2FA447DCE96}';
  IID_ITDUtils: TGUID = '{BB603787-CBD0-48CD-AA8A-B4532DC714D1}';
  CLASS_TDUtils: TGUID = '{977FEB6A-82DF-4F53-ADA2-F722F7E07D23}';
  IID_IBPHistoryRecord: TGUID = '{E1582AF7-780E-4D93-9771-E196205F96C7}';
  CLASS_BPHistoryRecord: TGUID = '{27F5B75D-9DB6-44A3-AAA7-0713836A15A6}';
  IID_IBPGroup: TGUID = '{DB466018-78FF-4645-9B45-B32F823C07F3}';
  CLASS_BPGroup: TGUID = '{0940D6D1-1A04-4274-8568-7F1C82BFCAFA}';
  CLASS_ComponentStepFactory: TGUID = '{46C05B73-AAE3-4420-9B38-6F221471632D}';
  IID_IComponentStep: TGUID = '{6687454E-8D1A-462E-BFDE-E342BFF132D3}';
  CLASS_ComponentStep: TGUID = '{D600F6C4-1A12-4973-80A9-A976300DF1D7}';
  CLASS_BPStepParamFactory: TGUID = '{396C2A71-28E7-4410-8BD9-380953D4B606}';
  IID_IBPStepParam: TGUID = '{6BA5E493-366C-4068-B572-93D27D405DFE}';
  CLASS_BPStepParam: TGUID = '{2824DF5E-75A6-475C-AE4D-3DC4E62EA4F5}';
  IID_IProductInfo: TGUID = '{2C8D6469-AE61-4F01-801E-6B2087216786}';
  CLASS_ProductInfo: TGUID = '{73D2B96A-0A3F-41CA-A8F2-E371220B4C63}';
  IID_IGroupingManager: TGUID = '{33CCFC63-CE02-47AB-9A11-BB2E0C324723}';
  CLASS_GroupingManager: TGUID = '{F801F7A2-04DF-4DD3-8A5E-C0CC66E0595E}';
  IID_IGroupingItem: TGUID = '{31FDA98D-C50C-416D-BB4F-9D5294896175}';
  CLASS_GroupingItem: TGUID = '{904CED76-CF4A-4C85-BB23-2B4A9DCB1D6A}';
  IID_IAuditRecordFactory: TGUID = '{10747648-0DF0-4B8C-8853-7408C70D883A}';
  CLASS_AuditRecordFactory: TGUID = '{43A652C9-63BA-44DE-BDF4-642D0596EDD2}';
  IID_IAuditPropertyFactory: TGUID = '{A3D667D7-2285-4FE1-A799-8581C6D8DE70}';
  CLASS_AuditPropertyFactory: TGUID = '{012F18E6-986E-4C65-A5D8-5F1696BC220E}';
  IID_IAuditable: TGUID = '{3DE03C28-EC6B-4953-96C2-E3216051C907}';
  CLASS_Auditable: TGUID = '{D70D7E57-CD6F-4FCA-954F-D73C30B9FD90}';
  IID_IAuditRecord: TGUID = '{1754ECE8-1386-456C-AA7C-AD448412EDA3}';
  CLASS_AuditRecord: TGUID = '{9BD93246-17D5-4A2C-9318-41B5FDBF0B51}';
  IID_IAuditProperty: TGUID = '{DD1C7F94-5C11-416D-B11D-DA062309D43A}';
  CLASS_AuditProperty: TGUID = '{64162251-9AE0-45BE-892D-535D8C5DD062}';
  CLASS_MultiValue: TGUID = '{D2990AC2-106D-4889-B299-D6D4223649E6}';
  IID_IReqType: TGUID = '{F6B62ACC-B8F1-45EF-9387-3C9FC69B529D}';
  CLASS_ReqType: TGUID = '{1E2919FE-D94C-4E66-9FF6-9187A65A674E}';
  IID_IReleaseFolder: TGUID = '{1D7BC0E7-454B-4F73-B693-F6B38763F8E2}';
  IID_IStringRepresentation: TGUID = '{B1DF17B2-7243-40FA-B423-1566A1988246}';
  IID_ISysTreeNode2: TGUID = '{9A7EB65C-DA52-4CA3-BE0F-010499A82A36}';
  CLASS_ReleaseFolder: TGUID = '{99BB1B1D-8BA6-4090-979B-C12EC3BDE24A}';
  IID_IRelease: TGUID = '{B08CEC57-0E62-49BB-9791-0D764F613B2E}';
  CLASS_Release: TGUID = '{B4888744-8ABB-4C4B-AB66-F98E9F6F2DCA}';
  IID_IReleaseFolderFactory: TGUID = '{372A0E68-0D49-401A-97E2-C29595E8A562}';
  CLASS_ReleaseFolderFactory: TGUID = '{FF51F339-92AF-4693-9736-6CD3E6AD9889}';
  IID_IReleaseFactory: TGUID = '{A11A2CBD-C066-4E20-9F2B-73F88AB32198}';
  CLASS_ReleaseFactory: TGUID = '{35A92ABF-F089-4BF7-A7F7-0BA88A4EA61D}';
  IID_ICycleFactory: TGUID = '{B5C61825-C184-4FBC-89FA-A7CC04EF815D}';
  CLASS_CycleFactory: TGUID = '{8BA6F054-2C4D-487C-9B60-8E76452CFC26}';
  IID_ICycle: TGUID = '{328B58D8-2591-4E09-AAFB-C3C1321B18FA}';
  CLASS_Cycle: TGUID = '{BFCC7073-662A-4037-9C55-C3272018E40B}';
  IID_IReleaseManagementInfo: TGUID = '{F14FB85C-6419-442F-B1DF-5CC4969695D9}';
  CLASS_ReleaseManagementInfo: TGUID = '{A1028CB9-611A-4CA2-B3A3-82D894F3FDF1}';
  IID_IWarningInfo: TGUID = '{551A15F5-289D-4C25-AAFA-75CB0171668E}';
  CLASS_WarningInfo: TGUID = '{0A3D3A7A-A798-4437-91B6-870D71DB0C10}';
  IID_IExtensionData: TGUID = '{3A3FE6C4-6DE7-47AB-8BF1-EE578637596A}';
  CLASS_ExtensionData: TGUID = '{E17C0FF1-8E56-42B6-BEFD-E9567657F7CF}';
  IID_IExtensionServiceProvider: TGUID = '{9B1C51AD-A124-465D-96EE-39DB5168FEFC}';
  CLASS_ExtensionServiceProvider: TGUID = '{65C96D40-BBB1-4C14-84B2-0947C85FD228}';
  IID_ICacheManager: TGUID = '{0EEC8C98-2379-4B90-BB09-EBBA9B2A73E1}';
  IID_ISystemFieldService: TGUID = '{B721DBBD-D7C2-4765-A4B9-164AD6604BD3}';
  IID_IDataServiceProvider: TGUID = '{4EA0B972-9132-4485-90BE-AE502F08F784}';
  IID_ICustomizationPermissionService: TGUID = '{C5F2DD90-484A-48B3-874F-9BFF5C14AC67}';
  IID_IFactoryService: TGUID = '{6332415A-E7DB-4287-95E5-5BD206F6AA8A}';
  IID_ICITFactoryService: TGUID = '{AAEF1B4C-4B50-4502-BE8E-11AD9A78B9E7}';
  IID_ISOAFactoryService: TGUID = '{30EFB8D1-09A7-44C4-91D4-A4D721CF7370}';
  CLASS_FactoryService: TGUID = '{FFE9510B-3E30-4F08-B6F7-73F428A24D18}';
  CLASS_CacheManager: TGUID = '{F8BB0A05-6467-40B4-A45C-B2E1F77105AA}';
  CLASS_SystemFieldService: TGUID = '{E35B38DD-0320-43D8-8051-6169AA1756BB}';
  CLASS_DataServiceProvider: TGUID = '{C578DCAD-99C3-4FD4-9416-7C8A46507C10}';
  CLASS_CustomizationPermissionService: TGUID = '{10DCE8B3-87B7-48E1-A1FE-7444B0F0D106}';
  IID_IExtensionManager: TGUID = '{34AC6EC7-3E2D-4A15-90A0-DF789E91A966}';
  CLASS_ExtensionManager: TGUID = '{C2DA4B81-E2B7-44DD-9441-4D3DED3A85D7}';
  CLASS_ServiceFactory: TGUID = '{8E3E0D27-F56E-43B9-8C9B-BDDCEA1354EC}';
  CLASS_ServiceFolderFactory: TGUID = '{3D3C9942-B3D4-4791-8D20-BEA0E810AA88}';
  CLASS_ServiceGroupFactory: TGUID = '{C559D3DA-EDE9-4BFF-805A-9C4BF90FD4A8}';
  CLASS_WsdlOperationFactory: TGUID = '{3D852764-F9FE-471F-9DDD-11252E0C0102}';
  CLASS_WsdlOperationParamFactory: TGUID = '{16A2B8AA-C43F-4B5C-B0D5-C623A7F5774C}';
  CLASS_ServiceChangeFactory: TGUID = '{6E69C0F1-8005-42E1-AEA8-9432F9482E8C}';
  CLASS_Service: TGUID = '{C559D3DA-EDE9-4BFF-805A-9C4BF90FD4A5}';
  CLASS_ServiceFolder: TGUID = '{C559D3DA-EDE9-4BFF-805A-9C4BF90FD4A6}';
  CLASS_ServiceGroup: TGUID = '{C559D3DA-EDE9-4BFF-805A-9C4BF90FD4A7}';
  CLASS_WsdlOperation: TGUID = '{14D49D69-A5AE-4E1F-8E7D-2A1DED5A5FEB}';
  CLASS_WsdlOperationParam: TGUID = '{EE772E3C-C308-46DB-B386-FA151E3E4DFD}';
  CLASS_ServiceChange: TGUID = '{55B61D16-CD54-41C8-B9D4-70AB635CC6A5}';
  CLASS_ApplicationEntity: TGUID = '{AE5368BA-75B0-4BD1-B1C0-03430995D66C}';
  CLASS_ApplicationEntityFactory: TGUID = '{06068A0C-FBF3-4616-A159-55B0232629E7}';
  CLASS_BlueprintEntity: TGUID = '{9487179B-0554-403F-9709-38B06F6445B2}';
  CLASS_BlueprintFactory: TGUID = '{30205F45-33E3-4548-8509-35D1FD20AADF}';
  IID_IBaseHierarchyTreeManager: TGUID = '{0225839A-79F8-4493-872C-004FFDDF0CA1}';
  CLASS_ApplicationEntityTreeManager: TGUID = '{85548250-CBED-4045-B0CE-4A64990D3AB4}';
  IID_IBaseEntityFolder: TGUID = '{73598F2E-D89E-4144-B9B1-6A4C4D933276}';
  IID__IBaseEntityFolder: TGUID = '{93E2B82D-3DB2-4D46-97D5-BCFCAB106BDF}';
  CLASS_ApplicationEntityFolder: TGUID = '{0D250722-5B95-454B-9DD4-D937FFFB4F07}';
  CLASS_ChangeEntity: TGUID = '{38F013CE-7F8A-4ADD-A953-9ADCEA9B1D44}';
  CLASS_ChangeEntityFactory: TGUID = '{CC5BE243-F781-4E2C-92C6-B59FD0EAA88D}';
  CLASS_ChangeEntityTreeManager: TGUID = '{7CE8D8B1-82E5-4BD9-A864-3A20CA82C8FA}';
  CLASS_ChangeEntityFolder: TGUID = '{E941CBF2-BA86-4E1A-9A6C-11928FB9D856}';
  CLASS_ApplicationConfiguration: TGUID = '{11A07BD6-5E3F-46E9-B99C-E7DD7171AF89}';
  CLASS_ApplicationConfigurationFactory: TGUID = '{A1919D31-5331-42B3-B239-7EC42C818591}';
  CLASS_ApplicationImpact: TGUID = '{E7F7B454-A0C3-4C33-966F-AD59AE8AC606}';
  CLASS_ApplicationImpactFactory: TGUID = '{041113C7-8FD7-4449-B236-A14EE4621489}';
  CLASS_Module: TGUID = '{B97A898A-AA41-429E-A062-D6A3A7B67FBD}';

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
// Constants for enum tagTDAPI_ERRORCODES
type
  tagTDAPI_ERRORCODES = TOleEnum;
const
  TDOLE_OBJNOTINITIALIZED = $000003E9;
  TDOLE_GENERROR = $000003EA;
  TDOLE_NOCONFIGFILE = $000003EB;
  TDOLE_ILLEGALPASSWORD = $000003EC;
  TDOLE_ILLEGALDBNAME = $000003ED;
  TDOLE_NODBDIR = $000003EE;
  TDOLE_NOTESTDIR = $000003EF;
  TDOLE_DBLIMIT = $000003F0;
  TDOLE_DBVERMISMATCH = $000003F1;
  TDOLE_NO_IDAPI_DLL = $000003F2;
  TDOLE_RECNOTFOUND = $000003F3;
  TDOLE_NOFIELD = $000003F4;
  TDOLE_NOTAUTOTEST = $000003F5;
  TDOLE_NODIRECTORY = $000003F6;
  TDOLE_ATEOF = $000003F7;
  TDOLE_ATBOF = $000003F8;
  TDOLE_INVALIDATTRNAME = $000003F9;
  TDOLE_ILLEGALSUBJECTPATH = $000003FA;
  TDOLE_MANUALTEST = $000003FB;
  TDOLE_CHANGED = $000003FC;
  TDOLE_DBNOTCONNECTED = $000003FD;
  TDOLE_INVALIDNODEID = $000003FE;
  TDOLE_NONODE = $000003FF;
  TDOLE_CANNTOPENTESTTB = $00000400;
  TDOLE_CANNTOPENSTEPTB = $00000401;
  TDOLE_CANNTOPENRUNTB = $00000402;
  TDOLE_CANNTOPENTESTCYCLTB = $00000403;
  TDOLE_CANNTOPENCYCLETB = $00000404;
  TDOLE_CANNTOPENDESSTEPTB = $00000405;
  TDOLE_CANNTOPENHISTTB = $00000406;
  TDOLE_CANNTBUILDTREE = $00000407;
  TDOLE_NOASSOCIATEDROOT = $00000408;
  TDOLE_VCS_NOVCS = $00000409;
  TDOLE_VCS_NOTVCSDB = $0000040A;
  TDOLE_VCS_CANNOTLOGIN = $0000040B;
  TDOLE_VCS_NOTINVCSDB = $0000040C;
  TDOLE_VCS_LOCKEDMETEST = $0000040D;
  TDOLE_VCS_LOCKEDTEST = $0000040E;
  TDOLE_VCS_NOTCONNECTED = $0000040F;
  TDOLE_VCS_NOTCHECKEDOUT = $00000410;
  TDOLE_VCS_NOTLOCKED = $00000411;
  TDOLE_VCS_NOTDEFVERFILE = $00000412;
  TDOLE_FAILED_TO_SET_CUR_VER = $00000413;
  TDOLE_FAILED_TO_GET_CUR_VER = $00000414;
  TDOLE_MAIL_NO_ERROR = $00000415;
  TDOLE_NO_MAIL_DLL = $00000416;
  TDOLE_MAIL_NO_TO_FIELD = $00000417;
  TDOLE_MAIL_ERR_PARSING_PARAMS = $00000418;
  TDOLE_MAIL_GENERROR = $00000419;
  TDOLE_MAIL_LOGIN_FAILURE = $0000041A;
  TDOLE_MAIL_ERR_SENDING = $0000041B;
  TDOLE_MAIL_BAD_FROM_FIELD = $0000041C;
  TDOLE_WARNING_FROM_NOT_FOUND = $0000041D;
  TDOLE_MAIL_WARNING_BAD_OR_EMPTY_USER_OR_USERGROUP = $00000582;
  TDOLE_NOABSOLUTEPATH = $0000041E;
  TDOLE_TEST_EXISTS = $0000041F;
  TDOLE_LICENSE_DENIED = $00000420;
  TDOLE_LICENSE_OVERFLOW_ALERT = $00000421;
  TDOLE_LICENSE_NOT_INITILIZED = $00000422;
  TDOLE_LICENSE_GENERROR = $00000423;
  TDOLE_LICENSE_KEY_EXPIRED = $00000424;
  TDOLE_LICENSE_DOMAIN_NOT_FOUND = $00000425;
  TDOLE_LICENSE_MUID_NOT_FOUND = $00000426;
  TDOLE_VCS_VERSIONEXISTS = $00000427;
  TDOLE_VCS_VERSIONNOTEXISTS = $00000428;
  TDOLE_BAD_REQUEST = $00000429;
  TDOLE_BAD_ATT_STREAM = $0000042A;
  TDOLE_RECCOVER_EXISTS = $0000042C;
  TDOLE_ERROR_FILESYSTEM = $0000042D;
  TDOLE_ERROR_PATH_NOT_FOUND = $0000042E;
  TDAPI_ERROR_PATH_PERMISSION = $0000042F;
  TDAPI_DISCONNECTED_BY_ADMIN = $00000435;
  TDAPI_FAILED_TO_RECONNECT = $00000436;
  TDOLE_DUPLICATENODENAME = $00000438;
  TDOLE_MAIL_ERROR_BAD_ENTITY = $00000439;
  TDOLE_CYCLE_EXISTS = $0000043A;
  TDOLE_BAD_FILTER_START = $0000044C;
  TDOLE_BAD_FILTER_1 = $0000044D;
  TDOLE_BAD_FILTER_2 = $0000044E;
  TDOLE_BAD_FILTER_3 = $0000044F;
  TDOLE_BAD_FILTER_4 = $00000450;
  TDOLE_BAD_FILTER_5 = $00000451;
  TDOLE_BAD_FILTER_6 = $00000452;
  TDOLE_BAD_FILTER_7 = $00000453;
  TDOLE_BAD_FILTER_END = $00000456;
  TDOLE_TESTS_ALREADY_RUN = $00000457;
  TDOLE_E_CREATE_LOG_FILE = $00000458;
  TDOLE_E_START_RUNS = $00000459;
  TDOLE_ILLEGALUSERNAME = $00000480;
  TDOLE_REQUEST_CANCELLED = $00000481;
  TDOLE_RESPONSE_TAMPERED = $00000482;
  TDOLE_DB_TABLE_NAME = $000007D0;
  TDOLE_REQ_EXISTS = $00000807;
  TDAPI_REQ_EXISTS_ABORT = $00000808;
  TDAPI_REQ_VIOLATION_OF_TYPE_HIER_RULES = $0000080C;
  TDAPI_TEXT_SEARCH_INDEX_MISSING = $0000089D;
  TDAPI_QUERY_VALIDATION_FAILED_TOO_MANY_STATEMENTS = $000008A2;
  TDAPI_QUERY_VALIDATION_FAILED_BLACK_LIST_EXISTS = $000008A3;
  TDAPI_QUERY_VALIDATION_FAILED_NOT_SELECT_STATEMENT = $000008A4;
  TDOLE_TESTSET_FOLDER_EXISTS = $00000BEF;
  TDOLE_COMPONENT_EXISTS = $00001B59;
  TDOLE_COMPONENT_FOLDER_EXISTS = $00001B5A;
  TDOLE_COMPONENT_PARAM_EXISTS = $00001B5B;
  COMPONENT_E_CREATE = $00001B5C;
  COMPONENTFOLDER_E_CREATE = $00001B5D;
  COMPONENTPARAM_E_CREATE = $00001B5E;
  TDOLE_E_NON_PROJECT_SPECIFIC_BPT = $00001B5F;
  COMPONENTSTEP_E_CREATE = $00001B60;
  TDOLE_E_BPT_ITERATIONS_MISMATCH = $00001B61;
  TDOLE_E_BPT_COMPONENT_STEP_VALIDATION_FAILED = $00001B62;
  IMPEXP_RESOURCE_DOESNT_EXIST = $00001BBC;
  TDOLE_E_REMOVE_TYPE_VALIDATION_FAILED = $00001C20;
  TDOLE_FAIL_TO_REMOVE_TYPE_COVERAGE = $00001C21;
  TDOLE_RELEASE_FOLDER_EXISTS = $00001F44;
  TDOLE_RELEASE_EXISTS = $00001F45;
  TDOLE_RELEASECYCLE_EXISTS = $00001F46;
  TDOLE_SERVER_LOCKS_REMOVED = $000029CC;
  TDOLE_FAILED_LOCK_REMOVE = $000029D6;
  TDOLE_OBJECT_LOCKED = $000029E0;
  TDOLE_WRONG_ADMIN_PWD = $000029EA;
  TDOLE_ADMIN_NOT_CONNECTED = $000029F4;
  TDAPI_OBJECT_NOT_EXISTS = $000029FE;
  TDOLE_UNEXPECTED = $00001388;
  TDOLE_INTERNAL = $00001392;
  TDOLE_DATA_CORRUPTION = $0000139C;
  TDOLE_CALL_ORDER = $0000139D;
  TDOLE_INVALID_PARAM = $000013EC;
  TDOLE_INVALID_PARAM_TYPE = $000013ED;
  TDOLE_INVALID_PARAM_RANGE = $000013EE;
  TDOLE_INVALID_PARAM_NUM = $000013EF;
  TDOLE_INVALID_PARAM_FORMAT = $000013F0;
  TDOLE_INVALID_PARAM_ENUM = $000013F1;
  TDOLE_E_INITIALIZE = $00001450;
  TDOLE_INVALID_REQUEST = $0000145A;
  TDOLE_INVALID_INPROCESS = $00001464;
  TDOLE_INVALID_OBJECT = $00001770;
  TDOLE_INVALID_OBJECT_KEY = $00001771;
  TDOLE_OBJECT_DELETED = $00001772;
  TDOLE_OBJECT_NOT_INITIALIZED = $00001773;
  TDOLE_VIRTUAL_FATHER = $0000177A;
  TDOLE_VIRTUAL = $00001784;
  TDOLE_NOT_VIRTUAL = $0000178E;
  TDOLE_FIELD_ONLY_FOR_VIRTUAL = $00001790;
  TDOLE_VIRTUAL_FIELD = $00001798;
  TDOLE_E_PERMISSION = $000017D4;
  TDOLE_E_CHACHE = $00001A2C;
  PARAM_E_WRONG_NUM = $000004B0;
  PARAM_E_NOT_FOUND = $000004B1;
  PARAM_E_INVALID = $000004B2;
  LIST_E_EMPTY = $000004C4;
  LIST_E_FILTER = $000004C5;
  COL_E_NOT_FOUND = $000004D8;
  BUG_E_NOT_FOUND = $000004EC;
  BUG_E_DELETE = $000004ED;
  BUG_E_CREATE = $000004EE;
  TEST_E_NOT_FOUND = $00000500;
  TEST_E_CREATE = $00000501;
  TEST_E_DELETE = $00000502;
  TEST_E_COV_DELETE = $00000503;
  TEST_E_REPOSITORY = $00000504;
  TEST_E_TEMPLATE_TYPE = $00000505;
  TDAPI_E_LINK_TEST_CIRCLUATION = $00000507;
  FIELD_E_NO_PERMISSION = $00000514;
  FIELD_E_SYS_FIELD = $00000515;
  FIELD_E_NOT_ACTIVE = $00000516;
  FIELD_E_IS_KEY = $00000517;
  FIELD_E_NO_EDIT = $00000518;
  FIELD_E_VERIFIED = $00000519;
  FIELD_E_TRANSITION = $0000051A;
  FIELD_E_REQUIRED = $0000051B;
  FIELD_INVALID = $0000051C;
  USER_E_NOT_FOUND = $00000528;
  USER_E_CREATE = $00000529;
  USER_E_DELETE = $0000052A;
  USER_E_IN_GROUP = $0000052B;
  USER_E_NOT_IN_GROUP = $0000052C;
  FILTER_E_NOVALUE = $0000053C;
  FILTER_E_INVALIDVALUE = $0000053D;
  FILTER_E_INVALIDNAME = $0000053E;
  FILTER_S_DATE_COMPLEX = $0000053F;
  FILTER_S_LIST_BY_CODE = $00000540;
  FILTER_E_INVALIDPATH_ATTR = $00000541;
  REQ_E_NOT_FOUND = $00000550;
  REQ_E_INVALIDORDER = $00000551;
  REQ_E_INVALIDFATHERID = $00000552;
  REQ_E_INVALIDTYPE = $00000553;
  REQ_E_CREATE = $00000554;
  REQ_E_INVALIDMODE = $00000555;
  REQ_E_DELETE = $00000556;
  TESTSET_E_NOT_FOUND = $00000564;
  TESTSET_E_CREATE = $00000565;
  TESTSET_E_DELETE = $00000566;
  TESTSET_E_DELETE_DEFAULT = $00000567;
  TSTEST_E_NOT_FOUND = $00000578;
  TSTEST_E_DELETE = $00000579;
  TSTEST_E_CREATE = $0000057A;
  ITEM_E_NOT_FOUND = $0000058C;
  ITEM_E_NO_ADD = $0000058D;
  ITEM_E_NO_REMOVE = $0000058E;
  COND_E_NOT_FOUND = $000005A0;
  COND_E_CREATE = $000005A1;
  COND_E_INVALIDTYPE = $000005A2;
  ATT_E_NOT_FOUND = $000005B4;
  ATT_E_CREATE = $000005B5;
  ATT_E_INVALID_REQUEST = $000005B7;
  ATT_E_RENAME = $000005B8;
  ATT_E_OBJECT_HAS_ATTACHMENT = $000005B9;
  USERSGROUP_E_NOT_FOUND = $000005C8;
  USERSGROUP_E_SYSTEM = $000005C9;
  USERSGROUP_E_CREATE = $000005CA;
  DESSTEP_E_NOT_FOUND = $000005DC;
  DESSTEP_E_CREATE = $000005DD;
  DESSTEP_E_DELETE = $000005DE;
  TREE_E_NOT_FOUND = $000005F0;
  TREE_E_CREATE = $000005F1;
  TREE_E_DELETE = $000005F2;
  TREE_E_RENAME = $000005F3;
  RUN_E_NOT_FOUND = $00000604;
  RUN_E_CREATE = $00000605;
  RUN_E_DELETE = $00000606;
  STEP_E_NOT_FOUND = $00000618;
  STEP_E_CREATE = $00000619;
  STEP_E_DELETE = $0000061A;
  STEP_E_COPY_STEPS_OF_RUN = $0000061B;
  EXSTORAGE_CANCEL = $0000062C;
  EXSTORAGE_OCCIPIED = $0000062D;
  EXSTORAGE_INVALID_FILTER = $0000062E;
  EXSTORAGE_IO_OPERATION_DISABLED = $00000630;
  EXSTORAGE_INVALID_PATH = $00000631;
  EXSTORAGE_CANT_CREATE = $00000632;
  EXSTORAGE_INTERNET = $00000633;
  EXSTORAGE_EMPTY_SERVER_PATH = $00000634;
  EXSTORAGE_EMPTY_ClIENT_PATH = $00000635;
  EXSTORAGE_ERROR_SERVER_PATH = $00000636;
  EXSTORAGE_ERROR_PERMISSION = $00000637;
  SERVER_NOT_CONNECTED = $00000640;
  HOST_E_DELETE = $00000654;
  HOST_E_NOT_FOUND = $00000655;
  HOSTGROUP_E_NOT_FOUND = $00000668;
  COPY_SUBJECT_E_TO_ITSELF = $0000067C;
  TDOLE_NODE_EXISTS = $0000067D;
  TDOLE_ANSWERLESS_QUESTION_FOUND = $00000690;
  TDOLE_QUESTION_WITH_DUPLICATE_ANSWERS_FOUND = $00000691;
  TDOLE_CAN_NOT_COMNMIT_RBT_CUSTOMIZATION = $00000692;
  TDOLE_WARNING_NO_ALERTS_CLEARED = $0000069A;
  TDOLE_WARNING_SOME_ALERTS_NOT_CLEARED = $0000069B;
  TDOLE_WARNING_ALERT_NOT_CLEARED = $0000069C;
  GRAPH_DATA_EMPTY = $000006A4;
  TDAPI_GRAPH_RELEASE_CYCLE_DATE_MISSING = $000006A5;
  EVENT_ERR_DISABLE = $00000708;
  MAILCONDITION_E_NOT_FOUND = $0000073A;
  TDPARAM_NOT_FOUND = $0000076C;
  TDOLE_DIFFERENT_UDFS = $0000079E;
  LINK_E_CREATE = $000007B2;
  TDAPI_E_LINK_EXISTS = $000007B3;
  TDAPI_E_DEFECT_LINKED_TO_ITSELF = $000007B4;
  TDOLE_CAN_UPDATE_UDFS = $00000434;
  TDOLE_CORRUPTED_DATA_HIDING = $00002329;
  TDOLE_NOT_LOGGED_IN = $00007531;
  TDOLE_LOGIN_INPUT_PROPERTY_DOES_NOT_EXIST = $00007532;
  TDOLE_LOGIN_INPUT_VALUE_EXCEED_MAX_LENGTH = $00007533;
  TDOLE_LOGIN_INPUT_MANDATORY_PROPERTY_MISSING = $00007534;
  TDOLE_APP_ENTITY_FOLDER_EXISTS = $0000C387;
  TDOLE_CHANGE_ENTITY_FOLDER_EXISTS = $0000C388;

// Constants for enum tagTDAPI_SETTINGS
type
  tagTDAPI_SETTINGS = TOleEnum;
const
  TDAPI_STARTVIRTUAL_VALUE = $FFFFFFF6;

// Constants for enum tagTDAPI_PURGE_RUNS
type
  tagTDAPI_PURGE_RUNS = TOleEnum;
const
  TDDAY_PURGE = $00000001;
  TDWEEK_PURGE = $00000002;
  TDMONTH_PURGE = $00000003;
  TDYEAR_PURGE = $00000004;
  TDDATE_PURGE = $00000005;

// Constants for enum tagTDAPI_POS_ORDER
type
  tagTDAPI_POS_ORDER = TOleEnum;
const
  TDPOSITION_LAST = $FFFFFFFC;

// Constants for enum tagTDAPI_CONDTYPE
type
  tagTDAPI_CONDTYPE = TOleEnum;
const
  TDCOND_RUN = $00000001;

// Constants for enum tagTDAPI_CONDSTAT
type
  tagTDAPI_CONDSTAT = TOleEnum;
const
  TDCOND_FINISHED = $00000001;
  TDCOND_PASSED = $00000002;
  TDCOND_FAILED = $00000003;

// Constants for enum tagTDAPI_COMPONENT_AUTO_TYPE
type
  tagTDAPI_COMPONENT_AUTO_TYPE = TOleEnum;
const
  MANUAL = $00000001;
  KW = $00000002;
  SCRIPTED = $00000003;

// Constants for enum tagTDAPI_ATTACH
type
  tagTDAPI_ATTACH = TOleEnum;
const
  TDATT_COPY = $00000001;
  TDATT_MOVE = $00000002;
  TDATT_LINK = $00000003;
  TDATT_COPY_ASINCHRONE = $00000004;

// Constants for enum tagTDAPI_ATTACH_TYPE
type
  tagTDAPI_ATTACH_TYPE = TOleEnum;
const
  TDATT_FILE = $00000001;
  TDATT_INTERNET = $00000002;

// Constants for enum tagTDAPI_ATTACH_SUBTYPE
type
  tagTDAPI_ATTACH_SUBTYPE = TOleEnum;
const
  TDATT_NONE = $00000000;
  TDATT_RICH_CONTENT = $00000001;

// Constants for enum tagTDAPI_REQMODE
type
  tagTDAPI_REQMODE = TOleEnum;
const
  TDREQMODE_REC = $00000001;
  TDREQMODE_SMART = $00000002;
  TDREQMODE_REM_REM_ALL = $00000004;
  TDREQMODE_FIND_START_WITH = $00000008;
  TDREQMODE_FIND_EXACT = $00000010;
  TDREQMODE_FIND_ANYWHERE = $00000020;

// Constants for enum tagTDAPI_DATATYPES
type
  tagTDAPI_DATATYPES = TOleEnum;
const
  TDOLE_LONG = $00000000;
  TDOLE_ULONG = $00000001;
  TDOLE_FLOAT = $00000002;
  TDOLE_STRING = $00000003;
  TDOLE_MEMO = $00000004;
  TDOLE_DATE = $00000005;
  TDOLE_TIMESTAMP = $00000006;
  TDOLE_TREENODE = $00000007;
  TDOLE_USER_LIST = $00000008;
  TDOLE_TESTSET_LIST = $00000009;
  TDOLE_HOST_LIST = $0000000A;
  TDOLE_SUBJECT_TREENODE = $0000000B;
  TDOLE_TESTSET_FOLDER = $0000000C;
  TDOLE_REQUIREMENT_TREENODE = $0000000D;
  TDOLE_REQUIREMENT_TYPE_ID = $0000000E;
  TDOLE_RELEASE_SINGLE_TREENODE = $0000000F;
  TDOLE_RELEASE_MULTI_TREENODE = $00000010;
  TDOLE_RELEASECYCLE_SINGLE_TREENODE = $00000011;
  TDOLE_RELEASECYCLE_MULTI_TREENODE = $00000012;
  TDOLE_APPLICATION_ENTITY_FOLDER = $00000013;
  TDOLE_CHANGE_ENTITY_FOLDER = $00000014;

// Constants for enum tagTDAPI_NODEATTRIBUTE
type
  tagTDAPI_NODEATTRIBUTE = TOleEnum;
const
  TDOLE_NODE_SYSTEM = $00000000;
  TDOLE_NODE_READONLY = $00000001;
  TDOLE_NODE_CHANGEABLE = $00000002;
  TDOLE_NODE_FULLACCESS = $00000003;

// Constants for enum tagTDAPI_ROOTLIST
type
  tagTDAPI_ROOTLIST = TOleEnum;
const
  TDOLE_ALL = $00000000;
  TDOLE_SUBJECT = $00000001;
  TDOLE_NOT_SUBJECT = $00000002;

// Constants for enum tagTDAPI_FILTERORDER
type
  tagTDAPI_FILTERORDER = TOleEnum;
const
  TDOLE_ASCENDING = $00000000;
  TDOLE_DESCENDING = $00000001;

// Constants for enum tagTDAPI_TREETYPE
type
  tagTDAPI_TREETYPE = TOleEnum;
const
  TDOLE_LEAF_TYPE = $00000000;
  TDOLE_LIST_TYPE = $00000001;
  TDOLE_TREE_TYPE = $00000002;

// Constants for enum tagTDAPI_SKIP
type
  tagTDAPI_SKIP = TOleEnum;
const
  TDOLE_SKIP_DAYS = $00000000;
  TDOLE_SKIP_WEEKS = $00000001;
  TDOLE_SKIP_MONTHS = $00000002;
  TDOLE_SKIP_YEARS = $00000003;

// Constants for enum tagTDAPI_EXECUTE_QUERY_LIMIT
type
  tagTDAPI_EXECUTE_QUERY_LIMIT = TOleEnum;
const
  TDOLE_EXECUTE_QUERY_LIMIT_OK_NOTRUNCATION_STATUS = $00000000;
  TDOLE_EXECUTE_QUERY_LIMIT_OK_TRUNCATED_BY_REQUEST_STATUS = $00000001;
  TDOLE_EXECUTE_QUERY_LIMIT_OK_TRUNCATED_BY_SITEADMIN_STATUS = $00000002;

// Constants for enum tagTDAPI_FDATA_TYPE
type
  tagTDAPI_FDATA_TYPE = TOleEnum;
const
  TDOLE_FOLDER = $00000000;
  TDOLE_FILE = $00000001;

// Constants for enum tagTDAPI_EXSTOR_DELMODE
type
  tagTDAPI_EXSTOR_DELMODE = TOleEnum;
const
  TDOLE_DELETE_LOCAL = $00000001;
  TDOLE_DELETE_REMOTE = $00000002;

// Constants for enum tagTDAPI_STEP_CREATE
type
  tagTDAPI_STEP_CREATE = TOleEnum;
const
  TDOLE_STEP_CREATE = $00000000;
  TDOLE_STEP_UPDATE = $00000002;

// Constants for enum tagTDAPI_FETCH_LEVEL
type
  tagTDAPI_FETCH_LEVEL = TOleEnum;
const
  TDOLE_FIRST_LEVEL = $00000000;
  TDOLE_SECOND_LEVEL = $00000001;
  TDOLE_THIRD_LEVEL = $00000002;

// Constants for enum tagEXTENDED_STORAGE_SETTING
type
  tagEXTENDED_STORAGE_SETTING = TOleEnum;
const
  EStorage_MirrorSet = $00000000;
  EStorage_MirrorGet = $00000001;

// Constants for enum tagEXTENDED_STORAGE_DELETE
type
  tagEXTENDED_STORAGE_DELETE = TOleEnum;
const
  NO_DELETE = $00000000;
  DELETE_CLIENT = $00000001;
  DELETE_SERVER = $00000002;
  DELETE_BOTH = $00000003;

// Constants for enum tagEXTENDED_STORAGE_PUT_STATISTICS_MODE
type
  tagEXTENDED_STORAGE_PUT_STATISTICS_MODE = TOleEnum;
const
  NO_STATISTICS = $00000000;
  CIENT_FILES_ONLY = $00000001;
  SERVER_FILES_ONLY = $00000002;
  FILES_FOR_MOVE = $00000004;

// Constants for enum tagESTORAGE_STATISTIC_ACTION_STATUS
type
  tagESTORAGE_STATISTIC_ACTION_STATUS = TOleEnum;
const
  OPERTION_INITIALIZING = $00000000;
  OPERATION_IN_PROGRESS = $00000001;
  OPERATION_FINISHED = $00000002;

// Constants for enum tagESTORAGE_STATISTIC_FILE_STATUS
type
  tagESTORAGE_STATISTIC_FILE_STATUS = TOleEnum;
const
  FILE_IN_CLIENT = $00000001;
  FILE_IN_SERVER = $00000002;
  FILE_CHANGE = $00000004;
  FILE_MOVED = $00000008;
  FILE_MOVING = $00000010;

// Constants for enum tagTDAPI_GRANT_MODIFY
type
  tagTDAPI_GRANT_MODIFY = TOleEnum;
const
  GRANT_MODIFY_PERMIT = $00000000;
  GRANT_MODIFY_DENY = $00000001;
  GRANT_MODIFY_BY_OWNER_ONLY = $00000002;

// Constants for enum tagTDAPI_DIRECTORY
type
  tagTDAPI_DIRECTORY = TOleEnum;
const
  TDOLE_PROGECT_DIRECTORY = $00000000;
  TDOLE_PROJECT_DIRECTORY = $00000000;
  TDOLE_BIN_DIRECTORY = $00000001;
  TDOLE_TEST_DIRECTORY = $00000002;
  TDOLE_ATTACH_DIRECTORY = $00000003;
  TDOLE_USER_DIRECTORIES = $00000004;
  TDOLE_SHARED_DIRECTORY = $00000080;
  TDOLE_CHECKOUT_DIRECTORY = $00000008;
  TDOLE_VIEW_DIRECTORY = $00000010;
  TDOLE_VCSDB_DIRECTORY = $00000020;
  TDOLE_SITE_REPOS_DIRECTORY = $00000040;

// Constants for enum tagTDAPI_LICENSE
type
  tagTDAPI_LICENSE = TOleEnum;
const
  LIC_DEFECT = $00000001;
  LIC_TEST_LAB = $00000002;
  LIC_REQUIREMENT = $00000003;
  LIC_OTA_CLIENT = $00000004;
  LIC_COLLABORATION = $00000006;
  LIC_DASHBOARD = $0000000C;
  LIC_COMPONENTS = $0000000D;

// Constants for enum tagTDAPI_MODULE
type
  tagTDAPI_MODULE = TOleEnum;
const
  MODULE_DEFECT = $00000000;
  MODULE_TEST_PLANNING = $00000001;
  MODULE_TEST_EXECUTION = $00000002;
  MODULE_REQUIREMENT = $00000003;
  MODULE_COLLABORATION = $00000004;
  MODULE_DASHBOARD = $00000005;
  MODULE_COMPONENTS = $00000006;
  MODULE_RELEASE = $00000007;
  MODULE_RELEASE_CYCLE = $00000008;

// Constants for enum tagTDAPI_GET_EXTENSION_MODE
type
  tagTDAPI_GET_EXTENSION_MODE = TOleEnum;
const
  GET_EXTENSION_MODE_ALL = $00000000;
  GET_EXTENSION_MODE_ENABLED = $00000001;

// Constants for enum tagTDMAIL_FLAGS
type
  tagTDMAIL_FLAGS = TOleEnum;
const
  TDMAIL_ATTACHMENT = $00000001;
  TDMAIL_HISTORY = $00000002;
  TDMAIL_TEXT = $00000004;
  TDMAIL_DES_STEP = $00000008;
  TDMAIL_COVER_TEST = $00000010;
  TDMAIL_SINGLEMAIL = $00000020;
  TDMAIL_COMMENT_AS_BODY = $00000040;
  TDMAIL_TRACE_REQ = $00000080;

// Constants for enum tagTDLICENSE_CLIENT
type
  tagTDLICENSE_CLIENT = TOleEnum;
const
  TDLICENSE_BUG = $00000001;
  TDLICENSE_LAB = $00000002;
  TDLICENSE_REQ = $00000004;
  TDLICENSE_OTA_CLIENT = $00000008;
  TDLICENSE_COLLAB = $00000020;
  TDLICENSE_DASHBOARD = $00000800;
  TDLICENSE_COMPONENTS = $00001000;

// Constants for enum tagTDAPI_EXECUTIONEVENT
type
  tagTDAPI_EXECUTIONEVENT = TOleEnum;
const
  EXECEVENT_TESTFAIL = $00000001;
  EXECEVENT_TESTSETFINISH = $00000002;
  EXECEVENT_ENVIRONMENTFAIL = $00000003;
  EXECEVENT_RUNTIMEDOUT = $00000004;
  EXECEVENT_MANUAL_LAUNCH = $00000005;

// Constants for enum tagTDAPI_EXECUTIONEVENTACTIONTARGET
type
  tagTDAPI_EXECUTIONEVENTACTIONTARGET = TOleEnum;
const
  EXECEVENTACTIONTARGET_TEST = $00000001;
  EXECEVENTACTIONTARGET_TESTSET = $00000002;

// Constants for enum tagTDAPI_EXECUTIONEVENTACTION
type
  tagTDAPI_EXECUTIONEVENTACTION = TOleEnum;
const
  EXECEVENTACTION_DEFAULT = $00000000;
  EXECEVENTACTION_DONOTHING = $00000001;
  EXECEVENTACTION_STOP = $00000002;
  EXECEVENTACTION_RESTART = $00000003;

// Constants for enum tagTDAPI_STEP_PARAM_TYPE
type
  tagTDAPI_STEP_PARAM_TYPE = TOleEnum;
const
  STEP_PARAM_PREDEF = $00000001;
  STEP_PARAM_NULL = $00000002;
  STEP_PARAM_VALUE = $00000003;
  STEP_PARAM_BASE = $00000004;

// Constants for enum tagTDAPI_PARAM_IN_OUT_TYPE
type
  tagTDAPI_PARAM_IN_OUT_TYPE = TOleEnum;
const
  PARAM_INOUT_UNDEFINED = $00000000;
  PARAM_IN = $00000001;
  PARAM_OUT = $00000002;

// Constants for enum tagTDAPI_BP_STEP_PARAM_TYPE
type
  tagTDAPI_BP_STEP_PARAM_TYPE = TOleEnum;
const
  BP_STEP_PARAM_IN = $00000000;
  BP_STEP_PARAM_OUT = $00000001;
  BP_STEP_PARAM_RUNTIME = $00000002;

// Constants for enum tagTDAPI_RUN_PARAM_MODE
type
  tagTDAPI_RUN_PARAM_MODE = TOleEnum;
const
  PARAM_SOURCE_PRE_RUN = $00000001;
  PARAM_SOURCE_STEPS = $00000002;

// Constants for enum tagTDAPI_EUM_ORDER
type
  tagTDAPI_EUM_ORDER = TOleEnum;
const
  TDOLE_LAST_ORDER = $FFFFFFFC;

// Constants for enum tagTDAPI_GRAPH_TYPE
type
  tagTDAPI_GRAPH_TYPE = TOleEnum;
const
  GRAPH_SUMMARY = $00000000;
  GRAPH_AGE = $00000001;
  GRAPH_PROGRESS = $00000002;
  GRAPH_TREND = $00000003;
  GRAPH_COVERAGE = $00000005;

// Constants for enum tagGRAPH_PROPERTIES
type
  tagGRAPH_PROPERTIES = TOleEnum;
const
  GRAPH_XAXIS = $00000000;
  GRAPH_GROUP_BY = $00000001;
  GRAPH_SUM_OF = $00000002;
  GRAPH_START_DATE = $00000003;
  GRAPH_SHOW_NOT_COVERED_PARENTS = $00000004;
  GRAPH_TEST_SET_ID = $00000005;
  GRAPH_XAXIS_SHOW_FULL_PATH = $00000008;
  GRAPH_GROUP_BY_SHOW_FULL_PATH = $00000009;
  GRAPH_CYCLE = $0000000A;
  GRAPH_RELEASE = $0000000B;

// Constants for enum tagSEARCH_OPTIONS
type
  tagSEARCH_OPTIONS = TOleEnum;
const
  SEARCH_IN_STEPS = $00000000;

// Constants for enum tagMAIL_CONDITIONS_TYPE
type
  tagMAIL_CONDITIONS_TYPE = TOleEnum;
const
  USER_MAIL_CONDITION = $00000000;
  FIELD_MAIL_CONDITION = $00000001;

// Constants for enum tagALERT_TYPE
type
  tagALERT_TYPE = TOleEnum;
const
  ALERT_TYPE_TRACEABILITY_ALERT = $00000000;
  ALERT_TYPE_FOLLOWUP = $00000001;
  ALERT_TYPE_COMMON = $00000002;

// Constants for enum tagBPPARAM_TYPE
type
  tagBPPARAM_TYPE = TOleEnum;
const
  BPPARAM_TYPE_CONSTANT = $00000000;
  BPPARAM_TYPE_REFERENCE = $00000001;
  BPPARAM_TYPE_RUNTIME = $00000002;

// Constants for enum tagEXTENDEDSTORAGE_ENTITY
type
  tagEXTENDEDSTORAGE_ENTITY = TOleEnum;
const
  EXTENDEDSTORAGE_ENTITY_SCRIPT = $00000000;
  EXTENDEDSTORAGE_ENTITY_PICTURE = $00000001;

// Constants for enum tagUNITTEST_OPTIONS
type
  tagUNITTEST_OPTIONS = TOleEnum;
const
  UNIT_TEST_DISABLE = $FFFFFFFF;
  UNIT_TEST_EXECUTE = $00000000;
  UNIT_TEST_RECORD = $00000001;

// Constants for enum tagBPT_VERSION
type
  tagBPT_VERSION = TOleEnum;
const
  BPT_VERSION_3 = $00000003;
  BPT_VERSION_4 = $00000004;

// Constants for enum tagTDAPI_COPY_PASTE_MODES
type
  tagTDAPI_COPY_PASTE_MODES = TOleEnum;
const
  COPY_PASTE_NO_LINKED_TEST_MODE = $00000000;
  COPY_PASTE_USE_LINKED_TEST_MODE = $00000001;
  COPY_PASTE_CREATE_LINKED_TEST_MODE = $00000002;

// Constants for enum tagTDAPI_TRACE_DIRECTION
type
  tagTDAPI_TRACE_DIRECTION = TOleEnum;
const
  TDOLE_TRACED_FROM = $00000000;
  TDOLE_TRACED_TO = $00000001;

// Constants for enum tagTDAPI_ENTITIES
type
  tagTDAPI_ENTITIES = TOleEnum;
const
  ENTITY_REQUIREMENT = $00000000;
  ENTITY_BUG = $00000001;

// Constants for enum tagTDAPI_PREDEFINED_REQ_TYPES
type
  tagTDAPI_PREDEFINED_REQ_TYPES = TOleEnum;
const
  REQ_TYPE_UNDEFINED = $00000000;
  REQ_TYPE_FOLDER = $00000001;
  REQ_TYPE_GROUP = $00000002;
  REQ_TYPE_FUNCTIONAL = $00000003;
  REQ_TYPE_BUSINESS = $00000004;
  REQ_TYPE_TESTING = $00000005;

// Constants for enum tagTDAPI_REQ_TREE
type
  tagTDAPI_REQ_TREE = TOleEnum;
const
  REQ_ROOT_FOLDER_ID = $00000000;

// Constants for enum tagTDAPI_NODE_TYPE
type
  tagTDAPI_NODE_TYPE = TOleEnum;
const
  NODE_TYPE_UNDEFINED = $00000000;
  NODE_TYPE_RELEASE_FOLDER = $00000001;
  NODE_TYPE_RELEASE = $00000002;
  NODE_TYPE_RELEASECYCLE = $00000003;

// Constants for enum tagTDAPI_RBT_BI_LEVELS
type
  tagTDAPI_RBT_BI_LEVELS = TOleEnum;
const
  RBT_BI_LEVEL_A = $00000001;
  RBT_BI_LEVEL_B = $00000002;
  RBT_BI_LEVEL_C = $00000003;

// Constants for enum tagTDAPI_RBT_FP_LEVELS
type
  tagTDAPI_RBT_FP_LEVELS = TOleEnum;
const
  RBT_FP_LEVEL_1 = $00000001;
  RBT_FP_LEVEL_2 = $00000002;
  RBT_FP_LEVEL_3 = $00000003;

// Constants for enum tagTDAPI_RBT_TESTING_LEVELS
type
  tagTDAPI_RBT_TESTING_LEVELS = TOleEnum;
const
  RBT_TESTING_LEVEL_FULL = $00000001;
  RBT_TESTING_LEVEL_PARTIAL = $00000002;
  RBT_TESTING_LEVEL_SANITY = $00000003;
  RBT_TESTING_LEVEL_NONE = $00000004;

// Constants for enum tagTDAPI_RBT_RISK_KINDS
type
  tagTDAPI_RBT_RISK_KINDS = TOleEnum;
const
  RBT_RISK_KIND_BI = $00000001;
  RBT_RISK_KIND_FP = $00000002;

// Constants for enum tagTDAPI_RBT_REQUIREMENT_TYPE_RISK_ANALYSIS_TYPE
type
  tagTDAPI_RBT_REQUIREMENT_TYPE_RISK_ANALYSIS_TYPE = TOleEnum;
const
  REQUIREMENT_TYPE_RISK_ANALYSIS_TYPE_NONE = $00000000;
  REQUIREMENT_TYPE_RISK_ANALYSIS_TYPE_ASSESS = $00000001;
  REQUIREMENT_TYPE_RISK_ANALYSIS_TYPE_ANALYSIS = $00000002;

type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  ITDConnection = interface;
  ITDConnectionDisp = dispinterface;
  ITDConnection2 = interface;
  ITDConnection2Disp = dispinterface;
  ITDConnection3 = interface;
  ITDConnection3Disp = dispinterface;
  ITDProgressNotify = interface;
  IList = interface;
  IListDisp = dispinterface;
  _DIOtaEvents = dispinterface;
  _DIProgressEvents = dispinterface;
  IUnitTestSupport = interface;
  IFileData = interface;
  IFileDataDisp = dispinterface;
  IExtendedStorage = interface;
  IExtendedStorageDisp = dispinterface;
  IBaseFactory = interface;
  IBaseFactoryDisp = dispinterface;
  IBaseFactoryEx = interface;
  IBaseFactoryExDisp = dispinterface;
  ITestFactory = interface;
  ITestFactoryDisp = dispinterface;
  ISupportCopyPaste = interface;
  ISupportCopyPaste2 = interface;
  _IBaseFactory = interface;
  ISearchableFactory = interface;
  ISearchableFactoryDisp = dispinterface;
  IAlertableEntityFactory = interface;
  IAlertableEntityFactoryDisp = dispinterface;
  IBaseFactory2 = interface;
  IBaseFactory2Disp = dispinterface;
  IBugFactory = interface;
  IBugFactoryDisp = dispinterface;
  ICoverageFactory = interface;
  ICoverageFactoryDisp = dispinterface;
  IReqCoverageFactory = interface;
  IReqCoverageFactoryDisp = dispinterface;
  IReqCoverageInformation = interface;
  IObjectLockingSupport = interface;
  IObjectLockingSupportDisp = dispinterface;
  IBaseField = interface;
  IBaseFieldDisp = dispinterface;
  ICoverageEntity = interface;
  ICoverageEntityDisp = dispinterface;
  _IBaseField = interface;
  IBaseField2 = interface;
  IBaseField2Disp = dispinterface;
  IBaseField3 = interface;
  IBaseField3Disp = dispinterface;
  IMultiValue = interface;
  IMultiValueDisp = dispinterface;
  ITestSetFactory = interface;
  ITestSetFactoryDisp = dispinterface;
  ISysTreeNode = interface;
  ISysTreeNodeDisp = dispinterface;
  ISubjectNode = interface;
  ISubjectNodeDisp = dispinterface;
  _ITreeNode = interface;
  _ITreeNodeDisp = dispinterface;
  ITreeManager = interface;
  ITreeManagerDisp = dispinterface;
  IVCS = interface;
  IVCSDisp = dispinterface;
  IAttachmentVcs = interface;
  IAttachmentVcsDisp = dispinterface;
  IFactoryList = interface;
  IFactoryListDisp = dispinterface;
  IHierarchySupportList = interface;
  IHierarchySupportListDisp = dispinterface;
  IFieldProperty = interface;
  IFieldPropertyDisp = dispinterface;
  IFieldProperty2 = interface;
  IFieldProperty2Disp = dispinterface;
  IFieldProperty3 = interface;
  IFieldProperty3Disp = dispinterface;
  ITDField = interface;
  ITDFieldDisp = dispinterface;
  IBaseFieldEx = interface;
  IBaseFieldExDisp = dispinterface;
  IBaseFieldExMail = interface;
  IBaseFieldExMailDisp = dispinterface;
  ITest = interface;
  ITestDisp = dispinterface;
  IAlertable = interface;
  IAlertableDisp = dispinterface;
  IAlertable2 = interface;
  IAlertable2Disp = dispinterface;
  IFollowUpManager = interface;
  IFollowUpManagerDisp = dispinterface;
  ILinkable = interface;
  ILinkableDisp = dispinterface;
  ICoverable = interface;
  ICoverableDisp = dispinterface;
  IDesignStep = interface;
  IDesignStepDisp = dispinterface;
  IBug = interface;
  IBugDisp = dispinterface;
  ITestSet = interface;
  ITestSetDisp = dispinterface;
  IRunFactory = interface;
  IRunFactoryDisp = dispinterface;
  IRun = interface;
  IRunDisp = dispinterface;
  IRun2 = interface;
  IRun2Disp = dispinterface;
  IStep = interface;
  IStepDisp = dispinterface;
  IStep2 = interface;
  IStep2Disp = dispinterface;
  IHostGroupFactory = interface;
  IHostGroupFactoryDisp = dispinterface;
  IHostGroup = interface;
  IHostGroupDisp = dispinterface;
  IHost = interface;
  IHostDisp = dispinterface;
  ITSTest = interface;
  ITSTestDisp = dispinterface;
  ITSTest2 = interface;
  ITSTest2Disp = dispinterface;
  IConditionFactory = interface;
  IConditionFactoryDisp = dispinterface;
  ICondition = interface;
  IConditionDisp = dispinterface;
  IParam = interface;
  IParamDisp = dispinterface;
  ICommand = interface;
  ICommandDisp = dispinterface;
  ICommand2 = interface;
  ICommand2Disp = dispinterface;
  IColumnInfo = interface;
  IColumnInfoDisp = dispinterface;
  IRecordset = interface;
  IRecordsetDisp = dispinterface;
  ITDFilter = interface;
  ITDFilterDisp = dispinterface;
  ITDFilter2 = interface;
  ITDFilter2Disp = dispinterface;
  ISupportEntityTypes = interface;
  ISupportEntityTypesDisp = dispinterface;
  IHierarchyFilter = interface;
  IHierarchyFilterDisp = dispinterface;
  IHistory = interface;
  IHistoryDisp = dispinterface;
  IHistoryRecord = interface;
  IHistoryRecordDisp = dispinterface;
  IHistoryRecord2 = interface;
  IHistoryRecord2Disp = dispinterface;
  IAttachmentFactory = interface;
  IAttachmentFactoryDisp = dispinterface;
  IAttachment = interface;
  IAttachmentDisp = dispinterface;
  ILink = interface;
  ILinkDisp = dispinterface;
  ILinkFactory = interface;
  ILinkFactoryDisp = dispinterface;
  IReqTraceFactory = interface;
  IReqTraceFactoryDisp = dispinterface;
  ITrace = interface;
  ITraceDisp = dispinterface;
  IReq = interface;
  IReqDisp = dispinterface;
  IReq2 = interface;
  IReq2Disp = dispinterface;
  ICoverableReq = interface;
  ICoverableReqDisp = dispinterface;
  ISequentialStream = interface;
  IStream = interface;
  ISupportRBTAnalysisParent = interface;
  ISupportRBTAnalysisParentDisp = dispinterface;
  ISupportRBTAssessment = interface;
  ISupportRBTAssessmentDisp = dispinterface;
  ISupportRBTAnalysisChild = interface;
  ISupportRBTAnalysisChildDisp = dispinterface;
  IReqFactory = interface;
  IReqFactoryDisp = dispinterface;
  IReqFactory2 = interface;
  IReqFactory2Disp = dispinterface;
  IReqFactory3 = interface;
  IReqFactory3Disp = dispinterface;
  IActionPermission = interface;
  IActionPermissionDisp = dispinterface;
  IGraphDefinition = interface;
  IGraphDefinitionDisp = dispinterface;
  IGraphBuilder = interface;
  IGraphBuilderDisp = dispinterface;
  IGraph = interface;
  IGraphDisp = dispinterface;
  ISearchOptions = interface;
  ISearchOptionsDisp = dispinterface;
  ITestExecStatus = interface;
  ITestExecStatusDisp = dispinterface;
  IExecutionStatus = interface;
  IExecutionStatusDisp = dispinterface;
  ITSScheduler = interface;
  ITSSchedulerDisp = dispinterface;
  IDBManager = interface;
  IDBManagerDisp = dispinterface;
  ICustomization = interface;
  ICustomizationDisp = dispinterface;
  ICustomization2 = interface;
  ICustomization2Disp = dispinterface;
  ICustomization3 = interface;
  ICustomization3Disp = dispinterface;
  ICustomizationField = interface;
  ICustomizationFieldDisp = dispinterface;
  ICustomizationField2 = interface;
  ICustomizationField2Disp = dispinterface;
  ICustomizationFields = interface;
  ICustomizationFieldsDisp = dispinterface;
  ICustomizationLists = interface;
  ICustomizationListsDisp = dispinterface;
  ICustomizationList = interface;
  ICustomizationListDisp = dispinterface;
  ICustomizationListNode = interface;
  ICustomizationListNodeDisp = dispinterface;
  ICustomizationTypedField = interface;
  ICustomizationTypedFieldDisp = dispinterface;
  ICustomizationTypes = interface;
  ICustomizationTypesDisp = dispinterface;
  ITableProperties = interface;
  ITablePropertiesDisp = dispinterface;
  ICustomizationType = interface;
  ICustomizationTypeDisp = dispinterface;
  ICustomizationReqType = interface;
  ICustomizationReqTypeDisp = dispinterface;
  ICustomizationRBT = interface;
  ICustomizationRBTDisp = dispinterface;
  ICustomizationRBTQuestion = interface;
  ICustomizationRBTQuestionDisp = dispinterface;
  ICustomizationRBTAnswer = interface;
  ICustomizationRBTAnswerDisp = dispinterface;
  ISettings = interface;
  ISettingsDisp = dispinterface;
  ISettings2 = interface;
  ISettings2Disp = dispinterface;
  ITDMailConditions = interface;
  ITDMailConditionsDisp = dispinterface;
  ICustomizationPermissions = interface;
  ICustomizationPermissionsDisp = dispinterface;
  ICustomizationUsersGroups = interface;
  ICustomizationUsersGroupsDisp = dispinterface;
  ICustomizationUsersGroups2 = interface;
  ICustomizationUsersGroups2Disp = dispinterface;
  ICustomizationUsersGroup = interface;
  ICustomizationUsersGroupDisp = dispinterface;
  ICustomizationUser = interface;
  ICustomizationUserDisp = dispinterface;
  ICustomizationUsers = interface;
  ICustomizationUsersDisp = dispinterface;
  ICustomizationUsers2 = interface;
  ICustomizationUsers2Disp = dispinterface;
  ICustomizationUsers3 = interface;
  ICustomizationUsers3Disp = dispinterface;
  ICustomizationActions = interface;
  ICustomizationActionsDisp = dispinterface;
  ICustomizationAction = interface;
  ICustomizationActionDisp = dispinterface;
  ICustomizationModules = interface;
  ICustomizationModulesDisp = dispinterface;
  ICustomizationModules2 = interface;
  ICustomizationModules2Disp = dispinterface;
  ICustomizationModules3 = interface;
  ICustomizationModules3Disp = dispinterface;
  IModule = interface;
  IModuleDisp = dispinterface;
  ITDChat = interface;
  ITDChatDisp = dispinterface;
  ICustomizationTransitionRule = interface;
  ICustomizationTransitionRuleDisp = dispinterface;
  ICustomizationTransitionRules = interface;
  ICustomizationTransitionRulesDisp = dispinterface;
  IErrorInfo = interface;
  ITDErrorInfo = interface;
  ITDErrorInfoDisp = dispinterface;
  IChangeEntry = interface;
  IChangeEntryDisp = dispinterface;
  IChange = interface;
  IChangeDisp = dispinterface;
  IComFrec = interface;
  IComFrecDisp = dispinterface;
  IExecEventNotifyByMailSettings = interface;
  IExecEventNotifyByMailSettingsDisp = dispinterface;
  IProjectProperties = interface;
  IProjectPropertiesDisp = dispinterface;
  IStepParams = interface;
  IStepParamsDisp = dispinterface;
  ITextParser = interface;
  ITextParserDisp = dispinterface;
  IExecEventInfo = interface;
  IExecEventInfoDisp = dispinterface;
  IAmarillusHash = interface;
  IAmarillusHashDisp = dispinterface;
  IVersionItem = interface;
  IVersionItemDisp = dispinterface;
  IVcsAdmin = interface;
  IVcsAdminDisp = dispinterface;
  IExecutionSettings = interface;
  IExecutionSettingsDisp = dispinterface;
  IOnExecEventSchedulerActionParams = interface;
  IOnExecEventSchedulerActionParamsDisp = dispinterface;
  IOnExecEventSchedulerRestartParams = interface;
  IOnExecEventSchedulerRestartParamsDisp = dispinterface;
  ITestSetTreeManager = interface;
  ITestSetTreeManagerDisp = dispinterface;
  ITestSetFolder = interface;
  ITestSetFolderDisp = dispinterface;
  ITestSetFolder2 = interface;
  ITestSetFolder2Disp = dispinterface;
  ITestSetFolder3 = interface;
  ITestSetFolder3Disp = dispinterface;
  _ITestSetFolder = interface;
  _ITestSetFolderDisp = dispinterface;
  ITestSetFolderInternal = interface;
  ICustomizationMailConditions = interface;
  ICustomizationMailConditionsDisp = dispinterface;
  ICustomizationMailCondition = interface;
  ICustomizationMailConditionDisp = dispinterface;
  IAnalysis = interface;
  IAnalysisDisp = dispinterface;
  IAlert = interface;
  IAlertDisp = dispinterface;
  IAlertManager = interface;
  IAlertManagerDisp = dispinterface;
  IAlertManager2 = interface;
  IAlertManager2Disp = dispinterface;
  IRuleManager = interface;
  IRuleManagerDisp = dispinterface;
  IRule = interface;
  IRuleDisp = dispinterface;
  IRule2 = interface;
  IRule2Disp = dispinterface;
  IReqSummaryStatus = interface;
  IReqSummaryStatusDisp = dispinterface;
  IReqCoverageStatus = interface;
  IReqCoverageStatusDisp = dispinterface;
  ICacheMgr = interface;
  ICacheMgrDisp = dispinterface;
  IComponentFactory = interface;
  IComponentFactoryDisp = dispinterface;
  IComponentFolderFactory = interface;
  IComponentFolderFactoryDisp = dispinterface;
  IComponent = interface;
  IComponentDisp = dispinterface;
  IComponentFolder = interface;
  IComponentFolderDisp = dispinterface;
  IBusinessProcess = interface;
  IBusinessProcessDisp = dispinterface;
  IBaseParam = interface;
  IComponentParam = interface;
  IComponentParamDisp = dispinterface;
  IBPComponent = interface;
  IBPComponentDisp = dispinterface;
  IRTParam = interface;
  IRTParamDisp = dispinterface;
  IBPIteration = interface;
  IBPIterationDisp = dispinterface;
  IBPIterationParam = interface;
  IBPIterationParamDisp = dispinterface;
  IBPParam = interface;
  IBPParamDisp = dispinterface;
  IExport = interface;
  IExportDisp = dispinterface;
  IImport = interface;
  IImportDisp = dispinterface;
  ITDUtils = interface;
  ITDUtilsDisp = dispinterface;
  IBPHistoryRecord = interface;
  IBPHistoryRecordDisp = dispinterface;
  IBPGroup = interface;
  IBPGroupDisp = dispinterface;
  IComponentStep = interface;
  IComponentStepDisp = dispinterface;
  IBPStepParam = interface;
  IBPStepParamDisp = dispinterface;
  IProductInfo = interface;
  IProductInfoDisp = dispinterface;
  IGroupingManager = interface;
  IGroupingManagerDisp = dispinterface;
  IGroupingItem = interface;
  IGroupingItemDisp = dispinterface;
  IAuditRecordFactory = interface;
  IAuditRecordFactoryDisp = dispinterface;
  IAuditPropertyFactory = interface;
  IAuditPropertyFactoryDisp = dispinterface;
  IAuditable = interface;
  IAuditableDisp = dispinterface;
  IAuditRecord = interface;
  IAuditRecordDisp = dispinterface;
  IAuditProperty = interface;
  IAuditPropertyDisp = dispinterface;
  IReqType = interface;
  IReqTypeDisp = dispinterface;
  IReleaseFolder = interface;
  IReleaseFolderDisp = dispinterface;
  IStringRepresentation = interface;
  IStringRepresentationDisp = dispinterface;
  ISysTreeNode2 = interface;
  ISysTreeNode2Disp = dispinterface;
  IRelease = interface;
  IReleaseDisp = dispinterface;
  IReleaseFolderFactory = interface;
  IReleaseFolderFactoryDisp = dispinterface;
  IReleaseFactory = interface;
  IReleaseFactoryDisp = dispinterface;
  ICycleFactory = interface;
  ICycleFactoryDisp = dispinterface;
  ICycle = interface;
  ICycleDisp = dispinterface;
  IReleaseManagementInfo = interface;
  IReleaseManagementInfoDisp = dispinterface;
  IWarningInfo = interface;
  IExtensionData = interface;
  IExtensionDataDisp = dispinterface;
  IExtensionServiceProvider = interface;
  IExtensionServiceProviderDisp = dispinterface;
  ICacheManager = interface;
  ICacheManagerDisp = dispinterface;
  ISystemFieldService = interface;
  ISystemFieldServiceDisp = dispinterface;
  IDataServiceProvider = interface;
  IDataServiceProviderDisp = dispinterface;
  ICustomizationPermissionService = interface;
  ICustomizationPermissionServiceDisp = dispinterface;
  IFactoryService = interface;
  ICITFactoryService = interface;
  ISOAFactoryService = interface;
  IExtensionManager = interface;
  IExtensionManagerDisp = dispinterface;
  IBaseHierarchyTreeManager = interface;
  IBaseHierarchyTreeManagerDisp = dispinterface;
  IBaseEntityFolder = interface;
  IBaseEntityFolderDisp = dispinterface;
  _IBaseEntityFolder = interface;
  _IBaseEntityFolderDisp = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  TDConnection = ITDConnection3;
  FileData = IFileData;
  ExtendedStorage = IExtendedStorage;
  ProjectRepository = IExtendedStorage;
  ExtendedStorageProxy = IExtendedStorage;
  TestFactory = ITestFactory;
  BugFactory = IBugFactory;
  CoverageFactory = ICoverageFactory;
  ReqCoverageFactory = IReqCoverageFactory;
  CoverageEntity = ICoverageEntity;
  TestSetFactory = ITestSetFactory;
  HostFactory = IBaseFactory;
  SubjectNode = ISubjectNode;
  SysTreeNode = ISysTreeNode;
  TreeManager = ITreeManager;
  VCS = IVCS;
  AttachmentVcs = IAttachmentVcs;
  List = IList;
  FactoryList = IFactoryList;
  HierarchySupportList = IHierarchySupportList;
  FieldProperty = IFieldProperty3;
  TDField = ITDField;
  Test = ITest;
  DesignStepFactory = IBaseFactory;
  DesignStep = IDesignStep;
  Bug = IBug;
  TestSet = ITestSet;
  RunFactory = IRunFactory;
  Run = IRun2;
  StepFactory = IBaseFactory;
  BPStepFactory = IBaseFactory;
  Step = IStep2;
  HostGroupFactory = IHostGroupFactory;
  HostGroup = IHostGroup;
  Host = IHost;
  TSTestFactory = IBaseFactory;
  TSTest = ITSTest2;
  ConditionFactory = IConditionFactory;
  Condition = ICondition;
  Command = ICommand2;
  Recordset = IRecordset;
  TDFilter = ITDFilter2;
  HierarchyFilter = IHierarchyFilter;
  History = IHistory;
  HistoryRecord = IHistoryRecord2;
  AttachmentFactory = IAttachmentFactory;
  Attachment = IAttachment;
  Link = ILink;
  LinkFactory = ILinkFactory;
  ReqTraceFactory = IReqTraceFactory;
  Trace = ITrace;
  Req = IReq2;
  ReqFactory = IReqFactory3;
  ActionPermission = IActionPermission;
  GraphDefinition = IGraphDefinition;
  GraphBuilder = IGraphBuilder;
  Graph = IGraph;
  SearchOptions = ISearchOptions;
  TestExecStatus = ITestExecStatus;
  ExecutionStatus = IExecutionStatus;
  TSScheduler = ITSScheduler;
  DBManager = IDBManager;
  Customization = ICustomization3;
  CustomizationField = ICustomizationField2;
  CustomizationFields = ICustomizationFields;
  CustomizationLists = ICustomizationLists;
  CustomizationList = ICustomizationList;
  CustomizationListNode = ICustomizationListNode;
  CustomizationTypedField = ICustomizationTypedField;
  CustomizationTypes = ICustomizationTypes;
  TableProperties = ITableProperties;
  CustomizationReqType = ICustomizationReqType;
  CustomizationRBT = ICustomizationRBT;
  CustomizationRBTQuestion = ICustomizationRBTQuestion;
  CustomizationRBTAnswer = ICustomizationRBTAnswer;
  Settings = ISettings2;
  TDMailConditions = ITDMailConditions;
  CustomizationPermissions = ICustomizationPermissions;
  CustomizationUsersGroups = ICustomizationUsersGroups2;
  CustomizationUsersGroup = ICustomizationUsersGroup;
  CustomizationUser = ICustomizationUser;
  CustomizationUsers = ICustomizationUsers3;
  CustomizationActions = ICustomizationActions;
  CustomizationAction = ICustomizationAction;
  CustomizationModules = ICustomizationModules3;
  TDChat = ITDChat;
  CustomizationTransitionRule = ICustomizationTransitionRule;
  CustomizationTransitionRules = ICustomizationTransitionRules;
  TDErrorInfo = ITDErrorInfo;
  ChangeEntryFactory = IBaseFactory;
  ChangeEntry = IChangeEntry;
  ChangeFactory = IBaseFactory;
  Change = IChange;
  ComFrec = IComFrec;
  ExecEventNotifyByMailSettings = IExecEventNotifyByMailSettings;
  ProjectProperties = IProjectProperties;
  StepParams = IStepParams;
  TextParser = ITextParser;
  ExecEventInfo = IExecEventInfo;
  AmarillusHash = IAmarillusHash;
  VersionItem = IVersionItem;
  VcsAdmin = IVcsAdmin;
  ExecSettings = IExecutionSettings;
  ExecEventActionParams = IOnExecEventSchedulerActionParams;
  ExecEventRestartActionParams = IOnExecEventSchedulerRestartParams;
  TestSetTreeManager = ITestSetTreeManager;
  TestSetFolder = ITestSetFolder3;
  CustomizationMailConditions = ICustomizationMailConditions;
  CustomizationMailCondition = ICustomizationMailCondition;
  Analysis = IAnalysis;
  Alert = IAlert;
  AlertManager = IAlertManager2;
  RuleManager = IRuleManager;
  Rule = IRule2;
  ReqSummaryStatus = IReqSummaryStatus;
  ReqCoverageStatus = IReqCoverageStatus;
  CacheMgr = ICacheMgr;
  ComponentFactory = IComponentFactory;
  ComponentFolderFactory = IComponentFolderFactory;
  Component = IComponent;
  ComponentFolder = IComponentFolder;
  BusinessProcess = IBusinessProcess;
  ComponentParamFactory = IBaseFactory;
  ComponentParam = IComponentParam;
  BPComponent = IBPComponent;
  RTParam = IRTParam;
  BPIteration = IBPIteration;
  BPIterationParam = IBPIterationParam;
  BPParameter = IBPParam;
  Export = IExport;
  Import = IImport;
  TDUtils = ITDUtils;
  BPHistoryRecord = IBPHistoryRecord;
  BPGroup = IBPGroup;
  ComponentStepFactory = IBaseFactory;
  ComponentStep = IComponentStep;
  BPStepParamFactory = IBaseFactory;
  BPStepParam = IBPStepParam;
  ProductInfo = IProductInfo;
  GroupingManager = IGroupingManager;
  GroupingItem = IGroupingItem;
  AuditRecordFactory = IAuditRecordFactory;
  AuditPropertyFactory = IAuditPropertyFactory;
  Auditable = IAuditable;
  AuditRecord = IAuditRecord;
  AuditProperty = IAuditProperty;
  MultiValue = IMultiValue;
  ReqType = IReqType;
  ReleaseFolder = IReleaseFolder;
  Release = IRelease;
  ReleaseFolderFactory = IReleaseFolderFactory;
  ReleaseFactory = IReleaseFactory;
  CycleFactory = ICycleFactory;
  Cycle = ICycle;
  ReleaseManagementInfo = IReleaseManagementInfo;
  WarningInfo = IWarningInfo;
  ExtensionData = IExtensionData;
  ExtensionServiceProvider = IExtensionServiceProvider;
  FactoryService = IFactoryService;
  CacheManager = ICacheManager;
  SystemFieldService = ISystemFieldService;
  DataServiceProvider = IDataServiceProvider;
  CustomizationPermissionService = ICustomizationPermissionService;
  ExtensionManager = IExtensionManager;
  ServiceFactory = IBaseFactory;
  ServiceFolderFactory = IBaseFactory;
  ServiceGroupFactory = IBaseFactory;
  WsdlOperationFactory = IBaseFactory;
  WsdlOperationParamFactory = IBaseFactory;
  ServiceChangeFactory = IBaseFactory;
  Service = IBaseFieldEx;
  ServiceFolder = IBaseField;
  ServiceGroup = IBaseFieldEx;
  WsdlOperation = IBaseField;
  WsdlOperationParam = IBaseField;
  ServiceChange = IBaseField;
  ApplicationEntity = IBaseFieldEx;
  ApplicationEntityFactory = IBaseFactory;
  BlueprintEntity = IBaseFieldEx;
  BlueprintFactory = IBaseFactory;
  ApplicationEntityTreeManager = IBaseHierarchyTreeManager;
  ApplicationEntityFolder = IBaseEntityFolder;
  ChangeEntity = IBaseFieldEx;
  ChangeEntityFactory = IBaseFactory;
  ChangeEntityTreeManager = IBaseHierarchyTreeManager;
  ChangeEntityFolder = IBaseEntityFolder;
  ApplicationConfiguration = IBaseField;
  ApplicationConfigurationFactory = IBaseFactory;
  ApplicationImpact = IBaseFieldEx;
  ApplicationImpactFactory = IBaseFactory;
  Module = IModule;


// *********************************************************************//
// Declaration of structures, unions and aliases.                         
// *********************************************************************//
  PUserType1 = ^TGUID; {*}
  PWideString1 = ^WideString; {*}
  PByte1 = ^Byte; {*}
  PIDispatch1 = ^IDispatch; {*}

  DWORD = LongWord; 

  _LARGE_INTEGER = packed record
    QuadPart: Int64;
  end;

  _ULARGE_INTEGER = packed record
    QuadPart: Largeuint;
  end;

  _FILETIME = packed record
    dwLowDateTime: LongWord;
    dwHighDateTime: LongWord;
  end;

  tagSTATSTG = packed record
    pwcsName: PWideChar;
    type_: LongWord;
    cbSize: _ULARGE_INTEGER;
    mtime: _FILETIME;
    ctime: _FILETIME;
    atime: _FILETIME;
    grfMode: LongWord;
    grfLocksSupported: LongWord;
    clsid: TGUID;
    grfStateBits: LongWord;
    Reserved: LongWord;
  end;

  TDAPI_SETTINGS = tagTDAPI_SETTINGS; 
  TDAPI_PURGE_RUNS = tagTDAPI_PURGE_RUNS; 
  TDAPI_POS_ORDER = tagTDAPI_POS_ORDER; 
  TDAPI_CONDTYPE = tagTDAPI_CONDTYPE; 
  TDAPI_CONDSTAT = tagTDAPI_CONDSTAT; 
  TDAPI_COMPONENT_AUTO_TYPE = tagTDAPI_COMPONENT_AUTO_TYPE; 
  TDAPI_ATTACH = tagTDAPI_ATTACH; 
  TDAPI_ATTACH_TYPE = tagTDAPI_ATTACH_TYPE; 
  TDAPI_ATTACH_SUBTYPE = tagTDAPI_ATTACH_SUBTYPE; 
  TDAPI_REQMODE = tagTDAPI_REQMODE; 
  TDAPI_DATATYPES = tagTDAPI_DATATYPES; 
  TDAPI_SKIP = tagTDAPI_SKIP; 
  TDAPI_EXECUTE_QUERY_LIMIT_STATUS = tagTDAPI_EXECUTE_QUERY_LIMIT; 
  TDAPI_EXSTOR_DELMODE = tagTDAPI_EXSTOR_DELMODE; 
  TDAPI_STEP_CREATE = tagTDAPI_STEP_CREATE; 
  EXTENDED_STORAGE_SETTING = tagEXTENDED_STORAGE_SETTING; 
  EXTENDED_STORAGE_PUT_STATISTICS_MODE = tagEXTENDED_STORAGE_PUT_STATISTICS_MODE; 
  ESTORAGE_STATISTIC_ACTION_STATUS = tagESTORAGE_STATISTIC_ACTION_STATUS; 
  ESTORAGE_STATISTIC_FILE_STATUS = tagESTORAGE_STATISTIC_FILE_STATUS; 
  TDAPI_RUN_PARAM_MODE = tagTDAPI_RUN_PARAM_MODE; 
  UNITTEST_OPTIONS = tagUNITTEST_OPTIONS; 
  TDAPI_COPY_PASTE_MODES = tagTDAPI_COPY_PASTE_MODES; 
  TDAPI_TRACE_DIRECTION = tagTDAPI_TRACE_DIRECTION; 
  TDAPI_ENTITIES = tagTDAPI_ENTITIES; 
  TDAPI_PREDEFINED_REQ_TYPES = tagTDAPI_PREDEFINED_REQ_TYPES; 
  TDAPI_REQ_TREE = tagTDAPI_REQ_TREE; 
  TDAPI_NODE_TYPE = tagTDAPI_NODE_TYPE; 
  TDAPI_RBT_BI_LEVELS = tagTDAPI_RBT_BI_LEVELS; 
  TDAPI_RBT_FP_LEVELS = tagTDAPI_RBT_FP_LEVELS; 
  TDAPI_RBT_TESTING_LEVELS = tagTDAPI_RBT_TESTING_LEVELS; 
  TDAPI_RBT_RISK_KINDS = tagTDAPI_RBT_RISK_KINDS; 
  TDAPI_RBT_REQUIREMENT_TYPE_RISK_ANALYSIS_TYPE = tagTDAPI_RBT_REQUIREMENT_TYPE_RISK_ANALYSIS_TYPE; 

// *********************************************************************//
// Interface: ITDConnection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DB67E08D-7FA7-4DAC-87BB-2A55CBFFE008}
// *********************************************************************//
  ITDConnection = interface(IDispatch)
    ['{DB67E08D-7FA7-4DAC-87BB-2A55CBFFE008}']
    function Get_Connected: WordBool; safecall;
    function Get_ProjectConnected: WordBool; safecall;
    function Get_ServerName: WideString; safecall;
    function Get_ProjectName: WideString; safecall;
    function Get_TestRepository: WideString; safecall;
    function Get_UserName: WideString; safecall;
    function Get_TestFactory: IDispatch; safecall;
    function Get_BugFactory: IDispatch; safecall;
    function Get_TestSetFactory: IDispatch; safecall;
    function Get_UserGroupsList: IList; safecall;
    function Get_HostFactory: IDispatch; safecall;
    function Get_VCS: IDispatch; safecall;
    procedure InitConnection(const ServerName: WideString; const DomainName: WideString; 
                             const DomainPswd: WideString); safecall;
    procedure ReleaseConnection; safecall;
    procedure ConnectProject(const ProjectName: WideString; const UserName: WideString; 
                             const Password: WideString); safecall;
    procedure DisconnectProject; safecall;
    function Get_ProjectsList: IList; safecall;
    function Get_Command: IDispatch; safecall;
    function Get_TreeManager: IDispatch; safecall;
    function Get_ReqFactory: IDispatch; safecall;
    function Get_ActionPermission: IDispatch; safecall;
    procedure GetLicense(LicenseType: Integer); safecall;
    procedure SendMail(const SendTo: WideString; const SendFrom: WideString; 
                       const Subject: WideString; const Message: WideString; 
                       attachArray: OleVariant; const bsFormat: WideString); safecall;
    function Get_DBType: WideString; safecall;
    function Get_DBManager: IDispatch; safecall;
    function Get_Customization: IDispatch; safecall;
    function Get_Fields(const DataType: WideString): IList; safecall;
    function Get_CommonSettings: IDispatch; safecall;
    function Get_UserSettings: IDispatch; safecall;
    function Get_HostGroupFactory: IDispatch; safecall;
    procedure ChangePassword(const OldPassword: WideString; const NewPassword: WideString); safecall;
    function Get_UsersList: IList; safecall;
    function Get_Password: WideString; safecall;
    function Get_ExtendedStorage: IDispatch; safecall;
    function Get_DirectoryPath(nType: Integer): WideString; safecall;
    function Get_ChangeFactory: IDispatch; safecall;
    function Get_MailConditions: IDispatch; safecall;
    function Get_ServerTime: TDateTime; safecall;
    function Get_TDSettings: IDispatch; safecall;
    procedure PurgeRuns(const TestSetFilter: WideString; KeepLast: Integer; DateUnit: OleVariant; 
                        UnitCount: Integer; StepsOnly: WordBool); safecall;
    function Get_ProjectProperties: IDispatch; safecall;
    procedure GetLicenseStatus(ClientType: Integer; out InUse: Integer; out Max: Integer); safecall;
    function Get_DomainName: WideString; safecall;
    function Get_TextParam: IDispatch; safecall;
    function Get_TDParams(const Request: WideString): WideString; safecall;
    function Get_UsingProgress: WordBool; safecall;
    procedure Set_UsingProgress(pVal: WordBool); safecall;
    function Get_CheckoutRepository: WideString; safecall;
    function Get_ViewsRepository: WideString; safecall;
    function Get_VcsDbRepository: WideString; safecall;
    function Get_RunFactory: IDispatch; safecall;
    function Get_ModuleVisible(ModuleID: Integer): WordBool; safecall;
    procedure InitConnectionEx(const ServerName: WideString); safecall;
    function Get_ProjectsListEx(const DomainName: WideString): IList; safecall;
    procedure ConnectProjectEx(const DomainName: WideString; const ProjectName: WideString; 
                               const UserName: WideString; const Password: WideString); safecall;
    function Get_DomainsList: IList; safecall;
    procedure ConnectToVCSAs(const UserName: WideString; const Password: WideString; 
                             const CopyDesStep: WideString); safecall;
    procedure GetLicenses(LicensesType: Integer; var pVal: WideString); safecall;
    function Get_Analysis: IDispatch; safecall;
    function Get_VMRepository: WideString; safecall;
    function Get_DBName: WideString; safecall;
    function Get_Rules: IDispatch; safecall;
    function Get_TestSetTreeManager: IDispatch; safecall;
    function Get_AlertManager: IDispatch; safecall;
    function Get_AllowReconnect: WordBool; safecall;
    procedure Set_AllowReconnect(pVal: WordBool); safecall;
    procedure SynchronizeFollowUps(const Password: WideString); safecall;
    function Get_KeepConnection: WordBool; safecall;
    procedure Set_KeepConnection(pVal: WordBool); safecall;
    function Get_IgnoreHtmlFormat: WordBool; safecall;
    procedure Set_IgnoreHtmlFormat(pVal: WordBool); safecall;
    function Get_ReportRole: WideString; safecall;
    procedure Set_ClientType(const newVal: WideString; const Param2: WideString); safecall;
    function Get_ComponentFactory: IDispatch; safecall;
    function Get_ComponentFolderFactory: IDispatch; safecall;
    procedure GetTDVersion(out pbsMajorVersion: WideString; out pbsBuildNum: WideString); safecall;
    function Get_ServerURL: WideString; safecall;
    property Connected: WordBool read Get_Connected;
    property ProjectConnected: WordBool read Get_ProjectConnected;
    property ServerName: WideString read Get_ServerName;
    property ProjectName: WideString read Get_ProjectName;
    property TestRepository: WideString read Get_TestRepository;
    property UserName: WideString read Get_UserName;
    property TestFactory: IDispatch read Get_TestFactory;
    property BugFactory: IDispatch read Get_BugFactory;
    property TestSetFactory: IDispatch read Get_TestSetFactory;
    property UserGroupsList: IList read Get_UserGroupsList;
    property HostFactory: IDispatch read Get_HostFactory;
    property VCS: IDispatch read Get_VCS;
    property ProjectsList: IList read Get_ProjectsList;
    property Command: IDispatch read Get_Command;
    property TreeManager: IDispatch read Get_TreeManager;
    property ReqFactory: IDispatch read Get_ReqFactory;
    property ActionPermission: IDispatch read Get_ActionPermission;
    property DBType: WideString read Get_DBType;
    property DBManager: IDispatch read Get_DBManager;
    property Customization: IDispatch read Get_Customization;
    property Fields[const DataType: WideString]: IList read Get_Fields;
    property CommonSettings: IDispatch read Get_CommonSettings;
    property UserSettings: IDispatch read Get_UserSettings;
    property HostGroupFactory: IDispatch read Get_HostGroupFactory;
    property UsersList: IList read Get_UsersList;
    property Password: WideString read Get_Password;
    property ExtendedStorage: IDispatch read Get_ExtendedStorage;
    property DirectoryPath[nType: Integer]: WideString read Get_DirectoryPath;
    property ChangeFactory: IDispatch read Get_ChangeFactory;
    property MailConditions: IDispatch read Get_MailConditions;
    property ServerTime: TDateTime read Get_ServerTime;
    property TDSettings: IDispatch read Get_TDSettings;
    property ProjectProperties: IDispatch read Get_ProjectProperties;
    property DomainName: WideString read Get_DomainName;
    property TextParam: IDispatch read Get_TextParam;
    property TDParams[const Request: WideString]: WideString read Get_TDParams;
    property UsingProgress: WordBool read Get_UsingProgress write Set_UsingProgress;
    property CheckoutRepository: WideString read Get_CheckoutRepository;
    property ViewsRepository: WideString read Get_ViewsRepository;
    property VcsDbRepository: WideString read Get_VcsDbRepository;
    property RunFactory: IDispatch read Get_RunFactory;
    property ModuleVisible[ModuleID: Integer]: WordBool read Get_ModuleVisible;
    property ProjectsListEx[const DomainName: WideString]: IList read Get_ProjectsListEx;
    property DomainsList: IList read Get_DomainsList;
    property Analysis: IDispatch read Get_Analysis;
    property VMRepository: WideString read Get_VMRepository;
    property DBName: WideString read Get_DBName;
    property Rules: IDispatch read Get_Rules;
    property TestSetTreeManager: IDispatch read Get_TestSetTreeManager;
    property AlertManager: IDispatch read Get_AlertManager;
    property AllowReconnect: WordBool read Get_AllowReconnect write Set_AllowReconnect;
    property KeepConnection: WordBool read Get_KeepConnection write Set_KeepConnection;
    property IgnoreHtmlFormat: WordBool read Get_IgnoreHtmlFormat write Set_IgnoreHtmlFormat;
    property ReportRole: WideString read Get_ReportRole;
    property ClientType[const newVal: WideString]: WideString write Set_ClientType;
    property ComponentFactory: IDispatch read Get_ComponentFactory;
    property ComponentFolderFactory: IDispatch read Get_ComponentFolderFactory;
    property ServerURL: WideString read Get_ServerURL;
  end;

// *********************************************************************//
// DispIntf:  ITDConnectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DB67E08D-7FA7-4DAC-87BB-2A55CBFFE008}
// *********************************************************************//
  ITDConnectionDisp = dispinterface
    ['{DB67E08D-7FA7-4DAC-87BB-2A55CBFFE008}']
    property Connected: WordBool readonly dispid 1;
    property ProjectConnected: WordBool readonly dispid 2;
    property ServerName: WideString readonly dispid 3;
    property ProjectName: WideString readonly dispid 4;
    property TestRepository: WideString readonly dispid 5;
    property UserName: WideString readonly dispid 6;
    property TestFactory: IDispatch readonly dispid 7;
    property BugFactory: IDispatch readonly dispid 8;
    property TestSetFactory: IDispatch readonly dispid 9;
    property UserGroupsList: IList readonly dispid 10;
    property HostFactory: IDispatch readonly dispid 11;
    property VCS: IDispatch readonly dispid 12;
    procedure InitConnection(const ServerName: WideString; const DomainName: WideString; 
                             const DomainPswd: WideString); dispid 13;
    procedure ReleaseConnection; dispid 14;
    procedure ConnectProject(const ProjectName: WideString; const UserName: WideString; 
                             const Password: WideString); dispid 15;
    procedure DisconnectProject; dispid 16;
    property ProjectsList: IList readonly dispid 17;
    property Command: IDispatch readonly dispid 18;
    property TreeManager: IDispatch readonly dispid 19;
    property ReqFactory: IDispatch readonly dispid 20;
    property ActionPermission: IDispatch readonly dispid 21;
    procedure GetLicense(LicenseType: Integer); dispid 22;
    procedure SendMail(const SendTo: WideString; const SendFrom: WideString; 
                       const Subject: WideString; const Message: WideString; 
                       attachArray: OleVariant; const bsFormat: WideString); dispid 23;
    property DBType: WideString readonly dispid 24;
    property DBManager: IDispatch readonly dispid 25;
    property Customization: IDispatch readonly dispid 26;
    property Fields[const DataType: WideString]: IList readonly dispid 27;
    property CommonSettings: IDispatch readonly dispid 28;
    property UserSettings: IDispatch readonly dispid 29;
    property HostGroupFactory: IDispatch readonly dispid 30;
    procedure ChangePassword(const OldPassword: WideString; const NewPassword: WideString); dispid 31;
    property UsersList: IList readonly dispid 32;
    property Password: WideString readonly dispid 33;
    property ExtendedStorage: IDispatch readonly dispid 34;
    property DirectoryPath[nType: Integer]: WideString readonly dispid 35;
    property ChangeFactory: IDispatch readonly dispid 36;
    property MailConditions: IDispatch readonly dispid 37;
    property ServerTime: TDateTime readonly dispid 38;
    property TDSettings: IDispatch readonly dispid 39;
    procedure PurgeRuns(const TestSetFilter: WideString; KeepLast: Integer; DateUnit: OleVariant; 
                        UnitCount: Integer; StepsOnly: WordBool); dispid 40;
    property ProjectProperties: IDispatch readonly dispid 41;
    procedure GetLicenseStatus(ClientType: Integer; out InUse: Integer; out Max: Integer); dispid 42;
    property DomainName: WideString readonly dispid 43;
    property TextParam: IDispatch readonly dispid 44;
    property TDParams[const Request: WideString]: WideString readonly dispid 45;
    property UsingProgress: WordBool dispid 46;
    property CheckoutRepository: WideString readonly dispid 47;
    property ViewsRepository: WideString readonly dispid 48;
    property VcsDbRepository: WideString readonly dispid 49;
    property RunFactory: IDispatch readonly dispid 50;
    property ModuleVisible[ModuleID: Integer]: WordBool readonly dispid 51;
    procedure InitConnectionEx(const ServerName: WideString); dispid 52;
    property ProjectsListEx[const DomainName: WideString]: IList readonly dispid 53;
    procedure ConnectProjectEx(const DomainName: WideString; const ProjectName: WideString; 
                               const UserName: WideString; const Password: WideString); dispid 54;
    property DomainsList: IList readonly dispid 55;
    procedure ConnectToVCSAs(const UserName: WideString; const Password: WideString; 
                             const CopyDesStep: WideString); dispid 56;
    procedure GetLicenses(LicensesType: Integer; var pVal: WideString); dispid 57;
    property Analysis: IDispatch readonly dispid 58;
    property VMRepository: WideString readonly dispid 59;
    property DBName: WideString readonly dispid 60;
    property Rules: IDispatch readonly dispid 61;
    property TestSetTreeManager: IDispatch readonly dispid 62;
    property AlertManager: IDispatch readonly dispid 63;
    property AllowReconnect: WordBool dispid 64;
    procedure SynchronizeFollowUps(const Password: WideString); dispid 65;
    property KeepConnection: WordBool dispid 66;
    property IgnoreHtmlFormat: WordBool dispid 67;
    property ReportRole: WideString readonly dispid 68;
    property ClientType[const newVal: WideString]: WideString writeonly dispid 69;
    property ComponentFactory: IDispatch readonly dispid 70;
    property ComponentFolderFactory: IDispatch readonly dispid 71;
    procedure GetTDVersion(out pbsMajorVersion: WideString; out pbsBuildNum: WideString); dispid 72;
    property ServerURL: WideString readonly dispid 73;
  end;

// *********************************************************************//
// Interface: ITDConnection2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4E3DA2DC-070F-4E73-BE64-2E91A8CA7DF8}
// *********************************************************************//
  ITDConnection2 = interface(ITDConnection)
    ['{4E3DA2DC-070F-4E73-BE64-2E91A8CA7DF8}']
    function Get_ProductInfo: IDispatch; safecall;
    function Get_GraphBuilder: IDispatch; safecall;
    function Get_AuditRecordFactory: IDispatch; safecall;
    function Get_AuditPropertyFactory: IDispatch; safecall;
    function Get_TSTestFactory: IDispatch; safecall;
    function Get_IsSearchSupported: WordBool; safecall;
    procedure Login(const UserName: WideString; const Password: WideString); safecall;
    procedure Connect(const DomainName: WideString; const ProjectName: WideString); safecall;
    procedure Disconnect; safecall;
    procedure Logout; safecall;
    function Get_LoggedIn: WordBool; safecall;
    function Get_VisibleDomains: IList; safecall;
    function Get_VisibleProjects(const DomainName: WideString): IList; safecall;
    property ProductInfo: IDispatch read Get_ProductInfo;
    property GraphBuilder: IDispatch read Get_GraphBuilder;
    property AuditRecordFactory: IDispatch read Get_AuditRecordFactory;
    property AuditPropertyFactory: IDispatch read Get_AuditPropertyFactory;
    property TSTestFactory: IDispatch read Get_TSTestFactory;
    property IsSearchSupported: WordBool read Get_IsSearchSupported;
    property LoggedIn: WordBool read Get_LoggedIn;
    property VisibleDomains: IList read Get_VisibleDomains;
    property VisibleProjects[const DomainName: WideString]: IList read Get_VisibleProjects;
  end;

// *********************************************************************//
// DispIntf:  ITDConnection2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4E3DA2DC-070F-4E73-BE64-2E91A8CA7DF8}
// *********************************************************************//
  ITDConnection2Disp = dispinterface
    ['{4E3DA2DC-070F-4E73-BE64-2E91A8CA7DF8}']
    property ProductInfo: IDispatch readonly dispid 75;
    property GraphBuilder: IDispatch readonly dispid 76;
    property AuditRecordFactory: IDispatch readonly dispid 77;
    property AuditPropertyFactory: IDispatch readonly dispid 78;
    property TSTestFactory: IDispatch readonly dispid 79;
    property IsSearchSupported: WordBool readonly dispid 80;
    procedure Login(const UserName: WideString; const Password: WideString); dispid 81;
    procedure Connect(const DomainName: WideString; const ProjectName: WideString); dispid 82;
    procedure Disconnect; dispid 83;
    procedure Logout; dispid 84;
    property LoggedIn: WordBool readonly dispid 85;
    property VisibleDomains: IList readonly dispid 86;
    property VisibleProjects[const DomainName: WideString]: IList readonly dispid 87;
    property Connected: WordBool readonly dispid 1;
    property ProjectConnected: WordBool readonly dispid 2;
    property ServerName: WideString readonly dispid 3;
    property ProjectName: WideString readonly dispid 4;
    property TestRepository: WideString readonly dispid 5;
    property UserName: WideString readonly dispid 6;
    property TestFactory: IDispatch readonly dispid 7;
    property BugFactory: IDispatch readonly dispid 8;
    property TestSetFactory: IDispatch readonly dispid 9;
    property UserGroupsList: IList readonly dispid 10;
    property HostFactory: IDispatch readonly dispid 11;
    property VCS: IDispatch readonly dispid 12;
    procedure InitConnection(const ServerName: WideString; const DomainName: WideString; 
                             const DomainPswd: WideString); dispid 13;
    procedure ReleaseConnection; dispid 14;
    procedure ConnectProject(const ProjectName: WideString; const UserName: WideString; 
                             const Password: WideString); dispid 15;
    procedure DisconnectProject; dispid 16;
    property ProjectsList: IList readonly dispid 17;
    property Command: IDispatch readonly dispid 18;
    property TreeManager: IDispatch readonly dispid 19;
    property ReqFactory: IDispatch readonly dispid 20;
    property ActionPermission: IDispatch readonly dispid 21;
    procedure GetLicense(LicenseType: Integer); dispid 22;
    procedure SendMail(const SendTo: WideString; const SendFrom: WideString; 
                       const Subject: WideString; const Message: WideString; 
                       attachArray: OleVariant; const bsFormat: WideString); dispid 23;
    property DBType: WideString readonly dispid 24;
    property DBManager: IDispatch readonly dispid 25;
    property Customization: IDispatch readonly dispid 26;
    property Fields[const DataType: WideString]: IList readonly dispid 27;
    property CommonSettings: IDispatch readonly dispid 28;
    property UserSettings: IDispatch readonly dispid 29;
    property HostGroupFactory: IDispatch readonly dispid 30;
    procedure ChangePassword(const OldPassword: WideString; const NewPassword: WideString); dispid 31;
    property UsersList: IList readonly dispid 32;
    property Password: WideString readonly dispid 33;
    property ExtendedStorage: IDispatch readonly dispid 34;
    property DirectoryPath[nType: Integer]: WideString readonly dispid 35;
    property ChangeFactory: IDispatch readonly dispid 36;
    property MailConditions: IDispatch readonly dispid 37;
    property ServerTime: TDateTime readonly dispid 38;
    property TDSettings: IDispatch readonly dispid 39;
    procedure PurgeRuns(const TestSetFilter: WideString; KeepLast: Integer; DateUnit: OleVariant; 
                        UnitCount: Integer; StepsOnly: WordBool); dispid 40;
    property ProjectProperties: IDispatch readonly dispid 41;
    procedure GetLicenseStatus(ClientType: Integer; out InUse: Integer; out Max: Integer); dispid 42;
    property DomainName: WideString readonly dispid 43;
    property TextParam: IDispatch readonly dispid 44;
    property TDParams[const Request: WideString]: WideString readonly dispid 45;
    property UsingProgress: WordBool dispid 46;
    property CheckoutRepository: WideString readonly dispid 47;
    property ViewsRepository: WideString readonly dispid 48;
    property VcsDbRepository: WideString readonly dispid 49;
    property RunFactory: IDispatch readonly dispid 50;
    property ModuleVisible[ModuleID: Integer]: WordBool readonly dispid 51;
    procedure InitConnectionEx(const ServerName: WideString); dispid 52;
    property ProjectsListEx[const DomainName: WideString]: IList readonly dispid 53;
    procedure ConnectProjectEx(const DomainName: WideString; const ProjectName: WideString; 
                               const UserName: WideString; const Password: WideString); dispid 54;
    property DomainsList: IList readonly dispid 55;
    procedure ConnectToVCSAs(const UserName: WideString; const Password: WideString; 
                             const CopyDesStep: WideString); dispid 56;
    procedure GetLicenses(LicensesType: Integer; var pVal: WideString); dispid 57;
    property Analysis: IDispatch readonly dispid 58;
    property VMRepository: WideString readonly dispid 59;
    property DBName: WideString readonly dispid 60;
    property Rules: IDispatch readonly dispid 61;
    property TestSetTreeManager: IDispatch readonly dispid 62;
    property AlertManager: IDispatch readonly dispid 63;
    property AllowReconnect: WordBool dispid 64;
    procedure SynchronizeFollowUps(const Password: WideString); dispid 65;
    property KeepConnection: WordBool dispid 66;
    property IgnoreHtmlFormat: WordBool dispid 67;
    property ReportRole: WideString readonly dispid 68;
    property ClientType[const newVal: WideString]: WideString writeonly dispid 69;
    property ComponentFactory: IDispatch readonly dispid 70;
    property ComponentFolderFactory: IDispatch readonly dispid 71;
    procedure GetTDVersion(out pbsMajorVersion: WideString; out pbsBuildNum: WideString); dispid 72;
    property ServerURL: WideString readonly dispid 73;
  end;

// *********************************************************************//
// Interface: ITDConnection3
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D5630429-4097-45C3-B581-2A01C6999DDD}
// *********************************************************************//
  ITDConnection3 = interface(ITDConnection2)
    ['{D5630429-4097-45C3-B581-2A01C6999DDD}']
    function GetNonce(ClientType: Integer): WideString; safecall;
    procedure Validate(ClientType: Integer; const ValidationCode: WideString); safecall;
    function GetExtensions(mode: Integer): IList; safecall;
    function Get_ExtensionFactory(var lpclsid: TGUID): IDispatch; safecall;
    function Get_ExtensionsManager: IDispatch; safecall;
    function Get_ReleaseFactory: IDispatch; safecall;
    function Get_CycleFactory: IDispatch; safecall;
    function Get_ReleaseFolderFactory: IDispatch; safecall;
    function Get_ServiceFactory: IDispatch; safecall;
    function Get_ServiceFolderFactory: IDispatch; safecall;
    function Get_ServiceGroupFactory: IDispatch; safecall;
    function Get_ServiceChangeFactory: IDispatch; safecall;
    function Get_ApplicationEntityTreeManager: IDispatch; safecall;
    function Get_ApplicationEntityFactory: IDispatch; safecall;
    function GetTDParamsNames: IList; safecall;
    function Get_ChangeEntityTreeManager: IDispatch; safecall;
    function Get_ChangeEntityFactory: IDispatch; safecall;
    function Get_ApplicationConfigurationFactory: IDispatch; safecall;
    function Get_BlueprintFactory: IDispatch; safecall;
    property ExtensionFactory[var lpclsid: TGUID]: IDispatch read Get_ExtensionFactory;
    property ExtensionsManager: IDispatch read Get_ExtensionsManager;
    property ReleaseFactory: IDispatch read Get_ReleaseFactory;
    property CycleFactory: IDispatch read Get_CycleFactory;
    property ReleaseFolderFactory: IDispatch read Get_ReleaseFolderFactory;
    property ServiceFactory: IDispatch read Get_ServiceFactory;
    property ServiceFolderFactory: IDispatch read Get_ServiceFolderFactory;
    property ServiceGroupFactory: IDispatch read Get_ServiceGroupFactory;
    property ServiceChangeFactory: IDispatch read Get_ServiceChangeFactory;
    property ApplicationEntityTreeManager: IDispatch read Get_ApplicationEntityTreeManager;
    property ApplicationEntityFactory: IDispatch read Get_ApplicationEntityFactory;
    property ChangeEntityTreeManager: IDispatch read Get_ChangeEntityTreeManager;
    property ChangeEntityFactory: IDispatch read Get_ChangeEntityFactory;
    property ApplicationConfigurationFactory: IDispatch read Get_ApplicationConfigurationFactory;
    property BlueprintFactory: IDispatch read Get_BlueprintFactory;
  end;

// *********************************************************************//
// DispIntf:  ITDConnection3Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D5630429-4097-45C3-B581-2A01C6999DDD}
// *********************************************************************//
  ITDConnection3Disp = dispinterface
    ['{D5630429-4097-45C3-B581-2A01C6999DDD}']
    function GetNonce(ClientType: Integer): WideString; dispid 88;
    procedure Validate(ClientType: Integer; const ValidationCode: WideString); dispid 89;
    function GetExtensions(mode: Integer): IList; dispid 90;
    property ExtensionFactory[var lpclsid: {??TGUID}OleVariant]: IDispatch readonly dispid 91;
    property ExtensionsManager: IDispatch readonly dispid 92;
    property ReleaseFactory: IDispatch readonly dispid 93;
    property CycleFactory: IDispatch readonly dispid 94;
    property ReleaseFolderFactory: IDispatch readonly dispid 95;
    property ServiceFactory: IDispatch readonly dispid 96;
    property ServiceFolderFactory: IDispatch readonly dispid 97;
    property ServiceGroupFactory: IDispatch readonly dispid 98;
    property ServiceChangeFactory: IDispatch readonly dispid 99;
    property ApplicationEntityTreeManager: IDispatch readonly dispid 100;
    property ApplicationEntityFactory: IDispatch readonly dispid 101;
    function GetTDParamsNames: IList; dispid 102;
    property ChangeEntityTreeManager: IDispatch readonly dispid 103;
    property ChangeEntityFactory: IDispatch readonly dispid 104;
    property ApplicationConfigurationFactory: IDispatch readonly dispid 105;
    property BlueprintFactory: IDispatch readonly dispid 106;
    property ProductInfo: IDispatch readonly dispid 75;
    property GraphBuilder: IDispatch readonly dispid 76;
    property AuditRecordFactory: IDispatch readonly dispid 77;
    property AuditPropertyFactory: IDispatch readonly dispid 78;
    property TSTestFactory: IDispatch readonly dispid 79;
    property IsSearchSupported: WordBool readonly dispid 80;
    procedure Login(const UserName: WideString; const Password: WideString); dispid 81;
    procedure Connect(const DomainName: WideString; const ProjectName: WideString); dispid 82;
    procedure Disconnect; dispid 83;
    procedure Logout; dispid 84;
    property LoggedIn: WordBool readonly dispid 85;
    property VisibleDomains: IList readonly dispid 86;
    property VisibleProjects[const DomainName: WideString]: IList readonly dispid 87;
    property Connected: WordBool readonly dispid 1;
    property ProjectConnected: WordBool readonly dispid 2;
    property ServerName: WideString readonly dispid 3;
    property ProjectName: WideString readonly dispid 4;
    property TestRepository: WideString readonly dispid 5;
    property UserName: WideString readonly dispid 6;
    property TestFactory: IDispatch readonly dispid 7;
    property BugFactory: IDispatch readonly dispid 8;
    property TestSetFactory: IDispatch readonly dispid 9;
    property UserGroupsList: IList readonly dispid 10;
    property HostFactory: IDispatch readonly dispid 11;
    property VCS: IDispatch readonly dispid 12;
    procedure InitConnection(const ServerName: WideString; const DomainName: WideString; 
                             const DomainPswd: WideString); dispid 13;
    procedure ReleaseConnection; dispid 14;
    procedure ConnectProject(const ProjectName: WideString; const UserName: WideString; 
                             const Password: WideString); dispid 15;
    procedure DisconnectProject; dispid 16;
    property ProjectsList: IList readonly dispid 17;
    property Command: IDispatch readonly dispid 18;
    property TreeManager: IDispatch readonly dispid 19;
    property ReqFactory: IDispatch readonly dispid 20;
    property ActionPermission: IDispatch readonly dispid 21;
    procedure GetLicense(LicenseType: Integer); dispid 22;
    procedure SendMail(const SendTo: WideString; const SendFrom: WideString; 
                       const Subject: WideString; const Message: WideString; 
                       attachArray: OleVariant; const bsFormat: WideString); dispid 23;
    property DBType: WideString readonly dispid 24;
    property DBManager: IDispatch readonly dispid 25;
    property Customization: IDispatch readonly dispid 26;
    property Fields[const DataType: WideString]: IList readonly dispid 27;
    property CommonSettings: IDispatch readonly dispid 28;
    property UserSettings: IDispatch readonly dispid 29;
    property HostGroupFactory: IDispatch readonly dispid 30;
    procedure ChangePassword(const OldPassword: WideString; const NewPassword: WideString); dispid 31;
    property UsersList: IList readonly dispid 32;
    property Password: WideString readonly dispid 33;
    property ExtendedStorage: IDispatch readonly dispid 34;
    property DirectoryPath[nType: Integer]: WideString readonly dispid 35;
    property ChangeFactory: IDispatch readonly dispid 36;
    property MailConditions: IDispatch readonly dispid 37;
    property ServerTime: TDateTime readonly dispid 38;
    property TDSettings: IDispatch readonly dispid 39;
    procedure PurgeRuns(const TestSetFilter: WideString; KeepLast: Integer; DateUnit: OleVariant; 
                        UnitCount: Integer; StepsOnly: WordBool); dispid 40;
    property ProjectProperties: IDispatch readonly dispid 41;
    procedure GetLicenseStatus(ClientType: Integer; out InUse: Integer; out Max: Integer); dispid 42;
    property DomainName: WideString readonly dispid 43;
    property TextParam: IDispatch readonly dispid 44;
    property TDParams[const Request: WideString]: WideString readonly dispid 45;
    property UsingProgress: WordBool dispid 46;
    property CheckoutRepository: WideString readonly dispid 47;
    property ViewsRepository: WideString readonly dispid 48;
    property VcsDbRepository: WideString readonly dispid 49;
    property RunFactory: IDispatch readonly dispid 50;
    property ModuleVisible[ModuleID: Integer]: WordBool readonly dispid 51;
    procedure InitConnectionEx(const ServerName: WideString); dispid 52;
    property ProjectsListEx[const DomainName: WideString]: IList readonly dispid 53;
    procedure ConnectProjectEx(const DomainName: WideString; const ProjectName: WideString; 
                               const UserName: WideString; const Password: WideString); dispid 54;
    property DomainsList: IList readonly dispid 55;
    procedure ConnectToVCSAs(const UserName: WideString; const Password: WideString; 
                             const CopyDesStep: WideString); dispid 56;
    procedure GetLicenses(LicensesType: Integer; var pVal: WideString); dispid 57;
    property Analysis: IDispatch readonly dispid 58;
    property VMRepository: WideString readonly dispid 59;
    property DBName: WideString readonly dispid 60;
    property Rules: IDispatch readonly dispid 61;
    property TestSetTreeManager: IDispatch readonly dispid 62;
    property AlertManager: IDispatch readonly dispid 63;
    property AllowReconnect: WordBool dispid 64;
    procedure SynchronizeFollowUps(const Password: WideString); dispid 65;
    property KeepConnection: WordBool dispid 66;
    property IgnoreHtmlFormat: WordBool dispid 67;
    property ReportRole: WideString readonly dispid 68;
    property ClientType[const newVal: WideString]: WideString writeonly dispid 69;
    property ComponentFactory: IDispatch readonly dispid 70;
    property ComponentFolderFactory: IDispatch readonly dispid 71;
    procedure GetTDVersion(out pbsMajorVersion: WideString; out pbsBuildNum: WideString); dispid 72;
    property ServerURL: WideString readonly dispid 73;
  end;

// *********************************************************************//
// Interface: ITDProgressNotify
// Flags:     (272) Hidden OleAutomation
// GUID:      {B3391F80-3861-11D3-AFAB-00600855298D}
// *********************************************************************//
  ITDProgressNotify = interface(IUnknown)
    ['{B3391F80-3861-11D3-AFAB-00600855298D}']
    function OnProgress(Current: Integer; Total: Integer; const Message: WideString): HResult; stdcall;
    function OnDataAvailable(ErrorCode: LongWord): HResult; stdcall;
    function OnServerProgress(Time: Integer; const Message: WideString): HResult; stdcall;
    function OnMessage(const Message: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IList
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F73CCC7B-05FA-4FD7-8FAA-B53DFFFE22DC}
// *********************************************************************//
  IList = interface(IDispatch)
    ['{F73CCC7B-05FA-4FD7-8FAA-B53DFFFE22DC}']
    function Get_Count: Integer; safecall;
    procedure Add(vNew: OleVariant); safecall;
    procedure Remove(Index: Integer); safecall;
    function Get_Item(Index: Integer): OleVariant; safecall;
    function Get__NewEnum: IUnknown; safecall;
    procedure Insert(Pos: Integer; vNew: OleVariant); safecall;
    procedure Swap(Pos1: Integer; Pos2: Integer); safecall;
    property Count: Integer read Get_Count;
    property Item[Index: Integer]: OleVariant read Get_Item; default;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  IListDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F73CCC7B-05FA-4FD7-8FAA-B53DFFFE22DC}
// *********************************************************************//
  IListDisp = dispinterface
    ['{F73CCC7B-05FA-4FD7-8FAA-B53DFFFE22DC}']
    property Count: Integer readonly dispid 1;
    procedure Add(vNew: OleVariant); dispid 2;
    procedure Remove(Index: Integer); dispid 3;
    property Item[Index: Integer]: OleVariant readonly dispid 0; default;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure Insert(Pos: Integer; vNew: OleVariant); dispid 5;
    procedure Swap(Pos1: Integer; Pos2: Integer); dispid 6;
  end;

// *********************************************************************//
// DispIntf:  _DIOtaEvents
// Flags:     (4240) Hidden NonExtensible Dispatchable
// GUID:      {C79EC040-A067-11D5-9D6E-000102E0AC0C}
// *********************************************************************//
  _DIOtaEvents = dispinterface
    ['{C79EC040-A067-11D5-9D6E-000102E0AC0C}']
    function OnConnectingServer(const Domain: WideString; const Server: WideString): WordBool; dispid 1;
    procedure OnConnectServer; dispid 2;
    function OnConnectingProject(const Project: WideString; const User: WideString; 
                                 const Password: WideString): WordBool; dispid 3;
    procedure OnConnectProject; dispid 4;
    function OnDisconnectingServer: WordBool; dispid 5;
    procedure OnDisconnectServer; dispid 6;
    function OnDisconnectingProject: WordBool; dispid 7;
    procedure OnDisconnectProject; dispid 8;
    function OnAddingItem(const ObjType: WideString; Object_: OleVariant): WordBool; dispid 9;
    procedure OnAddItem(const ObjType: WideString; Object_: OleVariant); dispid 10;
    function OnDeletingItem(const ObjType: WideString; Object_: OleVariant): WordBool; dispid 11;
    procedure OnDeleteItem(const ObjType: WideString); dispid 12;
    function OnSettingItemValue(const ObjType: WideString; Object_: OleVariant; 
                                const FieldName: WideString; var FieldValue: OleVariant): WordBool; dispid 13;
    procedure OnSetItemValue(const ObjType: WideString; Object_: OleVariant; 
                             const FieldName: WideString; FieldValue: OleVariant); dispid 14;
    function OnGettingItemValue(const ObjType: WideString; Object_: OleVariant; 
                                const FieldName: WideString): WordBool; dispid 15;
    procedure OnGetItemValue(const ObjType: WideString; Object_: OleVariant; 
                             const FieldName: WideString; var FieldValue: OleVariant); dispid 16;
    function OnUpdatingItem(const ObjType: WideString; Object_: OleVariant): WordBool; dispid 17;
    procedure OnUpdateItem(const ObjType: WideString; Object_: OleVariant); dispid 18;
    function OnFetchingNewList(Filter: OleVariant): WordBool; dispid 19;
    procedure OnFetchNewList(List: OleVariant); dispid 20;
    procedure OnServerErrRecieved(ErrorCode: Integer); dispid 21;
  end;

// *********************************************************************//
// DispIntf:  _DIProgressEvents
// Flags:     (4240) Hidden NonExtensible Dispatchable
// GUID:      {F4E85688-FCD7-11D4-9D8A-0001029DEAF5}
// *********************************************************************//
  _DIProgressEvents = dispinterface
    ['{F4E85688-FCD7-11D4-9D8A-0001029DEAF5}']
    procedure OnProgress(Current: Integer; Total: Integer; const Message: WideString); dispid 1;
    procedure OnDataAvailable(ErrorCode: Integer); dispid 2;
    procedure OnServerProgress(Time: Integer; const Message: WideString); dispid 3;
    procedure OnMessage(const Message: WideString); dispid 4;
  end;

// *********************************************************************//
// Interface: IUnitTestSupport
// Flags:     (16) Hidden
// GUID:      {24B17582-D52C-4074-8BD6-D7DD82705D15}
// *********************************************************************//
  IUnitTestSupport = interface(IUnknown)
    ['{24B17582-D52C-4074-8BD6-D7DD82705D15}']
    function UnitTestEnviromentOption(newVal: Integer): HResult; stdcall;
    function UnitTestProfile(const newVal: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IFileData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3A2C3A43-4D96-4682-91CC-9E091B64C1FE}
// *********************************************************************//
  IFileData = interface(IDispatch)
    ['{3A2C3A43-4D96-4682-91CC-9E091B64C1FE}']
    function Get_Name: WideString; safecall;
    function type_: Smallint; safecall;
    function Size: Integer; safecall;
    function ModifyDate: TDateTime; safecall;
    function Items: IList; safecall;
    property Name: WideString read Get_Name;
  end;

// *********************************************************************//
// DispIntf:  IFileDataDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3A2C3A43-4D96-4682-91CC-9E091B64C1FE}
// *********************************************************************//
  IFileDataDisp = dispinterface
    ['{3A2C3A43-4D96-4682-91CC-9E091B64C1FE}']
    property Name: WideString readonly dispid 0;
    function type_: Smallint; dispid 1;
    function Size: Integer; dispid 2;
    function ModifyDate: TDateTime; dispid 3;
    function Items: IList; dispid 4;
  end;

// *********************************************************************//
// Interface: IExtendedStorage
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BF9B38B0-935B-4112-92EC-49FED46AC64D}
// *********************************************************************//
  IExtendedStorage = interface(IDispatch)
    ['{BF9B38B0-935B-4112-92EC-49FED46AC64D}']
    function Get_Root: IDispatch; safecall;
    function Load(const FSysFilter: WideString; synchronize: WordBool): WideString; safecall;
    procedure Save(const FSysFilter: WideString; synchronize: WordBool); safecall;
    procedure Delete(const FSysFilter: WideString; nDeleteType: Integer); safecall;
    function Get_ServerPath: WideString; safecall;
    procedure Set_ServerPath(const pVal: WideString); safecall;
    function Get_ClientPath: WideString; safecall;
    procedure Set_ClientPath(const pVal: WideString); safecall;
    procedure Cancel; safecall;
    function Get_ActionFinished: Integer; safecall;
    function Progress(out Total: Integer; out Current: Integer): WideString; safecall;
    procedure GetLastError; safecall;
    function SaveEx(const FSysFilter: WideString; synchronize: WordBool; out pVal: IList): WordBool; safecall;
    function LoadEx(const FSysFilter: WideString; synchronize: WordBool; out pVal: IList; 
                    out pNonFatalErrorOccured: WordBool): WideString; safecall;
    property Root: IDispatch read Get_Root;
    property ServerPath: WideString read Get_ServerPath write Set_ServerPath;
    property ClientPath: WideString read Get_ClientPath write Set_ClientPath;
    property ActionFinished: Integer read Get_ActionFinished;
  end;

// *********************************************************************//
// DispIntf:  IExtendedStorageDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BF9B38B0-935B-4112-92EC-49FED46AC64D}
// *********************************************************************//
  IExtendedStorageDisp = dispinterface
    ['{BF9B38B0-935B-4112-92EC-49FED46AC64D}']
    property Root: IDispatch readonly dispid 0;
    function Load(const FSysFilter: WideString; synchronize: WordBool): WideString; dispid 1;
    procedure Save(const FSysFilter: WideString; synchronize: WordBool); dispid 2;
    procedure Delete(const FSysFilter: WideString; nDeleteType: Integer); dispid 3;
    property ServerPath: WideString dispid 4;
    property ClientPath: WideString dispid 5;
    procedure Cancel; dispid 6;
    property ActionFinished: Integer readonly dispid 7;
    function Progress(out Total: Integer; out Current: Integer): WideString; dispid 8;
    procedure GetLastError; dispid 9;
    function SaveEx(const FSysFilter: WideString; synchronize: WordBool; out pVal: IList): WordBool; dispid 10;
    function LoadEx(const FSysFilter: WideString; synchronize: WordBool; out pVal: IList; 
                    out pNonFatalErrorOccured: WordBool): WideString; dispid 11;
  end;

// *********************************************************************//
// Interface: IBaseFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F13E4E0F-2BF2-41A2-97B1-06AD03204518}
// *********************************************************************//
  IBaseFactory = interface(IDispatch)
    ['{F13E4E0F-2BF2-41A2-97B1-06AD03204518}']
    function Get_Item(ItemKey: OleVariant): IDispatch; safecall;
    function NewList(const Filter: WideString): IList; safecall;
    function Get_Fields: IList; safecall;
    function AddItem(ItemData: OleVariant): IDispatch; safecall;
    procedure RemoveItem(ItemKey: OleVariant); safecall;
    function Get_Filter: IDispatch; safecall;
    function Get_History: IDispatch; safecall;
    function Get_FetchLevel(const FieldName: WideString): Smallint; safecall;
    procedure Set_FetchLevel(const FieldName: WideString; pVal: Smallint); safecall;
    property Item[ItemKey: OleVariant]: IDispatch read Get_Item; default;
    property Fields: IList read Get_Fields;
    property Filter: IDispatch read Get_Filter;
    property History: IDispatch read Get_History;
    property FetchLevel[const FieldName: WideString]: Smallint read Get_FetchLevel write Set_FetchLevel;
  end;

// *********************************************************************//
// DispIntf:  IBaseFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F13E4E0F-2BF2-41A2-97B1-06AD03204518}
// *********************************************************************//
  IBaseFactoryDisp = dispinterface
    ['{F13E4E0F-2BF2-41A2-97B1-06AD03204518}']
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: IBaseFactoryEx
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B1F47936-EFAC-4AEE-9876-8110B16F037D}
// *********************************************************************//
  IBaseFactoryEx = interface(IBaseFactory)
    ['{B1F47936-EFAC-4AEE-9876-8110B16F037D}']
    procedure Mail(Items: OleVariant; const SendTo: WideString; const SendCc: WideString; 
                   Option: Integer; const Subject: WideString; const Comment: WideString); safecall;
  end;

// *********************************************************************//
// DispIntf:  IBaseFactoryExDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B1F47936-EFAC-4AEE-9876-8110B16F037D}
// *********************************************************************//
  IBaseFactoryExDisp = dispinterface
    ['{B1F47936-EFAC-4AEE-9876-8110B16F037D}']
    procedure Mail(Items: OleVariant; const SendTo: WideString; const SendCc: WideString; 
                   Option: Integer; const Subject: WideString; const Comment: WideString); dispid 8;
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: ITestFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5BB6D957-669D-47B2-8324-981492EDC42E}
// *********************************************************************//
  ITestFactory = interface(IBaseFactoryEx)
    ['{5BB6D957-669D-47B2-8324-981492EDC42E}']
    function BuildSummaryGraph(const XAxisField: WideString; const GroupByField: WideString; 
                               const SumOfField: WideString; MaxCols: Integer; Filter: OleVariant; 
                               ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; safecall;
    function BuildProgressGraph(const GroupByField: WideString; const SumOfField: WideString; 
                                MajorSkip: Integer; MinorSkip: Integer; MaxCols: Integer; 
                                Filter: OleVariant; FRDate: OleVariant; ForceRefresh: WordBool; 
                                ShowFullPath: WordBool): IDispatch; safecall;
    function Get_RepositoryStorage: IDispatch; safecall;
    function BuildTrendGraph(const GroupByField: WideString; const SumOfField: WideString; 
                             MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                             ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; safecall;
    function BuildPerfGraph(const GroupByField: WideString; const SumOfField: WideString; 
                            MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                            ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; safecall;
    function Get_IgnoreDataHiding: WordBool; safecall;
    procedure Set_IgnoreDataHiding(pVal: WordBool); safecall;
    function BuildProgressGraphEx(const GroupByField: WideString; const SumOfField: WideString; 
                                  ByHistory: WordBool; MajorSkip: Integer; MinorSkip: Integer; 
                                  MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                                  ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; safecall;
    property RepositoryStorage: IDispatch read Get_RepositoryStorage;
    property IgnoreDataHiding: WordBool read Get_IgnoreDataHiding write Set_IgnoreDataHiding;
  end;

// *********************************************************************//
// DispIntf:  ITestFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5BB6D957-669D-47B2-8324-981492EDC42E}
// *********************************************************************//
  ITestFactoryDisp = dispinterface
    ['{5BB6D957-669D-47B2-8324-981492EDC42E}']
    function BuildSummaryGraph(const XAxisField: WideString; const GroupByField: WideString; 
                               const SumOfField: WideString; MaxCols: Integer; Filter: OleVariant; 
                               ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 9;
    function BuildProgressGraph(const GroupByField: WideString; const SumOfField: WideString; 
                                MajorSkip: Integer; MinorSkip: Integer; MaxCols: Integer; 
                                Filter: OleVariant; FRDate: OleVariant; ForceRefresh: WordBool; 
                                ShowFullPath: WordBool): IDispatch; dispid 10;
    property RepositoryStorage: IDispatch readonly dispid 11;
    function BuildTrendGraph(const GroupByField: WideString; const SumOfField: WideString; 
                             MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                             ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 12;
    function BuildPerfGraph(const GroupByField: WideString; const SumOfField: WideString; 
                            MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                            ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 13;
    property IgnoreDataHiding: WordBool dispid 14;
    function BuildProgressGraphEx(const GroupByField: WideString; const SumOfField: WideString; 
                                  ByHistory: WordBool; MajorSkip: Integer; MinorSkip: Integer; 
                                  MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                                  ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 15;
    procedure Mail(Items: OleVariant; const SendTo: WideString; const SendCc: WideString; 
                   Option: Integer; const Subject: WideString; const Comment: WideString); dispid 8;
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: ISupportCopyPaste
// Flags:     (256) OleAutomation
// GUID:      {EBB38286-D5A3-41DD-9EBA-F2791C10522F}
// *********************************************************************//
  ISupportCopyPaste = interface(IUnknown)
    ['{EBB38286-D5A3-41DD-9EBA-F2791C10522F}']
    function PasteFromClipBoard(const ClipboardData: WideString; const TargetID: WideString; 
                                mode: Integer; OrderID: Integer): HResult; stdcall;
    function CopyToClipBoard(const IDSFilter: WideString; mode: Integer; const Path: WideString; 
                             out pVal: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISupportCopyPaste2
// Flags:     (256) OleAutomation
// GUID:      {057DAE0E-5171-4D8F-99B0-2BFC9F660443}
// *********************************************************************//
  ISupportCopyPaste2 = interface(ISupportCopyPaste)
    ['{057DAE0E-5171-4D8F-99B0-2BFC9F660443}']
    function Get_PasteToCurrentProject(const ClipboardData: WideString; out pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: _IBaseFactory
// Flags:     (16) Hidden
// GUID:      {47E4C767-87DA-409F-A70E-04B3FCE28BCE}
// *********************************************************************//
  _IBaseFactory = interface(IUnknown)
    ['{47E4C767-87DA-409F-A70E-04B3FCE28BCE}']
    function ListRefresh(const Filter: WideString; out NewObjectsArray: OleVariant): HResult; stdcall;
    function RemoveCachedList(const Filter: WideString): HResult; stdcall;
    function GetCachedList(const Filter: WideString; out pList: IList): HResult; stdcall;
    function PutCachedList(const Filter: WideString; const pList: IList): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISearchableFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {03986C41-712B-4A6F-8C65-B50CBF7FC640}
// *********************************************************************//
  ISearchableFactory = interface(IDispatch)
    ['{03986C41-712B-4A6F-8C65-B50CBF7FC640}']
    function CreateSearchOptions: IDispatch; safecall;
    function Search(const Query: WideString; const pSearchOptions: IDispatch): IList; safecall;
    function IsSearchable: WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  ISearchableFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {03986C41-712B-4A6F-8C65-B50CBF7FC640}
// *********************************************************************//
  ISearchableFactoryDisp = dispinterface
    ['{03986C41-712B-4A6F-8C65-B50CBF7FC640}']
    function CreateSearchOptions: IDispatch; dispid 1001;
    function Search(const Query: WideString; const pSearchOptions: IDispatch): IList; dispid 1002;
    function IsSearchable: WordBool; dispid 1003;
  end;

// *********************************************************************//
// Interface: IAlertableEntityFactory
// Flags:     (320) Dual OleAutomation
// GUID:      {FF0182C5-D203-4875-BC2C-48FF8DA7266D}
// *********************************************************************//
  IAlertableEntityFactory = interface(IUnknown)
    ['{FF0182C5-D203-4875-BC2C-48FF8DA7266D}']
  end;

// *********************************************************************//
// DispIntf:  IAlertableEntityFactoryDisp
// Flags:     (320) Dual OleAutomation
// GUID:      {FF0182C5-D203-4875-BC2C-48FF8DA7266D}
// *********************************************************************//
  IAlertableEntityFactoryDisp = dispinterface
    ['{FF0182C5-D203-4875-BC2C-48FF8DA7266D}']
  end;

// *********************************************************************//
// Interface: IBaseFactory2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3E46BE58-4943-48AA-BA08-38EEBA837A04}
// *********************************************************************//
  IBaseFactory2 = interface(IDispatch)
    ['{3E46BE58-4943-48AA-BA08-38EEBA837A04}']
    function Get_GroupingManager: IDispatch; safecall;
    function Get_GroupingSupported: WordBool; safecall;
    property GroupingManager: IDispatch read Get_GroupingManager;
    property GroupingSupported: WordBool read Get_GroupingSupported;
  end;

// *********************************************************************//
// DispIntf:  IBaseFactory2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3E46BE58-4943-48AA-BA08-38EEBA837A04}
// *********************************************************************//
  IBaseFactory2Disp = dispinterface
    ['{3E46BE58-4943-48AA-BA08-38EEBA837A04}']
    property GroupingManager: IDispatch readonly dispid 1;
    property GroupingSupported: WordBool readonly dispid 2;
  end;

// *********************************************************************//
// Interface: IBugFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E46670F8-B7CE-4DA6-AC5F-AE1FB9181337}
// *********************************************************************//
  IBugFactory = interface(IBaseFactoryEx)
    ['{E46670F8-B7CE-4DA6-AC5F-AE1FB9181337}']
    function BuildSummaryGraph(const XAxisField: WideString; const GroupByField: WideString; 
                               const SumOfField: WideString; MaxCols: Integer; Filter: OleVariant; 
                               ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; safecall;
    function BuildAgeGraph(const GroupByField: WideString; const SumOfField: WideString; 
                           MaxAge: Integer; MaxCols: Integer; Filter: OleVariant; 
                           ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; safecall;
    function BuildProgressGraph(const GroupByField: WideString; const SumOfField: WideString; 
                                ByHistory: WordBool; MajorSkip: Integer; MinorSkip: Integer; 
                                MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                                ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; safecall;
    function FindSimilarBugs(const Pattern: WideString; SimilarityRatio: Integer): IList; safecall;
    function BuildTrendGraph(const GroupByField: WideString; const SumOfField: WideString; 
                             MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                             ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; safecall;
    function BuildPerfGraph(const GroupByField: WideString; const SumOfField: WideString; 
                            MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                            ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; safecall;
  end;

// *********************************************************************//
// DispIntf:  IBugFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E46670F8-B7CE-4DA6-AC5F-AE1FB9181337}
// *********************************************************************//
  IBugFactoryDisp = dispinterface
    ['{E46670F8-B7CE-4DA6-AC5F-AE1FB9181337}']
    function BuildSummaryGraph(const XAxisField: WideString; const GroupByField: WideString; 
                               const SumOfField: WideString; MaxCols: Integer; Filter: OleVariant; 
                               ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 9;
    function BuildAgeGraph(const GroupByField: WideString; const SumOfField: WideString; 
                           MaxAge: Integer; MaxCols: Integer; Filter: OleVariant; 
                           ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 10;
    function BuildProgressGraph(const GroupByField: WideString; const SumOfField: WideString; 
                                ByHistory: WordBool; MajorSkip: Integer; MinorSkip: Integer; 
                                MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                                ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 11;
    function FindSimilarBugs(const Pattern: WideString; SimilarityRatio: Integer): IList; dispid 12;
    function BuildTrendGraph(const GroupByField: WideString; const SumOfField: WideString; 
                             MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                             ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 13;
    function BuildPerfGraph(const GroupByField: WideString; const SumOfField: WideString; 
                            MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                            ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 14;
    procedure Mail(Items: OleVariant; const SendTo: WideString; const SendCc: WideString; 
                   Option: Integer; const Subject: WideString; const Comment: WideString); dispid 8;
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: ICoverageFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FD167DFE-8DEE-4930-AFAA-A83C2B1480EB}
// *********************************************************************//
  ICoverageFactory = interface(IBaseFactory)
    ['{FD167DFE-8DEE-4930-AFAA-A83C2B1480EB}']
  end;

// *********************************************************************//
// DispIntf:  ICoverageFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FD167DFE-8DEE-4930-AFAA-A83C2B1480EB}
// *********************************************************************//
  ICoverageFactoryDisp = dispinterface
    ['{FD167DFE-8DEE-4930-AFAA-A83C2B1480EB}']
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: IReqCoverageFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3F004630-2A1E-4E7A-9133-6A0EA826C48F}
// *********************************************************************//
  IReqCoverageFactory = interface(ICoverageFactory)
    ['{3F004630-2A1E-4E7A-9133-6A0EA826C48F}']
    function Get_FullCoverage: WordBool; safecall;
    procedure Set_FullCoverage(pVal: WordBool); safecall;
    property FullCoverage: WordBool read Get_FullCoverage write Set_FullCoverage;
  end;

// *********************************************************************//
// DispIntf:  IReqCoverageFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3F004630-2A1E-4E7A-9133-6A0EA826C48F}
// *********************************************************************//
  IReqCoverageFactoryDisp = dispinterface
    ['{3F004630-2A1E-4E7A-9133-6A0EA826C48F}']
    property FullCoverage: WordBool dispid 8;
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: IReqCoverageInformation
// Flags:     (256) OleAutomation
// GUID:      {860CDC34-7616-4A2B-9005-9FBEF00FEF68}
// *********************************************************************//
  IReqCoverageInformation = interface(IUnknown)
    ['{860CDC34-7616-4A2B-9005-9FBEF00FEF68}']
    function GetCoverageEntitiesSummary(const Filter: WideString; const coverageByCycles: IList; 
                                        out Summary: OleVariant): HResult; stdcall;
    function SetCyclesContext(const coverageByCycles: IList): HResult; stdcall;
    function ResetCyclesContext: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IObjectLockingSupport
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {260EDCFF-BF72-4146-BC41-5B2280652ED0}
// *********************************************************************//
  IObjectLockingSupport = interface(IDispatch)
    ['{260EDCFF-BF72-4146-BC41-5B2280652ED0}']
    function Get_IsLocked: WordBool; safecall;
    function LockObject: WordBool; safecall;
    procedure UnLockObject; safecall;
    property IsLocked: WordBool read Get_IsLocked;
  end;

// *********************************************************************//
// DispIntf:  IObjectLockingSupportDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {260EDCFF-BF72-4146-BC41-5B2280652ED0}
// *********************************************************************//
  IObjectLockingSupportDisp = dispinterface
    ['{260EDCFF-BF72-4146-BC41-5B2280652ED0}']
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IBaseField
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E2F29752-72F0-42DB-995C-3DB385F4CCE5}
// *********************************************************************//
  IBaseField = interface(IObjectLockingSupport)
    ['{E2F29752-72F0-42DB-995C-3DB385F4CCE5}']
    function Get_Field(const FieldName: WideString): OleVariant; safecall;
    procedure Set_Field(const FieldName: WideString; pVal: OleVariant); safecall;
    function Get_ID: OleVariant; safecall;
    function Get_AutoPost: WordBool; safecall;
    procedure Set_AutoPost(pVal: WordBool); safecall;
    procedure Post; safecall;
    procedure Refresh; safecall;
    procedure Undo; safecall;
    function Get_Modified: WordBool; safecall;
    function Get_Virtual: WordBool; safecall;
    property Field[const FieldName: WideString]: OleVariant read Get_Field write Set_Field; default;
    property ID: OleVariant read Get_ID;
    property AutoPost: WordBool read Get_AutoPost write Set_AutoPost;
    property Modified: WordBool read Get_Modified;
    property Virtual: WordBool read Get_Virtual;
  end;

// *********************************************************************//
// DispIntf:  IBaseFieldDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E2F29752-72F0-42DB-995C-3DB385F4CCE5}
// *********************************************************************//
  IBaseFieldDisp = dispinterface
    ['{E2F29752-72F0-42DB-995C-3DB385F4CCE5}']
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoverageEntity
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BCF7E6D7-4281-40FA-923B-32DFA90715D7}
// *********************************************************************//
  ICoverageEntity = interface(IBaseField)
    ['{BCF7E6D7-4281-40FA-923B-32DFA90715D7}']
    function Get_RequirementEntity: IDispatch; safecall;
    function Get_TargetEntity: IDispatch; safecall;
    function Get_CoverageType: WideString; safecall;
    function Get_Status: WideString; safecall;
    function Get_Name: WideString; safecall;
    property RequirementEntity: IDispatch read Get_RequirementEntity;
    property TargetEntity: IDispatch read Get_TargetEntity;
    property CoverageType: WideString read Get_CoverageType;
    property Status: WideString read Get_Status;
    property Name: WideString read Get_Name;
  end;

// *********************************************************************//
// DispIntf:  ICoverageEntityDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BCF7E6D7-4281-40FA-923B-32DFA90715D7}
// *********************************************************************//
  ICoverageEntityDisp = dispinterface
    ['{BCF7E6D7-4281-40FA-923B-32DFA90715D7}']
    property RequirementEntity: IDispatch readonly dispid 11;
    property TargetEntity: IDispatch readonly dispid 12;
    property CoverageType: WideString readonly dispid 13;
    property Status: WideString readonly dispid 14;
    property Name: WideString readonly dispid 15;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: _IBaseField
// Flags:     (272) Hidden OleAutomation
// GUID:      {DCD217D3-9BE9-4BED-B386-1A105D84E1F0}
// *********************************************************************//
  _IBaseField = interface(IUnknown)
    ['{DCD217D3-9BE9-4BED-B386-1A105D84E1F0}']
    function _SetNeighborhood_(Vector: Integer; Index: Integer): HResult; stdcall;
    function _BeforePost_(out pVal: WideString; const pObject: IDispatch): HResult; stdcall;
    function _DoPost_(const Data: WideString; out Result: WideString): HResult; stdcall;
    function _AfterPost_(const Key: WideString; const pObject: IDispatch): HResult; stdcall;
    function _SetRequired_(const FieldName: WideString; Val: WordBool): HResult; stdcall;
    function _GetRequired_(const FieldName: WideString; out Val: WordBool): HResult; stdcall;
    function _RestoreRequired_(const FieldName: WideString): HResult; stdcall;
    function _SetRoot_(const FieldName: WideString; const Val: IDispatch): HResult; stdcall;
    function _GetRoot_(const FieldName: WideString; out Val: IDispatch): HResult; stdcall;
    function _RestoreRoot_(const FieldName: WideString): HResult; stdcall;
    function _put_Field(const FieldName: WideString; newVal: OleVariant): HResult; stdcall;
    function _VerifyPutField(const FieldName: WideString; newVal: OleVariant; out Val: WordBool): HResult; stdcall;
    function _IsFieldModified(const FieldName: WideString; var OldFieldValue: OleVariant; 
                              out pIsModified: WordBool): HResult; stdcall;
    function _UndoField(const FieldName: WideString): HResult; stdcall;
    function _VerifyPutFieldWithErrorOnFail(const FieldName: WideString; newVal: OleVariant; 
                                            out Val: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IBaseField2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BE73DDAA-AD0F-4A89-8936-0EDA17599273}
// *********************************************************************//
  IBaseField2 = interface(IDispatch)
    ['{BE73DDAA-AD0F-4A89-8936-0EDA17599273}']
    function Get_AutoUnlock: WordBool; safecall;
    procedure Set_AutoUnlock(pVal: WordBool); safecall;
    function Get_FieldMultiValue(const FieldName: WideString): IMultiValue; safecall;
    procedure Set_FieldMultiValue(const FieldName: WideString; const pMultiValue: IMultiValue); safecall;
    property AutoUnlock: WordBool read Get_AutoUnlock write Set_AutoUnlock;
    property FieldMultiValue[const FieldName: WideString]: IMultiValue read Get_FieldMultiValue write Set_FieldMultiValue;
  end;

// *********************************************************************//
// DispIntf:  IBaseField2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BE73DDAA-AD0F-4A89-8936-0EDA17599273}
// *********************************************************************//
  IBaseField2Disp = dispinterface
    ['{BE73DDAA-AD0F-4A89-8936-0EDA17599273}']
    property AutoUnlock: WordBool dispid 1;
    property FieldMultiValue[const FieldName: WideString]: IMultiValue dispid 2;
  end;

// *********************************************************************//
// Interface: IBaseField3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E4DC1359-6281-42FA-B739-CFA8E4ECC23F}
// *********************************************************************//
  IBaseField3 = interface(IDispatch)
    ['{E4DC1359-6281-42FA-B739-CFA8E4ECC23F}']
    procedure Post(UndoOnFailure: WordBool); safecall;
  end;

// *********************************************************************//
// DispIntf:  IBaseField3Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E4DC1359-6281-42FA-B739-CFA8E4ECC23F}
// *********************************************************************//
  IBaseField3Disp = dispinterface
    ['{E4DC1359-6281-42FA-B739-CFA8E4ECC23F}']
    procedure Post(UndoOnFailure: WordBool); dispid 1;
  end;

// *********************************************************************//
// Interface: IMultiValue
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB180CC0-6FDE-4A1E-A68E-F106EEED5E15}
// *********************************************************************//
  IMultiValue = interface(IDispatch)
    ['{EB180CC0-6FDE-4A1E-A68E-F106EEED5E15}']
    function Get_Text: WideString; safecall;
    procedure Set_Text(const pVal: WideString); safecall;
    function Get_List: IList; safecall;
    procedure Set_List(const pVal: IList); safecall;
    property Text: WideString read Get_Text write Set_Text;
    property List: IList read Get_List write Set_List;
  end;

// *********************************************************************//
// DispIntf:  IMultiValueDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB180CC0-6FDE-4A1E-A68E-F106EEED5E15}
// *********************************************************************//
  IMultiValueDisp = dispinterface
    ['{EB180CC0-6FDE-4A1E-A68E-F106EEED5E15}']
    property Text: WideString dispid 1;
    property List: IList dispid 2;
  end;

// *********************************************************************//
// Interface: ITestSetFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6199FE11-C44D-4712-99DF-4F5EF3F80A29}
// *********************************************************************//
  ITestSetFactory = interface(IBaseFactory)
    ['{6199FE11-C44D-4712-99DF-4F5EF3F80A29}']
    function BuildSummaryGraph(TestSetID: Integer; const XAxisField: WideString; 
                               const GroupByField: WideString; const SumOfField: WideString; 
                               MaxCols: Integer; Filter: OleVariant; ForceRefresh: WordBool; 
                               ShowFullPath: WordBool): IDispatch; safecall;
    function BuildProgressGraph(TestSetID: Integer; const GroupByField: WideString; 
                                const SumOfField: WideString; MajorSkip: Integer; 
                                MinorSkip: Integer; MaxCols: Integer; Filter: OleVariant; 
                                FRDate: OleVariant; ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; safecall;
    function BuildTrendGraph(TestSetID: Integer; const GroupByField: WideString; 
                             const SumOfField: WideString; MaxCols: Integer; Filter: OleVariant; 
                             FRDate: OleVariant; ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; safecall;
    function BuildPerfGraph(TestSetID: Integer; const GroupByField: WideString; 
                            const SumOfField: WideString; MaxCols: Integer; Filter: OleVariant; 
                            FRDate: OleVariant; ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; safecall;
    function BuildProgressGraphEx(TestSetID: Integer; const GroupByField: WideString; 
                                  const SumOfField: WideString; ByHistory: WordBool; 
                                  MajorSkip: Integer; MinorSkip: Integer; MaxCols: Integer; 
                                  Filter: OleVariant; FRDate: OleVariant; ForceRefresh: WordBool; 
                                  ShowFullPath: WordBool): IDispatch; safecall;
  end;

// *********************************************************************//
// DispIntf:  ITestSetFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6199FE11-C44D-4712-99DF-4F5EF3F80A29}
// *********************************************************************//
  ITestSetFactoryDisp = dispinterface
    ['{6199FE11-C44D-4712-99DF-4F5EF3F80A29}']
    function BuildSummaryGraph(TestSetID: Integer; const XAxisField: WideString; 
                               const GroupByField: WideString; const SumOfField: WideString; 
                               MaxCols: Integer; Filter: OleVariant; ForceRefresh: WordBool; 
                               ShowFullPath: WordBool): IDispatch; dispid 8;
    function BuildProgressGraph(TestSetID: Integer; const GroupByField: WideString; 
                                const SumOfField: WideString; MajorSkip: Integer; 
                                MinorSkip: Integer; MaxCols: Integer; Filter: OleVariant; 
                                FRDate: OleVariant; ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 9;
    function BuildTrendGraph(TestSetID: Integer; const GroupByField: WideString; 
                             const SumOfField: WideString; MaxCols: Integer; Filter: OleVariant; 
                             FRDate: OleVariant; ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 10;
    function BuildPerfGraph(TestSetID: Integer; const GroupByField: WideString; 
                            const SumOfField: WideString; MaxCols: Integer; Filter: OleVariant; 
                            FRDate: OleVariant; ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 11;
    function BuildProgressGraphEx(TestSetID: Integer; const GroupByField: WideString; 
                                  const SumOfField: WideString; ByHistory: WordBool; 
                                  MajorSkip: Integer; MinorSkip: Integer; MaxCols: Integer; 
                                  Filter: OleVariant; FRDate: OleVariant; ForceRefresh: WordBool; 
                                  ShowFullPath: WordBool): IDispatch; dispid 12;
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: ISysTreeNode
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8538CCBA-0B3E-481F-BB2B-14F0553CA146}
// *********************************************************************//
  ISysTreeNode = interface(IDispatch)
    ['{8538CCBA-0B3E-481F-BB2B-14F0553CA146}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    function AddNode(const NodeName: WideString): ISysTreeNode; safecall;
    function NewList: IList; safecall;
    function Get_NodeID: Integer; safecall;
    function Get_Attribute: Integer; safecall;
    function FindChildNode(const ChildName: WideString): ISysTreeNode; safecall;
    procedure RemoveNode(Node: OleVariant); safecall;
    function Get_Father: ISysTreeNode; safecall;
    function Get_Child(Index: Integer): ISysTreeNode; safecall;
    function Get_Count: Integer; safecall;
    function Get_DepthType: Smallint; safecall;
    function FindChildren(const Pattern: WideString; MatchCase: WordBool; const Filter: WideString): IList; safecall;
    function Get_Path: WideString; safecall;
    procedure Post; safecall;
    procedure Refresh; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property NodeID: Integer read Get_NodeID;
    property Attribute: Integer read Get_Attribute;
    property Father: ISysTreeNode read Get_Father;
    property Child[Index: Integer]: ISysTreeNode read Get_Child;
    property Count: Integer read Get_Count;
    property DepthType: Smallint read Get_DepthType;
    property Path: WideString read Get_Path;
  end;

// *********************************************************************//
// DispIntf:  ISysTreeNodeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8538CCBA-0B3E-481F-BB2B-14F0553CA146}
// *********************************************************************//
  ISysTreeNodeDisp = dispinterface
    ['{8538CCBA-0B3E-481F-BB2B-14F0553CA146}']
    property Name: WideString dispid 0;
    function AddNode(const NodeName: WideString): ISysTreeNode; dispid 1;
    function NewList: IList; dispid 2;
    property NodeID: Integer readonly dispid 3;
    property Attribute: Integer readonly dispid 4;
    function FindChildNode(const ChildName: WideString): ISysTreeNode; dispid 5;
    procedure RemoveNode(Node: OleVariant); dispid 6;
    property Father: ISysTreeNode readonly dispid 7;
    property Child[Index: Integer]: ISysTreeNode readonly dispid 8;
    property Count: Integer readonly dispid 9;
    property DepthType: Smallint readonly dispid 10;
    function FindChildren(const Pattern: WideString; MatchCase: WordBool; const Filter: WideString): IList; dispid 11;
    property Path: WideString readonly dispid 12;
    procedure Post; dispid 13;
    procedure Refresh; dispid 14;
  end;

// *********************************************************************//
// Interface: ISubjectNode
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0F500A37-F2F1-4079-9BE7-48C1DA715E27}
// *********************************************************************//
  ISubjectNode = interface(ISysTreeNode)
    ['{0F500A37-F2F1-4079-9BE7-48C1DA715E27}']
    function Get_TestFactory: IDispatch; safecall;
    procedure RemoveSubjectNode(Node: OleVariant; DeleteTests: WordBool); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pVal: WideString); safecall;
    function Get_Attachments: IDispatch; safecall;
    function FindTests(const Pattern: WideString; MatchCase: WordBool; const Filter: WideString): IList; safecall;
    function Get_ViewOrder: Integer; safecall;
    procedure Set_ViewOrder(pVal: Integer); safecall;
    function Get_HasAttachment: WordBool; safecall;
    procedure Move(Parent: OleVariant); safecall;
    property TestFactory: IDispatch read Get_TestFactory;
    property Description: WideString read Get_Description write Set_Description;
    property Attachments: IDispatch read Get_Attachments;
    property ViewOrder: Integer read Get_ViewOrder write Set_ViewOrder;
    property HasAttachment: WordBool read Get_HasAttachment;
  end;

// *********************************************************************//
// DispIntf:  ISubjectNodeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0F500A37-F2F1-4079-9BE7-48C1DA715E27}
// *********************************************************************//
  ISubjectNodeDisp = dispinterface
    ['{0F500A37-F2F1-4079-9BE7-48C1DA715E27}']
    property TestFactory: IDispatch readonly dispid 15;
    procedure RemoveSubjectNode(Node: OleVariant; DeleteTests: WordBool); dispid 16;
    property Description: WideString dispid 17;
    property Attachments: IDispatch readonly dispid 18;
    function FindTests(const Pattern: WideString; MatchCase: WordBool; const Filter: WideString): IList; dispid 19;
    property ViewOrder: Integer dispid 20;
    property HasAttachment: WordBool readonly dispid 21;
    procedure Move(Parent: OleVariant); dispid 22;
    property Name: WideString dispid 0;
    function AddNode(const NodeName: WideString): ISysTreeNode; dispid 1;
    function NewList: IList; dispid 2;
    property NodeID: Integer readonly dispid 3;
    property Attribute: Integer readonly dispid 4;
    function FindChildNode(const ChildName: WideString): ISysTreeNode; dispid 5;
    procedure RemoveNode(Node: OleVariant); dispid 6;
    property Father: ISysTreeNode readonly dispid 7;
    property Child[Index: Integer]: ISysTreeNode readonly dispid 8;
    property Count: Integer readonly dispid 9;
    property DepthType: Smallint readonly dispid 10;
    function FindChildren(const Pattern: WideString; MatchCase: WordBool; const Filter: WideString): IList; dispid 11;
    property Path: WideString readonly dispid 12;
    procedure Post; dispid 13;
    procedure Refresh; dispid 14;
  end;

// *********************************************************************//
// Interface: _ITreeNode
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {81113FC0-ECB4-43E5-AEF6-BFEEC9560CB4}
// *********************************************************************//
  _ITreeNode = interface(IUnknown)
    ['{81113FC0-ECB4-43E5-AEF6-BFEEC9560CB4}']
    procedure _GetFatherID_(out pVal: Integer); safecall;
    procedure _FindChildNode_(const ChildName: WideString; Recusive: WordBool; 
                              out pNode: ISysTreeNode); safecall;
    function _IsInitialized_: WordBool; safecall;
    procedure _SetNodeData_(const NodeData: WideString); safecall;
    procedure _MoveChild(const Node: IDispatch; Order: WordBool); safecall;
  end;

// *********************************************************************//
// DispIntf:  _ITreeNodeDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {81113FC0-ECB4-43E5-AEF6-BFEEC9560CB4}
// *********************************************************************//
  _ITreeNodeDisp = dispinterface
    ['{81113FC0-ECB4-43E5-AEF6-BFEEC9560CB4}']
    procedure _GetFatherID_(out pVal: Integer); dispid 1610678272;
    procedure _FindChildNode_(const ChildName: WideString; Recusive: WordBool; 
                              out pNode: ISysTreeNode); dispid 1610678273;
    function _IsInitialized_: WordBool; dispid 1610678274;
    procedure _SetNodeData_(const NodeData: WideString); dispid 1610678275;
    procedure _MoveChild(const Node: IDispatch; Order: WordBool); dispid 1610678276;
  end;

// *********************************************************************//
// Interface: ITreeManager
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E60B4439-691C-433D-B6D9-793044915A01}
// *********************************************************************//
  ITreeManager = interface(IDispatch)
    ['{E60B4439-691C-433D-B6D9-793044915A01}']
    function Get_TreeRoot(const RootName: WideString): IDispatch; safecall;
    function Get_NodePath(NodeID: Integer): WideString; safecall;
    function Get_NodeByPath(const Path: WideString): IDispatch; safecall;
    function Get_NodeById(NodeID: Integer): IDispatch; safecall;
    function Get_RootList(Val: Smallint): IList; safecall;
    property TreeRoot[const RootName: WideString]: IDispatch read Get_TreeRoot; default;
    property NodePath[NodeID: Integer]: WideString read Get_NodePath;
    property NodeByPath[const Path: WideString]: IDispatch read Get_NodeByPath;
    property NodeById[NodeID: Integer]: IDispatch read Get_NodeById;
    property RootList[Val: Smallint]: IList read Get_RootList;
  end;

// *********************************************************************//
// DispIntf:  ITreeManagerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E60B4439-691C-433D-B6D9-793044915A01}
// *********************************************************************//
  ITreeManagerDisp = dispinterface
    ['{E60B4439-691C-433D-B6D9-793044915A01}']
    property TreeRoot[const RootName: WideString]: IDispatch readonly dispid 0; default;
    property NodePath[NodeID: Integer]: WideString readonly dispid 1;
    property NodeByPath[const Path: WideString]: IDispatch readonly dispid 2;
    property NodeById[NodeID: Integer]: IDispatch readonly dispid 3;
    property RootList[Val: Smallint]: IList readonly dispid 4;
  end;

// *********************************************************************//
// Interface: IVCS
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6C66F3F1-52E8-4B39-840B-FB1C9800C676}
// *********************************************************************//
  IVCS = interface(IDispatch)
    ['{6C66F3F1-52E8-4B39-840B-FB1C9800C676}']
    function Get_Version: WideString; safecall;
    function Get_IsCheckedOut: WordBool; safecall;
    function Get_IsLocked: WordBool; safecall;
    procedure AddObjectToVcs(const Version: WideString; const Comments: WideString); safecall;
    procedure DeleteObjectFromVCS; safecall;
    procedure CheckOut(const Version: WideString; const Comment: WideString; Lock: WordBool; 
                       ReadOnly: WordBool; Sync: WordBool); safecall;
    procedure CheckIn(const Version: WideString; const Comments: WideString; Remove: WordBool; 
                      SetCurrent: WordBool); safecall;
    procedure SetCurrentVersion(const Version: WideString); safecall;
    procedure LockVcsObject; safecall;
    procedure UndoCheckout(Remove: WordBool); safecall;
    function Get_CurrentVersion: WideString; safecall;
    function Get_CheckoutInfo: IDispatch; safecall;
    function Get_Versions: IList; safecall;
    function Get_LockedBy: WideString; safecall;
    function Get_VersionInfo(const Version: WideString): IDispatch; safecall;
    procedure ViewVersion(const bstrVersion: WideString; var bstrViewPath: WideString); safecall;
    procedure ClearView(const bstrVersion: WideString); safecall;
    function Get_VersionsEx: IList; safecall;
    procedure Refresh; safecall;
    procedure CheckInEx(const Version: WideString; const Comments: WideString; Remove: WordBool; 
                        SetCurrent: WordBool; ForceCheckin: WordBool; Reserved: DWORD); safecall;
    property Version: WideString read Get_Version;
    property IsCheckedOut: WordBool read Get_IsCheckedOut;
    property IsLocked: WordBool read Get_IsLocked;
    property CurrentVersion: WideString read Get_CurrentVersion;
    property CheckoutInfo: IDispatch read Get_CheckoutInfo;
    property Versions: IList read Get_Versions;
    property LockedBy: WideString read Get_LockedBy;
    property VersionInfo[const Version: WideString]: IDispatch read Get_VersionInfo;
    property VersionsEx: IList read Get_VersionsEx;
  end;

// *********************************************************************//
// DispIntf:  IVCSDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6C66F3F1-52E8-4B39-840B-FB1C9800C676}
// *********************************************************************//
  IVCSDisp = dispinterface
    ['{6C66F3F1-52E8-4B39-840B-FB1C9800C676}']
    property Version: WideString readonly dispid 1;
    property IsCheckedOut: WordBool readonly dispid 2;
    property IsLocked: WordBool readonly dispid 3;
    procedure AddObjectToVcs(const Version: WideString; const Comments: WideString); dispid 4;
    procedure DeleteObjectFromVCS; dispid 5;
    procedure CheckOut(const Version: WideString; const Comment: WideString; Lock: WordBool; 
                       ReadOnly: WordBool; Sync: WordBool); dispid 6;
    procedure CheckIn(const Version: WideString; const Comments: WideString; Remove: WordBool; 
                      SetCurrent: WordBool); dispid 7;
    procedure SetCurrentVersion(const Version: WideString); dispid 8;
    procedure LockVcsObject; dispid 9;
    procedure UndoCheckout(Remove: WordBool); dispid 10;
    property CurrentVersion: WideString readonly dispid 11;
    property CheckoutInfo: IDispatch readonly dispid 12;
    property Versions: IList readonly dispid 13;
    property LockedBy: WideString readonly dispid 14;
    property VersionInfo[const Version: WideString]: IDispatch readonly dispid 15;
    procedure ViewVersion(const bstrVersion: WideString; var bstrViewPath: WideString); dispid 16;
    procedure ClearView(const bstrVersion: WideString); dispid 17;
    property VersionsEx: IList readonly dispid 18;
    procedure Refresh; dispid 19;
    procedure CheckInEx(const Version: WideString; const Comments: WideString; Remove: WordBool; 
                        SetCurrent: WordBool; ForceCheckin: WordBool; Reserved: DWORD); dispid 20;
  end;

// *********************************************************************//
// Interface: IAttachmentVcs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CE4BEF63-1922-4C81-8C81-DC18FF94D8E7}
// *********************************************************************//
  IAttachmentVcs = interface(IDispatch)
    ['{CE4BEF63-1922-4C81-8C81-DC18FF94D8E7}']
  end;

// *********************************************************************//
// DispIntf:  IAttachmentVcsDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CE4BEF63-1922-4C81-8C81-DC18FF94D8E7}
// *********************************************************************//
  IAttachmentVcsDisp = dispinterface
    ['{CE4BEF63-1922-4C81-8C81-DC18FF94D8E7}']
  end;

// *********************************************************************//
// Interface: IFactoryList
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {68FE31A3-6242-4AA4-9BBE-D0715F810DB3}
// *********************************************************************//
  IFactoryList = interface(IList)
    ['{68FE31A3-6242-4AA4-9BBE-D0715F810DB3}']
    function Get_Fields: IList; safecall;
    procedure Refresh; safecall;
    procedure Post; safecall;
    function Get_Ratio(Index: Integer): Integer; safecall;
    function IndexOfItem(Item: OleVariant): Integer; safecall;
    property Fields: IList read Get_Fields;
    property Ratio[Index: Integer]: Integer read Get_Ratio;
  end;

// *********************************************************************//
// DispIntf:  IFactoryListDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {68FE31A3-6242-4AA4-9BBE-D0715F810DB3}
// *********************************************************************//
  IFactoryListDisp = dispinterface
    ['{68FE31A3-6242-4AA4-9BBE-D0715F810DB3}']
    property Fields: IList readonly dispid 7;
    procedure Refresh; dispid 8;
    procedure Post; dispid 9;
    property Ratio[Index: Integer]: Integer readonly dispid 10;
    function IndexOfItem(Item: OleVariant): Integer; dispid 11;
    property Count: Integer readonly dispid 1;
    procedure Add(vNew: OleVariant); dispid 2;
    procedure Remove(Index: Integer); dispid 3;
    property Item[Index: Integer]: OleVariant readonly dispid 0; default;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure Insert(Pos: Integer; vNew: OleVariant); dispid 5;
    procedure Swap(Pos1: Integer; Pos2: Integer); dispid 6;
  end;

// *********************************************************************//
// Interface: IHierarchySupportList
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DDE517F0-AF73-4327-A1BD-403E6A047B0A}
// *********************************************************************//
  IHierarchySupportList = interface(IFactoryList)
    ['{DDE517F0-AF73-4327-A1BD-403E6A047B0A}']
    function Get_IsInFilter(Index: Integer): WordBool; safecall;
    property IsInFilter[Index: Integer]: WordBool read Get_IsInFilter;
  end;

// *********************************************************************//
// DispIntf:  IHierarchySupportListDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DDE517F0-AF73-4327-A1BD-403E6A047B0A}
// *********************************************************************//
  IHierarchySupportListDisp = dispinterface
    ['{DDE517F0-AF73-4327-A1BD-403E6A047B0A}']
    property IsInFilter[Index: Integer]: WordBool readonly dispid 12;
    property Fields: IList readonly dispid 7;
    procedure Refresh; dispid 8;
    procedure Post; dispid 9;
    property Ratio[Index: Integer]: Integer readonly dispid 10;
    function IndexOfItem(Item: OleVariant): Integer; dispid 11;
    property Count: Integer readonly dispid 1;
    procedure Add(vNew: OleVariant); dispid 2;
    procedure Remove(Index: Integer); dispid 3;
    property Item[Index: Integer]: OleVariant readonly dispid 0; default;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure Insert(Pos: Integer; vNew: OleVariant); dispid 5;
    procedure Swap(Pos1: Integer; Pos2: Integer); dispid 6;
  end;

// *********************************************************************//
// Interface: IFieldProperty
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C2E1AF68-28C8-4DA3-8C65-5E1D230B1FF6}
// *********************************************************************//
  IFieldProperty = interface(IDispatch)
    ['{C2E1AF68-28C8-4DA3-8C65-5E1D230B1FF6}']
    function Get_UserLabel: WideString; safecall;
    function Get_DBTableName: WideString; safecall;
    function Get_DBColumnName: WideString; safecall;
    function Get_DBColumnType: WideString; safecall;
    function Get_EditStyle: WideString; safecall;
    function Get_EditMask: WideString; safecall;
    function Get_IsSystem: WordBool; safecall;
    function Get_IsCanFilter: WordBool; safecall;
    function Get_IsKey: WordBool; safecall;
    function Get_KeyOrder: Integer; safecall;
    function Get_IsEdit: WordBool; safecall;
    function Get_IsActive: WordBool; safecall;
    function Get_IsHistory: WordBool; safecall;
    function Get_IsMail: WordBool; safecall;
    function Get_IsVerify: WordBool; safecall;
    function Get_Root: IDispatch; safecall;
    function Get_IsByCode: WordBool; safecall;
    function Get_IsRequired: WordBool; safecall;
    function Get_UserColumnType: WideString; safecall;
    function Get_IsKeepValue: WordBool; safecall;
    function Get_IsCustomizable: WordBool; safecall;
    function Get_FieldSize: Integer; safecall;
    function Get_IsVisibleInNewBug: WordBool; safecall;
    function Get_ReadOnly: WordBool; safecall;
    function Get_IsToSum: WordBool; safecall;
    function Get_IsModify: WordBool; safecall;
    function Get_IsVersionControl: WordBool; safecall;
    function Get_IsVisible: WordBool; safecall;
    property UserLabel: WideString read Get_UserLabel;
    property DBTableName: WideString read Get_DBTableName;
    property DBColumnName: WideString read Get_DBColumnName;
    property DBColumnType: WideString read Get_DBColumnType;
    property EditStyle: WideString read Get_EditStyle;
    property EditMask: WideString read Get_EditMask;
    property IsSystem: WordBool read Get_IsSystem;
    property IsCanFilter: WordBool read Get_IsCanFilter;
    property IsKey: WordBool read Get_IsKey;
    property KeyOrder: Integer read Get_KeyOrder;
    property IsEdit: WordBool read Get_IsEdit;
    property IsActive: WordBool read Get_IsActive;
    property IsHistory: WordBool read Get_IsHistory;
    property IsMail: WordBool read Get_IsMail;
    property IsVerify: WordBool read Get_IsVerify;
    property Root: IDispatch read Get_Root;
    property IsByCode: WordBool read Get_IsByCode;
    property IsRequired: WordBool read Get_IsRequired;
    property UserColumnType: WideString read Get_UserColumnType;
    property IsKeepValue: WordBool read Get_IsKeepValue;
    property IsCustomizable: WordBool read Get_IsCustomizable;
    property FieldSize: Integer read Get_FieldSize;
    property IsVisibleInNewBug: WordBool read Get_IsVisibleInNewBug;
    property ReadOnly: WordBool read Get_ReadOnly;
    property IsToSum: WordBool read Get_IsToSum;
    property IsModify: WordBool read Get_IsModify;
    property IsVersionControl: WordBool read Get_IsVersionControl;
    property IsVisible: WordBool read Get_IsVisible;
  end;

// *********************************************************************//
// DispIntf:  IFieldPropertyDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C2E1AF68-28C8-4DA3-8C65-5E1D230B1FF6}
// *********************************************************************//
  IFieldPropertyDisp = dispinterface
    ['{C2E1AF68-28C8-4DA3-8C65-5E1D230B1FF6}']
    property UserLabel: WideString readonly dispid 0;
    property DBTableName: WideString readonly dispid 1;
    property DBColumnName: WideString readonly dispid 2;
    property DBColumnType: WideString readonly dispid 3;
    property EditStyle: WideString readonly dispid 4;
    property EditMask: WideString readonly dispid 5;
    property IsSystem: WordBool readonly dispid 6;
    property IsCanFilter: WordBool readonly dispid 7;
    property IsKey: WordBool readonly dispid 8;
    property KeyOrder: Integer readonly dispid 9;
    property IsEdit: WordBool readonly dispid 10;
    property IsActive: WordBool readonly dispid 11;
    property IsHistory: WordBool readonly dispid 12;
    property IsMail: WordBool readonly dispid 13;
    property IsVerify: WordBool readonly dispid 14;
    property Root: IDispatch readonly dispid 15;
    property IsByCode: WordBool readonly dispid 16;
    property IsRequired: WordBool readonly dispid 17;
    property UserColumnType: WideString readonly dispid 18;
    property IsKeepValue: WordBool readonly dispid 19;
    property IsCustomizable: WordBool readonly dispid 20;
    property FieldSize: Integer readonly dispid 21;
    property IsVisibleInNewBug: WordBool readonly dispid 22;
    property ReadOnly: WordBool readonly dispid 23;
    property IsToSum: WordBool readonly dispid 24;
    property IsModify: WordBool readonly dispid 25;
    property IsVersionControl: WordBool readonly dispid 26;
    property IsVisible: WordBool readonly dispid 27;
  end;

// *********************************************************************//
// Interface: IFieldProperty2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F5DEB618-2CF4-44A1-81A1-00922B9C4F5B}
// *********************************************************************//
  IFieldProperty2 = interface(IFieldProperty)
    ['{F5DEB618-2CF4-44A1-81A1-00922B9C4F5B}']
    function Get_IsCanGroup: WordBool; safecall;
    function Get_IsSearchable: WordBool; safecall;
    function Get_IsMultiValue: WordBool; safecall;
    property IsCanGroup: WordBool read Get_IsCanGroup;
    property IsSearchable: WordBool read Get_IsSearchable;
    property IsMultiValue: WordBool read Get_IsMultiValue;
  end;

// *********************************************************************//
// DispIntf:  IFieldProperty2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F5DEB618-2CF4-44A1-81A1-00922B9C4F5B}
// *********************************************************************//
  IFieldProperty2Disp = dispinterface
    ['{F5DEB618-2CF4-44A1-81A1-00922B9C4F5B}']
    property IsCanGroup: WordBool readonly dispid 28;
    property IsSearchable: WordBool readonly dispid 29;
    property IsMultiValue: WordBool readonly dispid 30;
    property UserLabel: WideString readonly dispid 0;
    property DBTableName: WideString readonly dispid 1;
    property DBColumnName: WideString readonly dispid 2;
    property DBColumnType: WideString readonly dispid 3;
    property EditStyle: WideString readonly dispid 4;
    property EditMask: WideString readonly dispid 5;
    property IsSystem: WordBool readonly dispid 6;
    property IsCanFilter: WordBool readonly dispid 7;
    property IsKey: WordBool readonly dispid 8;
    property KeyOrder: Integer readonly dispid 9;
    property IsEdit: WordBool readonly dispid 10;
    property IsActive: WordBool readonly dispid 11;
    property IsHistory: WordBool readonly dispid 12;
    property IsMail: WordBool readonly dispid 13;
    property IsVerify: WordBool readonly dispid 14;
    property Root: IDispatch readonly dispid 15;
    property IsByCode: WordBool readonly dispid 16;
    property IsRequired: WordBool readonly dispid 17;
    property UserColumnType: WideString readonly dispid 18;
    property IsKeepValue: WordBool readonly dispid 19;
    property IsCustomizable: WordBool readonly dispid 20;
    property FieldSize: Integer readonly dispid 21;
    property IsVisibleInNewBug: WordBool readonly dispid 22;
    property ReadOnly: WordBool readonly dispid 23;
    property IsToSum: WordBool readonly dispid 24;
    property IsModify: WordBool readonly dispid 25;
    property IsVersionControl: WordBool readonly dispid 26;
    property IsVisible: WordBool readonly dispid 27;
  end;

// *********************************************************************//
// Interface: IFieldProperty3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {990DDBDD-99AB-4689-980C-4B0F8FE6E29A}
// *********************************************************************//
  IFieldProperty3 = interface(IFieldProperty2)
    ['{990DDBDD-99AB-4689-980C-4B0F8FE6E29A}']
    function GetRequiredByType: WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IFieldProperty3Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {990DDBDD-99AB-4689-980C-4B0F8FE6E29A}
// *********************************************************************//
  IFieldProperty3Disp = dispinterface
    ['{990DDBDD-99AB-4689-980C-4B0F8FE6E29A}']
    function GetRequiredByType: WordBool; dispid 1610874880;
    property IsCanGroup: WordBool readonly dispid 28;
    property IsSearchable: WordBool readonly dispid 29;
    property IsMultiValue: WordBool readonly dispid 30;
    property UserLabel: WideString readonly dispid 0;
    property DBTableName: WideString readonly dispid 1;
    property DBColumnName: WideString readonly dispid 2;
    property DBColumnType: WideString readonly dispid 3;
    property EditStyle: WideString readonly dispid 4;
    property EditMask: WideString readonly dispid 5;
    property IsSystem: WordBool readonly dispid 6;
    property IsCanFilter: WordBool readonly dispid 7;
    property IsKey: WordBool readonly dispid 8;
    property KeyOrder: Integer readonly dispid 9;
    property IsEdit: WordBool readonly dispid 10;
    property IsActive: WordBool readonly dispid 11;
    property IsHistory: WordBool readonly dispid 12;
    property IsMail: WordBool readonly dispid 13;
    property IsVerify: WordBool readonly dispid 14;
    property Root: IDispatch readonly dispid 15;
    property IsByCode: WordBool readonly dispid 16;
    property IsRequired: WordBool readonly dispid 17;
    property UserColumnType: WideString readonly dispid 18;
    property IsKeepValue: WordBool readonly dispid 19;
    property IsCustomizable: WordBool readonly dispid 20;
    property FieldSize: Integer readonly dispid 21;
    property IsVisibleInNewBug: WordBool readonly dispid 22;
    property ReadOnly: WordBool readonly dispid 23;
    property IsToSum: WordBool readonly dispid 24;
    property IsModify: WordBool readonly dispid 25;
    property IsVersionControl: WordBool readonly dispid 26;
    property IsVisible: WordBool readonly dispid 27;
  end;

// *********************************************************************//
// Interface: ITDField
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3D416474-2373-446E-9090-DBC083B6C382}
// *********************************************************************//
  ITDField = interface(IDispatch)
    ['{3D416474-2373-446E-9090-DBC083B6C382}']
    function Get_Name: WideString; safecall;
    function Get_type_: Integer; safecall;
    function Get_Property_: IDispatch; safecall;
    procedure IsValidValue(Value: OleVariant; const pObject: IDispatch); safecall;
    property Name: WideString read Get_Name;
    property type_: Integer read Get_type_;
    property Property_: IDispatch read Get_Property_;
  end;

// *********************************************************************//
// DispIntf:  ITDFieldDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3D416474-2373-446E-9090-DBC083B6C382}
// *********************************************************************//
  ITDFieldDisp = dispinterface
    ['{3D416474-2373-446E-9090-DBC083B6C382}']
    property Name: WideString readonly dispid 0;
    property type_: Integer readonly dispid 1;
    property Property_: IDispatch readonly dispid 2;
    procedure IsValidValue(Value: OleVariant; const pObject: IDispatch); dispid 3;
  end;

// *********************************************************************//
// Interface: IBaseFieldEx
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8937B744-DE14-4E34-9A56-4E9E308B1863}
// *********************************************************************//
  IBaseFieldEx = interface(IBaseField)
    ['{8937B744-DE14-4E34-9A56-4E9E308B1863}']
    function Get_History: IDispatch; safecall;
    function Get_Attachments: IDispatch; safecall;
    function Get_HasAttachment: WordBool; safecall;
    property History: IDispatch read Get_History;
    property Attachments: IDispatch read Get_Attachments;
    property HasAttachment: WordBool read Get_HasAttachment;
  end;

// *********************************************************************//
// DispIntf:  IBaseFieldExDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8937B744-DE14-4E34-9A56-4E9E308B1863}
// *********************************************************************//
  IBaseFieldExDisp = dispinterface
    ['{8937B744-DE14-4E34-9A56-4E9E308B1863}']
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IBaseFieldExMail
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BF873A99-2FB9-43DB-9559-F9F0872F7534}
// *********************************************************************//
  IBaseFieldExMail = interface(IBaseFieldEx)
    ['{BF873A99-2FB9-43DB-9559-F9F0872F7534}']
    procedure Mail(const SendTo: WideString; const SendCc: WideString; Option: Integer; 
                   const Subject: WideString; const Comment: WideString); safecall;
  end;

// *********************************************************************//
// DispIntf:  IBaseFieldExMailDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BF873A99-2FB9-43DB-9559-F9F0872F7534}
// *********************************************************************//
  IBaseFieldExMailDisp = dispinterface
    ['{BF873A99-2FB9-43DB-9559-F9F0872F7534}']
    procedure Mail(const SendTo: WideString; const SendCc: WideString; Option: Integer; 
                   const Subject: WideString; const Comment: WideString); dispid 14;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: ITest
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4777BC00-DDBD-4DBD-ACE6-BEAE379E2051}
// *********************************************************************//
  ITest = interface(IBaseFieldExMail)
    ['{4777BC00-DDBD-4DBD-ACE6-BEAE379E2051}']
    function Get_FullPath: WideString; safecall;
    function Get_type_: WideString; safecall;
    procedure Set_type_(const pVal: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    function Get_DesignStepFactory: IDispatch; safecall;
    function Get_DesStepsNum: Integer; safecall;
    function CoverRequirement(Req: OleVariant; Order: Integer; Recursive: WordBool): Integer; safecall;
    procedure RemoveCoverage(Req: OleVariant); safecall;
    function GetCoverList: IList; safecall;
    function Get_ExtendedStorage: IDispatch; safecall;
    function Get_ExecStatus: WideString; safecall;
    function Get_HasCoverage: WordBool; safecall;
    function Get_LastRun: IDispatch; safecall;
    function Get_ExecDate: TDateTime; safecall;
    function Get_TemplateTest: WordBool; safecall;
    procedure Set_TemplateTest(pVal: WordBool); safecall;
    function Get_Params: IDispatch; safecall;
    function Get_HasParam: WordBool; safecall;
    function Get_VCS: IDispatch; safecall;
    function Get_CheckoutPathIfExist: WideString; safecall;
    function Get_IgnoreDataHiding: WordBool; safecall;
    procedure Set_IgnoreDataHiding(pVal: WordBool); safecall;
    function Get_FullPathEx(isOrgFullPath: Integer): WideString; safecall;
    property FullPath: WideString read Get_FullPath;
    property type_: WideString read Get_type_ write Set_type_;
    property Name: WideString read Get_Name write Set_Name;
    property DesignStepFactory: IDispatch read Get_DesignStepFactory;
    property DesStepsNum: Integer read Get_DesStepsNum;
    property ExtendedStorage: IDispatch read Get_ExtendedStorage;
    property ExecStatus: WideString read Get_ExecStatus;
    property HasCoverage: WordBool read Get_HasCoverage;
    property LastRun: IDispatch read Get_LastRun;
    property ExecDate: TDateTime read Get_ExecDate;
    property TemplateTest: WordBool read Get_TemplateTest write Set_TemplateTest;
    property Params: IDispatch read Get_Params;
    property HasParam: WordBool read Get_HasParam;
    property VCS: IDispatch read Get_VCS;
    property CheckoutPathIfExist: WideString read Get_CheckoutPathIfExist;
    property IgnoreDataHiding: WordBool read Get_IgnoreDataHiding write Set_IgnoreDataHiding;
    property FullPathEx[isOrgFullPath: Integer]: WideString read Get_FullPathEx;
  end;

// *********************************************************************//
// DispIntf:  ITestDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4777BC00-DDBD-4DBD-ACE6-BEAE379E2051}
// *********************************************************************//
  ITestDisp = dispinterface
    ['{4777BC00-DDBD-4DBD-ACE6-BEAE379E2051}']
    property FullPath: WideString readonly dispid 15;
    property type_: WideString dispid 16;
    property Name: WideString dispid 17;
    property DesignStepFactory: IDispatch readonly dispid 18;
    property DesStepsNum: Integer readonly dispid 19;
    function CoverRequirement(Req: OleVariant; Order: Integer; Recursive: WordBool): Integer; dispid 20;
    procedure RemoveCoverage(Req: OleVariant); dispid 21;
    function GetCoverList: IList; dispid 22;
    property ExtendedStorage: IDispatch readonly dispid 23;
    property ExecStatus: WideString readonly dispid 24;
    property HasCoverage: WordBool readonly dispid 25;
    property LastRun: IDispatch readonly dispid 26;
    property ExecDate: TDateTime readonly dispid 27;
    property TemplateTest: WordBool dispid 28;
    property Params: IDispatch readonly dispid 29;
    property HasParam: WordBool readonly dispid 30;
    property VCS: IDispatch readonly dispid 31;
    property CheckoutPathIfExist: WideString readonly dispid 32;
    property IgnoreDataHiding: WordBool dispid 33;
    property FullPathEx[isOrgFullPath: Integer]: WideString readonly dispid 34;
    procedure Mail(const SendTo: WideString; const SendCc: WideString; Option: Integer; 
                   const Subject: WideString; const Comment: WideString); dispid 14;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IAlertable
// Flags:     (320) Dual OleAutomation
// GUID:      {101CD251-91FB-4FB0-A440-DE755D905584}
// *********************************************************************//
  IAlertable = interface(IUnknown)
    ['{101CD251-91FB-4FB0-A440-DE755D905584}']
    procedure DeleteAlert(IDs: OleVariant); safecall;
    procedure CleanAllAlerts; safecall;
    function GetAlert(ID: Integer): IDispatch; safecall;
    function GetAlertList(NeedRefresh: WordBool): IList; safecall;
    function HasAlerts: WordBool; safecall;
    function HasNewAlerts: WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IAlertableDisp
// Flags:     (320) Dual OleAutomation
// GUID:      {101CD251-91FB-4FB0-A440-DE755D905584}
// *********************************************************************//
  IAlertableDisp = dispinterface
    ['{101CD251-91FB-4FB0-A440-DE755D905584}']
    procedure DeleteAlert(IDs: OleVariant); dispid 1610678272;
    procedure CleanAllAlerts; dispid 1610678273;
    function GetAlert(ID: Integer): IDispatch; dispid 1610678274;
    function GetAlertList(NeedRefresh: WordBool): IList; dispid 1610678275;
    function HasAlerts: WordBool; dispid 1610678276;
    function HasNewAlerts: WordBool; dispid 1610678277;
  end;

// *********************************************************************//
// Interface: IAlertable2
// Flags:     (320) Dual OleAutomation
// GUID:      {B19C1039-D667-48D1-81B0-C864E9CC3109}
// *********************************************************************//
  IAlertable2 = interface(IAlertable)
    ['{B19C1039-D667-48D1-81B0-C864E9CC3109}']
    function AddAlert(const ChangedEntityType: WideString; ChangedEntityID: Integer; 
                      const alertSubject: WideString; const alertDescription: WideString): IDispatch; safecall;
  end;

// *********************************************************************//
// DispIntf:  IAlertable2Disp
// Flags:     (320) Dual OleAutomation
// GUID:      {B19C1039-D667-48D1-81B0-C864E9CC3109}
// *********************************************************************//
  IAlertable2Disp = dispinterface
    ['{B19C1039-D667-48D1-81B0-C864E9CC3109}']
    function AddAlert(const ChangedEntityType: WideString; ChangedEntityID: Integer; 
                      const alertSubject: WideString; const alertDescription: WideString): IDispatch; dispid 1610743808;
    procedure DeleteAlert(IDs: OleVariant); dispid 1610678272;
    procedure CleanAllAlerts; dispid 1610678273;
    function GetAlert(ID: Integer): IDispatch; dispid 1610678274;
    function GetAlertList(NeedRefresh: WordBool): IList; dispid 1610678275;
    function HasAlerts: WordBool; dispid 1610678276;
    function HasNewAlerts: WordBool; dispid 1610678277;
  end;

// *********************************************************************//
// Interface: IFollowUpManager
// Flags:     (320) Dual OleAutomation
// GUID:      {6EE10992-2569-4838-86DA-DAE1E1240E79}
// *********************************************************************//
  IFollowUpManager = interface(IUnknown)
    ['{6EE10992-2569-4838-86DA-DAE1E1240E79}']
    procedure GetFollowUp(out FollowUpDate: TDateTime; out Description: WideString); safecall;
    procedure SetFollowUp(FollowUpDate: TDateTime; const Description: WideString); safecall;
    procedure CancelFollowUp; safecall;
    function HasFollowUp: WordBool; safecall;
    function IsFollowUpOverdue: WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IFollowUpManagerDisp
// Flags:     (320) Dual OleAutomation
// GUID:      {6EE10992-2569-4838-86DA-DAE1E1240E79}
// *********************************************************************//
  IFollowUpManagerDisp = dispinterface
    ['{6EE10992-2569-4838-86DA-DAE1E1240E79}']
    procedure GetFollowUp(out FollowUpDate: TDateTime; out Description: WideString); dispid 1610678272;
    procedure SetFollowUp(FollowUpDate: TDateTime; const Description: WideString); dispid 1610678273;
    procedure CancelFollowUp; dispid 1610678274;
    function HasFollowUp: WordBool; dispid 1610678275;
    function IsFollowUpOverdue: WordBool; dispid 1610678276;
  end;

// *********************************************************************//
// Interface: ILinkable
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9B1CCF47-8DC6-4B9D-AC24-35DD3361A175}
// *********************************************************************//
  ILinkable = interface(IDispatch)
    ['{9B1CCF47-8DC6-4B9D-AC24-35DD3361A175}']
    function Get_BugLinkFactory: IDispatch; safecall;
    function Get_LinkFactory: IDispatch; safecall;
    function Get_HasLinkage: WordBool; safecall;
    function Get_HasOthersLinkage: WordBool; safecall;
    property BugLinkFactory: IDispatch read Get_BugLinkFactory;
    property LinkFactory: IDispatch read Get_LinkFactory;
    property HasLinkage: WordBool read Get_HasLinkage;
    property HasOthersLinkage: WordBool read Get_HasOthersLinkage;
  end;

// *********************************************************************//
// DispIntf:  ILinkableDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9B1CCF47-8DC6-4B9D-AC24-35DD3361A175}
// *********************************************************************//
  ILinkableDisp = dispinterface
    ['{9B1CCF47-8DC6-4B9D-AC24-35DD3361A175}']
    property BugLinkFactory: IDispatch readonly dispid 1;
    property LinkFactory: IDispatch readonly dispid 2;
    property HasLinkage: WordBool readonly dispid 3;
    property HasOthersLinkage: WordBool readonly dispid 4;
  end;

// *********************************************************************//
// Interface: ICoverable
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C5DF6450-F927-425A-A293-3A5CF0EBE56D}
// *********************************************************************//
  ICoverable = interface(IDispatch)
    ['{C5DF6450-F927-425A-A293-3A5CF0EBE56D}']
    function Get_CoverageFactory: IDispatch; safecall;
    procedure CoverRequirementEx(Req: OleVariant; const RequirementFilter: WideString; 
                                 Recursive: WordBool); safecall;
    property CoverageFactory: IDispatch read Get_CoverageFactory;
  end;

// *********************************************************************//
// DispIntf:  ICoverableDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C5DF6450-F927-425A-A293-3A5CF0EBE56D}
// *********************************************************************//
  ICoverableDisp = dispinterface
    ['{C5DF6450-F927-425A-A293-3A5CF0EBE56D}']
    property CoverageFactory: IDispatch readonly dispid 1;
    procedure CoverRequirementEx(Req: OleVariant; const RequirementFilter: WideString; 
                                 Recursive: WordBool); dispid 2;
  end;

// *********************************************************************//
// Interface: IDesignStep
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E04B8E16-1118-4D05-90CE-3DCC39633158}
// *********************************************************************//
  IDesignStep = interface(IBaseFieldEx)
    ['{E04B8E16-1118-4D05-90CE-3DCC39633158}']
    function Get_StepName: WideString; safecall;
    procedure Set_StepName(const pVal: WideString); safecall;
    function Get_StepDescription: WideString; safecall;
    procedure Set_StepDescription(const pVal: WideString); safecall;
    function Get_StepExpectedResult: WideString; safecall;
    procedure Set_StepExpectedResult(const pVal: WideString); safecall;
    function Get_Order: Integer; safecall;
    procedure Set_Order(pVal: Integer); safecall;
    function Get_LinkTest: OleVariant; safecall;
    procedure Set_LinkTest(pVal: OleVariant); safecall;
    function Get_LinkedParams: IDispatch; safecall;
    function Get_LinkTestID: Integer; safecall;
    function Get_EvaluatedStepDescription: WideString; safecall;
    function Get_EvaluatedStepExpectedResult: WideString; safecall;
    function Get_ParentTest: IDispatch; safecall;
    property StepName: WideString read Get_StepName write Set_StepName;
    property StepDescription: WideString read Get_StepDescription write Set_StepDescription;
    property StepExpectedResult: WideString read Get_StepExpectedResult write Set_StepExpectedResult;
    property Order: Integer read Get_Order write Set_Order;
    property LinkTest: OleVariant read Get_LinkTest write Set_LinkTest;
    property LinkedParams: IDispatch read Get_LinkedParams;
    property LinkTestID: Integer read Get_LinkTestID;
    property EvaluatedStepDescription: WideString read Get_EvaluatedStepDescription;
    property EvaluatedStepExpectedResult: WideString read Get_EvaluatedStepExpectedResult;
    property ParentTest: IDispatch read Get_ParentTest;
  end;

// *********************************************************************//
// DispIntf:  IDesignStepDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E04B8E16-1118-4D05-90CE-3DCC39633158}
// *********************************************************************//
  IDesignStepDisp = dispinterface
    ['{E04B8E16-1118-4D05-90CE-3DCC39633158}']
    property StepName: WideString dispid 14;
    property StepDescription: WideString dispid 15;
    property StepExpectedResult: WideString dispid 16;
    property Order: Integer dispid 17;
    property LinkTest: OleVariant dispid 18;
    property LinkedParams: IDispatch readonly dispid 19;
    property LinkTestID: Integer readonly dispid 20;
    property EvaluatedStepDescription: WideString readonly dispid 21;
    property EvaluatedStepExpectedResult: WideString readonly dispid 22;
    property ParentTest: IDispatch readonly dispid 23;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IBug
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2AF970F7-6CCC-4DFB-AA78-08F689481F94}
// *********************************************************************//
  IBug = interface(IBaseFieldExMail)
    ['{2AF970F7-6CCC-4DFB-AA78-08F689481F94}']
    function Get_Status: WideString; safecall;
    procedure Set_Status(const pVal: WideString); safecall;
    function Get_Project: WideString; safecall;
    procedure Set_Project(const pVal: WideString); safecall;
    function Get_Summary: WideString; safecall;
    procedure Set_Summary(const pVal: WideString); safecall;
    function Get_Priority: WideString; safecall;
    procedure Set_Priority(const pVal: WideString); safecall;
    function Get_DetectedBy: WideString; safecall;
    procedure Set_DetectedBy(const pVal: WideString); safecall;
    function Get_AssignedTo: WideString; safecall;
    procedure Set_AssignedTo(const pVal: WideString); safecall;
    function FindSimilarBugs(SimilarityRatio: Integer): IList; safecall;
    function Get_HasChange: WordBool; safecall;
    function Get_ChangeLinks: IList; safecall;
    property Status: WideString read Get_Status write Set_Status;
    property Project: WideString read Get_Project write Set_Project;
    property Summary: WideString read Get_Summary write Set_Summary;
    property Priority: WideString read Get_Priority write Set_Priority;
    property DetectedBy: WideString read Get_DetectedBy write Set_DetectedBy;
    property AssignedTo: WideString read Get_AssignedTo write Set_AssignedTo;
    property HasChange: WordBool read Get_HasChange;
    property ChangeLinks: IList read Get_ChangeLinks;
  end;

// *********************************************************************//
// DispIntf:  IBugDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2AF970F7-6CCC-4DFB-AA78-08F689481F94}
// *********************************************************************//
  IBugDisp = dispinterface
    ['{2AF970F7-6CCC-4DFB-AA78-08F689481F94}']
    property Status: WideString dispid 15;
    property Project: WideString dispid 16;
    property Summary: WideString dispid 17;
    property Priority: WideString dispid 18;
    property DetectedBy: WideString dispid 19;
    property AssignedTo: WideString dispid 20;
    function FindSimilarBugs(SimilarityRatio: Integer): IList; dispid 21;
    property HasChange: WordBool readonly dispid 22;
    property ChangeLinks: IList readonly dispid 23;
    procedure Mail(const SendTo: WideString; const SendCc: WideString; Option: Integer; 
                   const Subject: WideString; const Comment: WideString); dispid 14;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: ITestSet
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5BBB5891-F832-497C-BE92-76A242809E67}
// *********************************************************************//
  ITestSet = interface(IBaseFieldEx)
    ['{5BBB5891-F832-497C-BE92-76A242809E67}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    function Get_Status: WideString; safecall;
    procedure Set_Status(const pVal: WideString); safecall;
    function Get_TSTestFactory: IDispatch; safecall;
    function Get_ConditionFactory: IDispatch; safecall;
    function BuildSummaryGraph(const XAxisField: WideString; const GroupByField: WideString; 
                               const SumOfField: WideString; MaxCols: Integer; Filter: OleVariant; 
                               ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; safecall;
    function BuildProgressGraph(const GroupByField: WideString; const SumOfField: WideString; 
                                MajorSkip: Integer; MinorSkip: Integer; MaxCols: Integer; 
                                Filter: OleVariant; FRDate: OleVariant; ForceRefresh: WordBool; 
                                ShowFullPath: WordBool): IDispatch; safecall;
    function StartExecution(const ServerName: WideString): IDispatch; safecall;
    procedure PurgeExecutions; safecall;
    function Get_ExecEventNotifyByMailSettings: IDispatch; safecall;
    function Get_ExecutionSettings: IDispatch; safecall;
    function Get_TestDefaultExecutionSettings: IDispatch; safecall;
    function BuildTrendGraph(const GroupByField: WideString; const SumOfField: WideString; 
                             MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                             ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; safecall;
    function BuildPerfGraph(const GroupByField: WideString; const SumOfField: WideString; 
                            MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                            ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; safecall;
    procedure ResetTestSet(DeleteRuns: WordBool); safecall;
    function CheckTestInstances(const TestIDs: WideString): WideString; safecall;
    function BuildProgressGraphEx(const GroupByField: WideString; const SumOfField: WideString; 
                                  ByHistory: WordBool; MajorSkip: Integer; MinorSkip: Integer; 
                                  MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                                  ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; safecall;
    function Get_TestSetFolder: IDispatch; safecall;
    procedure Set_TestSetFolder(pNode: OleVariant); safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Status: WideString read Get_Status write Set_Status;
    property TSTestFactory: IDispatch read Get_TSTestFactory;
    property ConditionFactory: IDispatch read Get_ConditionFactory;
    property ExecEventNotifyByMailSettings: IDispatch read Get_ExecEventNotifyByMailSettings;
    property ExecutionSettings: IDispatch read Get_ExecutionSettings;
    property TestDefaultExecutionSettings: IDispatch read Get_TestDefaultExecutionSettings;
  end;

// *********************************************************************//
// DispIntf:  ITestSetDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5BBB5891-F832-497C-BE92-76A242809E67}
// *********************************************************************//
  ITestSetDisp = dispinterface
    ['{5BBB5891-F832-497C-BE92-76A242809E67}']
    property Name: WideString dispid 14;
    property Status: WideString dispid 15;
    property TSTestFactory: IDispatch readonly dispid 16;
    property ConditionFactory: IDispatch readonly dispid 17;
    function BuildSummaryGraph(const XAxisField: WideString; const GroupByField: WideString; 
                               const SumOfField: WideString; MaxCols: Integer; Filter: OleVariant; 
                               ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 18;
    function BuildProgressGraph(const GroupByField: WideString; const SumOfField: WideString; 
                                MajorSkip: Integer; MinorSkip: Integer; MaxCols: Integer; 
                                Filter: OleVariant; FRDate: OleVariant; ForceRefresh: WordBool; 
                                ShowFullPath: WordBool): IDispatch; dispid 19;
    function StartExecution(const ServerName: WideString): IDispatch; dispid 20;
    procedure PurgeExecutions; dispid 21;
    property ExecEventNotifyByMailSettings: IDispatch readonly dispid 22;
    property ExecutionSettings: IDispatch readonly dispid 23;
    property TestDefaultExecutionSettings: IDispatch readonly dispid 24;
    function BuildTrendGraph(const GroupByField: WideString; const SumOfField: WideString; 
                             MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                             ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 25;
    function BuildPerfGraph(const GroupByField: WideString; const SumOfField: WideString; 
                            MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                            ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 26;
    procedure ResetTestSet(DeleteRuns: WordBool); dispid 27;
    function CheckTestInstances(const TestIDs: WideString): WideString; dispid 28;
    function BuildProgressGraphEx(const GroupByField: WideString; const SumOfField: WideString; 
                                  ByHistory: WordBool; MajorSkip: Integer; MinorSkip: Integer; 
                                  MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                                  ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 29;
    function TestSetFolder: IDispatch; dispid 30;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IRunFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {682F76CF-D479-4A34-AD8F-108F6B6C23DB}
// *********************************************************************//
  IRunFactory = interface(IBaseFactory)
    ['{682F76CF-D479-4A34-AD8F-108F6B6C23DB}']
    function Get_UniqueRunName: WideString; safecall;
    procedure DeleteDuplicateRuns(const RunName: WideString); safecall;
    property UniqueRunName: WideString read Get_UniqueRunName;
  end;

// *********************************************************************//
// DispIntf:  IRunFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {682F76CF-D479-4A34-AD8F-108F6B6C23DB}
// *********************************************************************//
  IRunFactoryDisp = dispinterface
    ['{682F76CF-D479-4A34-AD8F-108F6B6C23DB}']
    property UniqueRunName: WideString readonly dispid 8;
    procedure DeleteDuplicateRuns(const RunName: WideString); dispid 9;
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: IRun
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {34023178-4154-4B16-80A4-6C610096648A}
// *********************************************************************//
  IRun = interface(IBaseFieldEx)
    ['{34023178-4154-4B16-80A4-6C610096648A}']
    function Get_ResultLocation: WideString; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    function Get_Status: WideString; safecall;
    procedure Set_Status(const pVal: WideString); safecall;
    function Get_StepFactory: IDispatch; safecall;
    function Get_TestId: Integer; safecall;
    function Get_ExtendedStorage: IDispatch; safecall;
    procedure CopyDesignSteps; safecall;
    procedure CopyStepsToTest; safecall;
    function Get_TestSetID: Integer; safecall;
    function Get_Params(SourceMode: Integer): IDispatch; safecall;
    procedure ResolveStepsParameters(UpdateLocalCache: WordBool); safecall;
    function Get_TestInstance: Integer; safecall;
    procedure CancelRun; safecall;
    property ResultLocation: WideString read Get_ResultLocation;
    property Name: WideString read Get_Name write Set_Name;
    property Status: WideString read Get_Status write Set_Status;
    property StepFactory: IDispatch read Get_StepFactory;
    property TestId: Integer read Get_TestId;
    property ExtendedStorage: IDispatch read Get_ExtendedStorage;
    property TestSetID: Integer read Get_TestSetID;
    property Params[SourceMode: Integer]: IDispatch read Get_Params;
    property TestInstance: Integer read Get_TestInstance;
  end;

// *********************************************************************//
// DispIntf:  IRunDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {34023178-4154-4B16-80A4-6C610096648A}
// *********************************************************************//
  IRunDisp = dispinterface
    ['{34023178-4154-4B16-80A4-6C610096648A}']
    property ResultLocation: WideString readonly dispid 14;
    property Name: WideString dispid 15;
    property Status: WideString dispid 16;
    property StepFactory: IDispatch readonly dispid 17;
    property TestId: Integer readonly dispid 18;
    property ExtendedStorage: IDispatch readonly dispid 19;
    procedure CopyDesignSteps; dispid 20;
    procedure CopyStepsToTest; dispid 21;
    property TestSetID: Integer readonly dispid 22;
    property Params[SourceMode: Integer]: IDispatch readonly dispid 23;
    procedure ResolveStepsParameters(UpdateLocalCache: WordBool); dispid 24;
    property TestInstance: Integer readonly dispid 25;
    procedure CancelRun; dispid 26;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IRun2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {16EF2BF4-8509-475E-B34E-3BF99C221221}
// *********************************************************************//
  IRun2 = interface(IRun)
    ['{16EF2BF4-8509-475E-B34E-3BF99C221221}']
    function Get_BPStepParamFactory: IDispatch; safecall;
    function Get_TestInstanceID: Integer; safecall;
    property BPStepParamFactory: IDispatch read Get_BPStepParamFactory;
    property TestInstanceID: Integer read Get_TestInstanceID;
  end;

// *********************************************************************//
// DispIntf:  IRun2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {16EF2BF4-8509-475E-B34E-3BF99C221221}
// *********************************************************************//
  IRun2Disp = dispinterface
    ['{16EF2BF4-8509-475E-B34E-3BF99C221221}']
    property BPStepParamFactory: IDispatch readonly dispid 27;
    property TestInstanceID: Integer readonly dispid 28;
    property ResultLocation: WideString readonly dispid 14;
    property Name: WideString dispid 15;
    property Status: WideString dispid 16;
    property StepFactory: IDispatch readonly dispid 17;
    property TestId: Integer readonly dispid 18;
    property ExtendedStorage: IDispatch readonly dispid 19;
    procedure CopyDesignSteps; dispid 20;
    procedure CopyStepsToTest; dispid 21;
    property TestSetID: Integer readonly dispid 22;
    property Params[SourceMode: Integer]: IDispatch readonly dispid 23;
    procedure ResolveStepsParameters(UpdateLocalCache: WordBool); dispid 24;
    property TestInstance: Integer readonly dispid 25;
    procedure CancelRun; dispid 26;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IStep
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {992BABA3-6360-4BD1-A337-B75F67BDB417}
// *********************************************************************//
  IStep = interface(IBaseFieldEx)
    ['{992BABA3-6360-4BD1-A337-B75F67BDB417}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    function Get_Status: WideString; safecall;
    procedure Set_Status(const pVal: WideString); safecall;
    procedure Set_CreationMode(Param1: Smallint); safecall;
    function Get_TestSource: Integer; safecall;
    function Get_DesignStepSource: Integer; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Status: WideString read Get_Status write Set_Status;
    property CreationMode: Smallint write Set_CreationMode;
    property TestSource: Integer read Get_TestSource;
    property DesignStepSource: Integer read Get_DesignStepSource;
  end;

// *********************************************************************//
// DispIntf:  IStepDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {992BABA3-6360-4BD1-A337-B75F67BDB417}
// *********************************************************************//
  IStepDisp = dispinterface
    ['{992BABA3-6360-4BD1-A337-B75F67BDB417}']
    property Name: WideString dispid 14;
    property Status: WideString dispid 15;
    property CreationMode: Smallint writeonly dispid 16;
    property TestSource: Integer readonly dispid 17;
    property DesignStepSource: Integer readonly dispid 18;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IStep2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5FF530DD-245E-4F97-A59F-3DE69FFCC55E}
// *********************************************************************//
  IStep2 = interface(IStep)
    ['{5FF530DD-245E-4F97-A59F-3DE69FFCC55E}']
    function Get_BPStepParamFactory: IDispatch; safecall;
    function Get_Run: IDispatch; safecall;
    property BPStepParamFactory: IDispatch read Get_BPStepParamFactory;
    property Run: IDispatch read Get_Run;
  end;

// *********************************************************************//
// DispIntf:  IStep2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5FF530DD-245E-4F97-A59F-3DE69FFCC55E}
// *********************************************************************//
  IStep2Disp = dispinterface
    ['{5FF530DD-245E-4F97-A59F-3DE69FFCC55E}']
    property BPStepParamFactory: IDispatch readonly dispid 19;
    property Run: IDispatch readonly dispid 20;
    property Name: WideString dispid 14;
    property Status: WideString dispid 15;
    property CreationMode: Smallint writeonly dispid 16;
    property TestSource: Integer readonly dispid 17;
    property DesignStepSource: Integer readonly dispid 18;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IHostGroupFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FA8C3437-3B5B-4246-B775-523DEEB2734A}
// *********************************************************************//
  IHostGroupFactory = interface(IBaseFactory)
    ['{FA8C3437-3B5B-4246-B775-523DEEB2734A}']
    procedure RemoveHost(Host: OleVariant); safecall;
  end;

// *********************************************************************//
// DispIntf:  IHostGroupFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FA8C3437-3B5B-4246-B775-523DEEB2734A}
// *********************************************************************//
  IHostGroupFactoryDisp = dispinterface
    ['{FA8C3437-3B5B-4246-B775-523DEEB2734A}']
    procedure RemoveHost(Host: OleVariant); dispid 8;
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: IHostGroup
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B3468A97-FD4C-4A05-9E49-1FD0ED7FD9E2}
// *********************************************************************//
  IHostGroup = interface(IBaseFieldEx)
    ['{B3468A97-FD4C-4A05-9E49-1FD0ED7FD9E2}']
    function Get_Name: WideString; safecall;
    procedure AddHost(Val: OleVariant); safecall;
    procedure RemoveHost(Val: OleVariant); safecall;
    function NewList: IList; safecall;
    property Name: WideString read Get_Name;
  end;

// *********************************************************************//
// DispIntf:  IHostGroupDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B3468A97-FD4C-4A05-9E49-1FD0ED7FD9E2}
// *********************************************************************//
  IHostGroupDisp = dispinterface
    ['{B3468A97-FD4C-4A05-9E49-1FD0ED7FD9E2}']
    property Name: WideString readonly dispid 14;
    procedure AddHost(Val: OleVariant); dispid 15;
    procedure RemoveHost(Val: OleVariant); dispid 16;
    function NewList: IList; dispid 17;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IHost
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F90E8FE5-EC4E-4EBA-8A81-32BCCEE3AB94}
// *********************************************************************//
  IHost = interface(IBaseField)
    ['{F90E8FE5-EC4E-4EBA-8A81-32BCCEE3AB94}']
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pVal: WideString); safecall;
    function Get_RexServer: WideString; safecall;
    function Get_Name: WideString; safecall;
    property Description: WideString read Get_Description write Set_Description;
    property RexServer: WideString read Get_RexServer;
    property Name: WideString read Get_Name;
  end;

// *********************************************************************//
// DispIntf:  IHostDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F90E8FE5-EC4E-4EBA-8A81-32BCCEE3AB94}
// *********************************************************************//
  IHostDisp = dispinterface
    ['{F90E8FE5-EC4E-4EBA-8A81-32BCCEE3AB94}']
    property Description: WideString dispid 11;
    property RexServer: WideString readonly dispid 12;
    property Name: WideString readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: ITSTest
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FFE8FF09-7522-448E-933E-724B6A149887}
// *********************************************************************//
  ITSTest = interface(IBaseFieldEx)
    ['{FFE8FF09-7522-448E-933E-724B6A149887}']
    function Get_Status: WideString; safecall;
    procedure Set_Status(const pVal: WideString); safecall;
    function Get_RunFactory: IDispatch; safecall;
    function Get_Test: IDispatch; safecall;
    function Get_HostName: WideString; safecall;
    procedure Set_HostName(const pVal: WideString); safecall;
    function Get_Name: WideString; safecall;
    function Get_type_: WideString; safecall;
    function Get_HasSteps: WordBool; safecall;
    function Get_ExecutionParams: WideString; safecall;
    procedure Set_ExecutionParams(const pVal: WideString); safecall;
    function Get_LastRun: IDispatch; safecall;
    function Get_Params: IDispatch; safecall;
    function Get_ExecutionSettings: IDispatch; safecall;
    function Get_TestId: OleVariant; safecall;
    function Get_Instance: Integer; safecall;
    function Get_TestName: WideString; safecall;
    function Get_TestSet: IDispatch; safecall;
    property Status: WideString read Get_Status write Set_Status;
    property RunFactory: IDispatch read Get_RunFactory;
    property Test: IDispatch read Get_Test;
    property HostName: WideString read Get_HostName write Set_HostName;
    property Name: WideString read Get_Name;
    property type_: WideString read Get_type_;
    property HasSteps: WordBool read Get_HasSteps;
    property ExecutionParams: WideString read Get_ExecutionParams write Set_ExecutionParams;
    property LastRun: IDispatch read Get_LastRun;
    property Params: IDispatch read Get_Params;
    property ExecutionSettings: IDispatch read Get_ExecutionSettings;
    property TestId: OleVariant read Get_TestId;
    property Instance: Integer read Get_Instance;
    property TestName: WideString read Get_TestName;
    property TestSet: IDispatch read Get_TestSet;
  end;

// *********************************************************************//
// DispIntf:  ITSTestDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FFE8FF09-7522-448E-933E-724B6A149887}
// *********************************************************************//
  ITSTestDisp = dispinterface
    ['{FFE8FF09-7522-448E-933E-724B6A149887}']
    property Status: WideString dispid 14;
    property RunFactory: IDispatch readonly dispid 15;
    property Test: IDispatch readonly dispid 16;
    property HostName: WideString dispid 17;
    property Name: WideString readonly dispid 18;
    property type_: WideString readonly dispid 19;
    property HasSteps: WordBool readonly dispid 20;
    property ExecutionParams: WideString dispid 21;
    property LastRun: IDispatch readonly dispid 22;
    property Params: IDispatch readonly dispid 23;
    property ExecutionSettings: IDispatch readonly dispid 24;
    property TestId: OleVariant readonly dispid 25;
    property Instance: Integer readonly dispid 26;
    property TestName: WideString readonly dispid 27;
    property TestSet: IDispatch readonly dispid 28;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: ITSTest2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {133B9314-9A98-4659-866D-4BA8DCD4A643}
// *********************************************************************//
  ITSTest2 = interface(ITSTest)
    ['{133B9314-9A98-4659-866D-4BA8DCD4A643}']
    function Get_HasCoverage: WordBool; safecall;
    property HasCoverage: WordBool read Get_HasCoverage;
  end;

// *********************************************************************//
// DispIntf:  ITSTest2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {133B9314-9A98-4659-866D-4BA8DCD4A643}
// *********************************************************************//
  ITSTest2Disp = dispinterface
    ['{133B9314-9A98-4659-866D-4BA8DCD4A643}']
    property HasCoverage: WordBool readonly dispid 29;
    property Status: WideString dispid 14;
    property RunFactory: IDispatch readonly dispid 15;
    property Test: IDispatch readonly dispid 16;
    property HostName: WideString dispid 17;
    property Name: WideString readonly dispid 18;
    property type_: WideString readonly dispid 19;
    property HasSteps: WordBool readonly dispid 20;
    property ExecutionParams: WideString dispid 21;
    property LastRun: IDispatch readonly dispid 22;
    property Params: IDispatch readonly dispid 23;
    property ExecutionSettings: IDispatch readonly dispid 24;
    property TestId: OleVariant readonly dispid 25;
    property Instance: Integer readonly dispid 26;
    property TestName: WideString readonly dispid 27;
    property TestSet: IDispatch readonly dispid 28;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IConditionFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8C63633A-6537-41B5-93A3-982823DE8689}
// *********************************************************************//
  IConditionFactory = interface(IBaseFactory)
    ['{8C63633A-6537-41B5-93A3-982823DE8689}']
    procedure Save; safecall;
  end;

// *********************************************************************//
// DispIntf:  IConditionFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8C63633A-6537-41B5-93A3-982823DE8689}
// *********************************************************************//
  IConditionFactoryDisp = dispinterface
    ['{8C63633A-6537-41B5-93A3-982823DE8689}']
    procedure Save; dispid 8;
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: ICondition
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8A01DC68-2D34-4CB2-81D7-968F37C50715}
// *********************************************************************//
  ICondition = interface(IDispatch)
    ['{8A01DC68-2D34-4CB2-81D7-968F37C50715}']
    function Get_Value: OleVariant; safecall;
    procedure Set_Value(pVal: OleVariant); safecall;
    function Get_type_: Smallint; safecall;
    function Get_Source: OleVariant; safecall;
    function Get_Target: OleVariant; safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pVal: WideString); safecall;
    function Get_ID: OleVariant; safecall;
    function Get_SourceInstance: OleVariant; safecall;
    function Get_TargetInstance: OleVariant; safecall;
    function Get_SourceTestId: OleVariant; safecall;
    function Get_TargetTestId: OleVariant; safecall;
    property Value: OleVariant read Get_Value write Set_Value;
    property type_: Smallint read Get_type_;
    property Source: OleVariant read Get_Source;
    property Target: OleVariant read Get_Target;
    property Description: WideString read Get_Description write Set_Description;
    property ID: OleVariant read Get_ID;
    property SourceInstance: OleVariant read Get_SourceInstance;
    property TargetInstance: OleVariant read Get_TargetInstance;
    property SourceTestId: OleVariant read Get_SourceTestId;
    property TargetTestId: OleVariant read Get_TargetTestId;
  end;

// *********************************************************************//
// DispIntf:  IConditionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8A01DC68-2D34-4CB2-81D7-968F37C50715}
// *********************************************************************//
  IConditionDisp = dispinterface
    ['{8A01DC68-2D34-4CB2-81D7-968F37C50715}']
    property Value: OleVariant dispid 0;
    property type_: Smallint readonly dispid 1;
    property Source: OleVariant readonly dispid 2;
    property Target: OleVariant readonly dispid 3;
    property Description: WideString dispid 4;
    property ID: OleVariant readonly dispid 5;
    property SourceInstance: OleVariant readonly dispid 6;
    property TargetInstance: OleVariant readonly dispid 7;
    property SourceTestId: OleVariant readonly dispid 8;
    property TargetTestId: OleVariant readonly dispid 9;
  end;

// *********************************************************************//
// Interface: IParam
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AE1410CC-D940-4356-A926-6DF6C1F45AED}
// *********************************************************************//
  IParam = interface(IDispatch)
    ['{AE1410CC-D940-4356-A926-6DF6C1F45AED}']
    function Get_Count: Integer; safecall;
    function Get_ParamValue(Key: OleVariant): OleVariant; safecall;
    procedure Set_ParamValue(Key: OleVariant; pVal: OleVariant); safecall;
    function Get_ParamName(Index: Integer): WideString; safecall;
    function Get_ParamIndex(const Name: WideString): Integer; safecall;
    procedure AddParam(const Name: WideString; InitialValue: OleVariant); safecall;
    procedure DeleteParam(Key: OleVariant); safecall;
    procedure DeleteParams; safecall;
    function Get_ParamType(Index: Integer): Integer; safecall;
    property Count: Integer read Get_Count;
    property ParamValue[Key: OleVariant]: OleVariant read Get_ParamValue write Set_ParamValue;
    property ParamName[Index: Integer]: WideString read Get_ParamName;
    property ParamIndex[const Name: WideString]: Integer read Get_ParamIndex;
    property ParamType[Index: Integer]: Integer read Get_ParamType;
  end;

// *********************************************************************//
// DispIntf:  IParamDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AE1410CC-D940-4356-A926-6DF6C1F45AED}
// *********************************************************************//
  IParamDisp = dispinterface
    ['{AE1410CC-D940-4356-A926-6DF6C1F45AED}']
    property Count: Integer readonly dispid 1;
    property ParamValue[Key: OleVariant]: OleVariant dispid 2;
    property ParamName[Index: Integer]: WideString readonly dispid 3;
    property ParamIndex[const Name: WideString]: Integer readonly dispid 4;
    procedure AddParam(const Name: WideString; InitialValue: OleVariant); dispid 5;
    procedure DeleteParam(Key: OleVariant); dispid 6;
    procedure DeleteParams; dispid 7;
    property ParamType[Index: Integer]: Integer readonly dispid 8;
  end;

// *********************************************************************//
// Interface: ICommand
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {35DE061D-B934-4DEB-9F53-6A376EB034DF}
// *********************************************************************//
  ICommand = interface(IParam)
    ['{35DE061D-B934-4DEB-9F53-6A376EB034DF}']
    function Get_CommandText: WideString; safecall;
    procedure Set_CommandText(const pVal: WideString); safecall;
    function Execute: IDispatch; safecall;
    function Get_IndexFields: WideString; safecall;
    procedure Set_IndexFields(const pVal: WideString); safecall;
    function Get_AffectedRows: Integer; safecall;
    property CommandText: WideString read Get_CommandText write Set_CommandText;
    property IndexFields: WideString read Get_IndexFields write Set_IndexFields;
    property AffectedRows: Integer read Get_AffectedRows;
  end;

// *********************************************************************//
// DispIntf:  ICommandDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {35DE061D-B934-4DEB-9F53-6A376EB034DF}
// *********************************************************************//
  ICommandDisp = dispinterface
    ['{35DE061D-B934-4DEB-9F53-6A376EB034DF}']
    property CommandText: WideString dispid 0;
    function Execute: IDispatch; dispid 9;
    property IndexFields: WideString dispid 10;
    property AffectedRows: Integer readonly dispid 11;
    property Count: Integer readonly dispid 1;
    property ParamValue[Key: OleVariant]: OleVariant dispid 2;
    property ParamName[Index: Integer]: WideString readonly dispid 3;
    property ParamIndex[const Name: WideString]: Integer readonly dispid 4;
    procedure AddParam(const Name: WideString; InitialValue: OleVariant); dispid 5;
    procedure DeleteParam(Key: OleVariant); dispid 6;
    procedure DeleteParams; dispid 7;
    property ParamType[Index: Integer]: Integer readonly dispid 8;
  end;

// *********************************************************************//
// Interface: ICommand2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F3D168E0-A5FD-4083-ADDF-1E64EE968E59}
// *********************************************************************//
  ICommand2 = interface(ICommand)
    ['{F3D168E0-A5FD-4083-ADDF-1E64EE968E59}']
    function ExecuteQuery(Limit: Integer; out pintTruncationStatus: SYSINT; synchronous: WordBool): IDispatch; safecall;
    procedure Cancel; safecall;
    function IsActionFinished(out ppRecordset: IDispatch; out pintTruncationStatus: SYSINT): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICommand2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F3D168E0-A5FD-4083-ADDF-1E64EE968E59}
// *********************************************************************//
  ICommand2Disp = dispinterface
    ['{F3D168E0-A5FD-4083-ADDF-1E64EE968E59}']
    function ExecuteQuery(Limit: Integer; out pintTruncationStatus: SYSINT; synchronous: WordBool): IDispatch; dispid 12;
    procedure Cancel; dispid 13;
    function IsActionFinished(out ppRecordset: IDispatch; out pintTruncationStatus: SYSINT): WordBool; dispid 14;
    property CommandText: WideString dispid 0;
    function Execute: IDispatch; dispid 9;
    property IndexFields: WideString dispid 10;
    property AffectedRows: Integer readonly dispid 11;
    property Count: Integer readonly dispid 1;
    property ParamValue[Key: OleVariant]: OleVariant dispid 2;
    property ParamName[Index: Integer]: WideString readonly dispid 3;
    property ParamIndex[const Name: WideString]: Integer readonly dispid 4;
    procedure AddParam(const Name: WideString; InitialValue: OleVariant); dispid 5;
    procedure DeleteParam(Key: OleVariant); dispid 6;
    procedure DeleteParams; dispid 7;
    property ParamType[Index: Integer]: Integer readonly dispid 8;
  end;

// *********************************************************************//
// Interface: IColumnInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0993EF6D-FAF3-42FF-BCF9-85BBB83753F6}
// *********************************************************************//
  IColumnInfo = interface(IDispatch)
    ['{0993EF6D-FAF3-42FF-BCF9-85BBB83753F6}']
    function Get_ColCount: Integer; safecall;
    function Get_ColSize(Index: Integer): Integer; safecall;
    function Get_ColType(Index: Integer): Integer; safecall;
    function Get_ColName(Index: Integer): WideString; safecall;
    function Get_ColIndex(const Name: WideString): Integer; safecall;
    property ColCount: Integer read Get_ColCount;
    property ColSize[Index: Integer]: Integer read Get_ColSize;
    property ColType[Index: Integer]: Integer read Get_ColType;
    property ColName[Index: Integer]: WideString read Get_ColName;
    property ColIndex[const Name: WideString]: Integer read Get_ColIndex;
  end;

// *********************************************************************//
// DispIntf:  IColumnInfoDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0993EF6D-FAF3-42FF-BCF9-85BBB83753F6}
// *********************************************************************//
  IColumnInfoDisp = dispinterface
    ['{0993EF6D-FAF3-42FF-BCF9-85BBB83753F6}']
    property ColCount: Integer readonly dispid 1;
    property ColSize[Index: Integer]: Integer readonly dispid 2;
    property ColType[Index: Integer]: Integer readonly dispid 3;
    property ColName[Index: Integer]: WideString readonly dispid 4;
    property ColIndex[const Name: WideString]: Integer readonly dispid 5;
  end;

// *********************************************************************//
// Interface: IRecordset
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {025854DA-9D81-40E8-853D-F4EA33073A77}
// *********************************************************************//
  IRecordset = interface(IColumnInfo)
    ['{025854DA-9D81-40E8-853D-F4EA33073A77}']
    function Get_FieldValue(FieldKey: OleVariant): OleVariant; safecall;
    procedure Set_FieldValue(FieldKey: OleVariant; pVal: OleVariant); safecall;
    function Get_RecordCount: Integer; safecall;
    function Get_BOR: WordBool; safecall;
    function Get_EOR: WordBool; safecall;
    function Get_CacheSize: Integer; safecall;
    procedure Set_CacheSize(pVal: Integer); safecall;
    function Get_Position: Integer; safecall;
    procedure Set_Position(pVal: Integer); safecall;
    procedure First; safecall;
    procedure Next; safecall;
    procedure Prev; safecall;
    procedure Last; safecall;
    function Clone: IDispatch; safecall;
    procedure Refresh(Range: Integer; Low: Integer; High: Integer); safecall;
    property FieldValue[FieldKey: OleVariant]: OleVariant read Get_FieldValue write Set_FieldValue; default;
    property RecordCount: Integer read Get_RecordCount;
    property BOR: WordBool read Get_BOR;
    property EOR: WordBool read Get_EOR;
    property CacheSize: Integer read Get_CacheSize write Set_CacheSize;
    property Position: Integer read Get_Position write Set_Position;
  end;

// *********************************************************************//
// DispIntf:  IRecordsetDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {025854DA-9D81-40E8-853D-F4EA33073A77}
// *********************************************************************//
  IRecordsetDisp = dispinterface
    ['{025854DA-9D81-40E8-853D-F4EA33073A77}']
    property FieldValue[FieldKey: OleVariant]: OleVariant dispid 0; default;
    property RecordCount: Integer readonly dispid 6;
    property BOR: WordBool readonly dispid 7;
    property EOR: WordBool readonly dispid 8;
    property CacheSize: Integer dispid 9;
    property Position: Integer dispid 10;
    procedure First; dispid 11;
    procedure Next; dispid 12;
    procedure Prev; dispid 13;
    procedure Last; dispid 14;
    function Clone: IDispatch; dispid 15;
    procedure Refresh(Range: Integer; Low: Integer; High: Integer); dispid 16;
    property ColCount: Integer readonly dispid 1;
    property ColSize[Index: Integer]: Integer readonly dispid 2;
    property ColType[Index: Integer]: Integer readonly dispid 3;
    property ColName[Index: Integer]: WideString readonly dispid 4;
    property ColIndex[const Name: WideString]: Integer readonly dispid 5;
  end;

// *********************************************************************//
// Interface: ITDFilter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {452897AD-D9F8-4EAE-80DB-B9C11807507F}
// *********************************************************************//
  ITDFilter = interface(IDispatch)
    ['{452897AD-D9F8-4EAE-80DB-B9C11807507F}']
    function Get__Text: WideString; safecall;
    procedure Set__Text(const pVal: WideString); safecall;
    function Get_Filter(const FieldName: WideString): WideString; safecall;
    procedure Set_Filter(const FieldName: WideString; const pVal: WideString); safecall;
    function Get_Order(const FieldName: WideString): Integer; safecall;
    procedure Set_Order(const FieldName: WideString; pVal: Integer); safecall;
    function Get_OrderDirection(const FieldName: WideString): Smallint; safecall;
    procedure Set_OrderDirection(const FieldName: WideString; pVal: Smallint); safecall;
    procedure Clear; safecall;
    function NewList: IList; safecall;
    function Get_Fields: IList; safecall;
    procedure Refresh; safecall;
    function Get_CaseSensitive(const FieldName: WideString): WordBool; safecall;
    procedure Set_CaseSensitive(const FieldName: WideString; pVal: WordBool); safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const pVal: WideString); safecall;
    function Get_XFilter(const CrossEntity: WideString): WideString; safecall;
    procedure Set_XFilter(const CrossEntity: WideString; const pVal: WideString); safecall;
    function Get_UFilter(const EntityType: WideString): WideString; safecall;
    procedure Set_UFilter(const EntityType: WideString; const pVal: WideString); safecall;
    function Get_DataType: WideString; safecall;
    property _Text: WideString read Get__Text write Set__Text;
    property Filter[const FieldName: WideString]: WideString read Get_Filter write Set_Filter; default;
    property Order[const FieldName: WideString]: Integer read Get_Order write Set_Order;
    property OrderDirection[const FieldName: WideString]: Smallint read Get_OrderDirection write Set_OrderDirection;
    property Fields: IList read Get_Fields;
    property CaseSensitive[const FieldName: WideString]: WordBool read Get_CaseSensitive write Set_CaseSensitive;
    property Text: WideString read Get_Text write Set_Text;
    property XFilter[const CrossEntity: WideString]: WideString read Get_XFilter write Set_XFilter;
    property UFilter[const EntityType: WideString]: WideString read Get_UFilter write Set_UFilter;
    property DataType: WideString read Get_DataType;
  end;

// *********************************************************************//
// DispIntf:  ITDFilterDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {452897AD-D9F8-4EAE-80DB-B9C11807507F}
// *********************************************************************//
  ITDFilterDisp = dispinterface
    ['{452897AD-D9F8-4EAE-80DB-B9C11807507F}']
    property _Text: WideString dispid 12;
    property Filter[const FieldName: WideString]: WideString dispid 0; default;
    property Order[const FieldName: WideString]: Integer dispid 1;
    property OrderDirection[const FieldName: WideString]: Smallint dispid 2;
    procedure Clear; dispid 3;
    function NewList: IList; dispid 4;
    property Fields: IList readonly dispid 5;
    procedure Refresh; dispid 6;
    property CaseSensitive[const FieldName: WideString]: WordBool dispid 7;
    property Text: WideString dispid 8;
    property XFilter[const CrossEntity: WideString]: WideString dispid 9;
    property UFilter[const EntityType: WideString]: WideString dispid 10;
    property DataType: WideString readonly dispid 11;
  end;

// *********************************************************************//
// Interface: ITDFilter2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B14CE979-E8D8-426B-AFCF-B8AA9AFE267B}
// *********************************************************************//
  ITDFilter2 = interface(ITDFilter)
    ['{B14CE979-E8D8-426B-AFCF-B8AA9AFE267B}']
    procedure SetXFilter(const CrossEntities: WideString; Inclusive: WordBool; 
                         const FilterText: WideString); safecall;
    function GetXFilter(const CrossEntities: WideString; out Inclusive: WordBool): WideString; safecall;
    function IsClear: WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  ITDFilter2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B14CE979-E8D8-426B-AFCF-B8AA9AFE267B}
// *********************************************************************//
  ITDFilter2Disp = dispinterface
    ['{B14CE979-E8D8-426B-AFCF-B8AA9AFE267B}']
    procedure SetXFilter(const CrossEntities: WideString; Inclusive: WordBool; 
                         const FilterText: WideString); dispid 13;
    function GetXFilter(const CrossEntities: WideString; out Inclusive: WordBool): WideString; dispid 14;
    function IsClear: WordBool; dispid 15;
    property _Text: WideString dispid 12;
    property Filter[const FieldName: WideString]: WideString dispid 0; default;
    property Order[const FieldName: WideString]: Integer dispid 1;
    property OrderDirection[const FieldName: WideString]: Smallint dispid 2;
    procedure Clear; dispid 3;
    function NewList: IList; dispid 4;
    property Fields: IList readonly dispid 5;
    procedure Refresh; dispid 6;
    property CaseSensitive[const FieldName: WideString]: WordBool dispid 7;
    property Text: WideString dispid 8;
    property XFilter[const CrossEntity: WideString]: WideString dispid 9;
    property UFilter[const EntityType: WideString]: WideString dispid 10;
    property DataType: WideString readonly dispid 11;
  end;

// *********************************************************************//
// Interface: ISupportEntityTypes
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CAFABBC2-CE43-48CD-A6AC-2DBDA404C076}
// *********************************************************************//
  ISupportEntityTypes = interface(IDispatch)
    ['{CAFABBC2-CE43-48CD-A6AC-2DBDA404C076}']
    function GetTypedFields(const TypeId: WideString): IList; safecall;
    function IsFieldRelevantToType(const Field: WideString; const TypeId: WideString): WordBool; safecall;
    function IsFieldRequiredInType(const Field: WideString; const TypeId: WideString): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  ISupportEntityTypesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CAFABBC2-CE43-48CD-A6AC-2DBDA404C076}
// *********************************************************************//
  ISupportEntityTypesDisp = dispinterface
    ['{CAFABBC2-CE43-48CD-A6AC-2DBDA404C076}']
    function GetTypedFields(const TypeId: WideString): IList; dispid 1;
    function IsFieldRelevantToType(const Field: WideString; const TypeId: WideString): WordBool; dispid 2;
    function IsFieldRequiredInType(const Field: WideString; const TypeId: WideString): WordBool; dispid 3;
  end;

// *********************************************************************//
// Interface: IHierarchyFilter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BE140C38-7D92-4C50-8C1C-A4E43C0FC329}
// *********************************************************************//
  IHierarchyFilter = interface(ITDFilter2)
    ['{BE140C38-7D92-4C50-8C1C-A4E43C0FC329}']
    function Get_KeepHierarchical: WordBool; safecall;
    procedure Set_KeepHierarchical(pVal: WordBool); safecall;
    property KeepHierarchical: WordBool read Get_KeepHierarchical write Set_KeepHierarchical;
  end;

// *********************************************************************//
// DispIntf:  IHierarchyFilterDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BE140C38-7D92-4C50-8C1C-A4E43C0FC329}
// *********************************************************************//
  IHierarchyFilterDisp = dispinterface
    ['{BE140C38-7D92-4C50-8C1C-A4E43C0FC329}']
    property KeepHierarchical: WordBool dispid 16;
    procedure SetXFilter(const CrossEntities: WideString; Inclusive: WordBool; 
                         const FilterText: WideString); dispid 13;
    function GetXFilter(const CrossEntities: WideString; out Inclusive: WordBool): WideString; dispid 14;
    function IsClear: WordBool; dispid 15;
    property _Text: WideString dispid 12;
    property Filter[const FieldName: WideString]: WideString dispid 0; default;
    property Order[const FieldName: WideString]: Integer dispid 1;
    property OrderDirection[const FieldName: WideString]: Smallint dispid 2;
    procedure Clear; dispid 3;
    function NewList: IList; dispid 4;
    property Fields: IList readonly dispid 5;
    procedure Refresh; dispid 6;
    property CaseSensitive[const FieldName: WideString]: WordBool dispid 7;
    property Text: WideString dispid 8;
    property XFilter[const CrossEntity: WideString]: WideString dispid 9;
    property UFilter[const EntityType: WideString]: WideString dispid 10;
    property DataType: WideString readonly dispid 11;
  end;

// *********************************************************************//
// Interface: IHistory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {15FBB8D4-7034-413E-A8F0-1E03B7FA4F0B}
// *********************************************************************//
  IHistory = interface(IDispatch)
    ['{15FBB8D4-7034-413E-A8F0-1E03B7FA4F0B}']
    function NewList(const Filter: WideString): IList; safecall;
    function Get_Filter: IDispatch; safecall;
    procedure ClearHistory(const Filter: WideString); safecall;
    property Filter: IDispatch read Get_Filter;
  end;

// *********************************************************************//
// DispIntf:  IHistoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {15FBB8D4-7034-413E-A8F0-1E03B7FA4F0B}
// *********************************************************************//
  IHistoryDisp = dispinterface
    ['{15FBB8D4-7034-413E-A8F0-1E03B7FA4F0B}']
    function NewList(const Filter: WideString): IList; dispid 1;
    property Filter: IDispatch readonly dispid 2;
    procedure ClearHistory(const Filter: WideString); dispid 3;
  end;

// *********************************************************************//
// Interface: IHistoryRecord
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BCAE2958-39FA-4742-93B4-16D204CF67AB}
// *********************************************************************//
  IHistoryRecord = interface(IDispatch)
    ['{BCAE2958-39FA-4742-93B4-16D204CF67AB}']
    function Get_FieldName: WideString; safecall;
    function Get_ChangeDate: TDateTime; safecall;
    function Get_Changer: WideString; safecall;
    function Get_NewValue: OleVariant; safecall;
    function Get_ItemKey: OleVariant; safecall;
    property FieldName: WideString read Get_FieldName;
    property ChangeDate: TDateTime read Get_ChangeDate;
    property Changer: WideString read Get_Changer;
    property NewValue: OleVariant read Get_NewValue;
    property ItemKey: OleVariant read Get_ItemKey;
  end;

// *********************************************************************//
// DispIntf:  IHistoryRecordDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BCAE2958-39FA-4742-93B4-16D204CF67AB}
// *********************************************************************//
  IHistoryRecordDisp = dispinterface
    ['{BCAE2958-39FA-4742-93B4-16D204CF67AB}']
    property FieldName: WideString readonly dispid 1;
    property ChangeDate: TDateTime readonly dispid 2;
    property Changer: WideString readonly dispid 3;
    property NewValue: OleVariant readonly dispid 4;
    property ItemKey: OleVariant readonly dispid 5;
  end;

// *********************************************************************//
// Interface: IHistoryRecord2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E672B813-30DA-4429-97A7-A1616F0B7D2D}
// *********************************************************************//
  IHistoryRecord2 = interface(IHistoryRecord)
    ['{E672B813-30DA-4429-97A7-A1616F0B7D2D}']
    function Get_OldValue: OleVariant; safecall;
    property OldValue: OleVariant read Get_OldValue;
  end;

// *********************************************************************//
// DispIntf:  IHistoryRecord2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E672B813-30DA-4429-97A7-A1616F0B7D2D}
// *********************************************************************//
  IHistoryRecord2Disp = dispinterface
    ['{E672B813-30DA-4429-97A7-A1616F0B7D2D}']
    property OldValue: OleVariant readonly dispid 6;
    property FieldName: WideString readonly dispid 1;
    property ChangeDate: TDateTime readonly dispid 2;
    property Changer: WideString readonly dispid 3;
    property NewValue: OleVariant readonly dispid 4;
    property ItemKey: OleVariant readonly dispid 5;
  end;

// *********************************************************************//
// Interface: IAttachmentFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C691D4B4-3924-4488-B554-A7E08842C625}
// *********************************************************************//
  IAttachmentFactory = interface(IBaseFactory)
    ['{C691D4B4-3924-4488-B554-A7E08842C625}']
    function Get_AttachmentStorage: IDispatch; safecall;
    procedure FactoryProperties(out OwnerType: WideString; out OwnerKey: OleVariant); safecall;
    property AttachmentStorage: IDispatch read Get_AttachmentStorage;
  end;

// *********************************************************************//
// DispIntf:  IAttachmentFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C691D4B4-3924-4488-B554-A7E08842C625}
// *********************************************************************//
  IAttachmentFactoryDisp = dispinterface
    ['{C691D4B4-3924-4488-B554-A7E08842C625}']
    property AttachmentStorage: IDispatch readonly dispid 8;
    procedure FactoryProperties(out OwnerType: WideString; out OwnerKey: OleVariant); dispid 9;
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: IAttachment
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {613E9BF2-7888-438F-979F-D05DAB87B9C8}
// *********************************************************************//
  IAttachment = interface(IBaseField)
    ['{613E9BF2-7888-438F-979F-D05DAB87B9C8}']
    function Get_type_: Integer; safecall;
    procedure Set_type_(pVal: Integer); safecall;
    function Get_Name(ViewFormat: Integer): WideString; safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pVal: WideString); safecall;
    function Get_Data: OleVariant; safecall;
    function Get_FileName: WideString; safecall;
    procedure Set_FileName(const pVal: WideString); safecall;
    procedure Load(synchronize: WordBool; var RootPath: WideString); safecall;
    procedure Save(synchronize: WordBool); safecall;
    function Get_AttachmentStorage: IDispatch; safecall;
    function Get_DirectLink: WideString; safecall;
    function Get_ServerFileName: WideString; safecall;
    function Get_FileSize: Integer; safecall;
    function Get_LastModified: TDateTime; safecall;
    procedure Rename(const NewName: WideString); safecall;
    property type_: Integer read Get_type_ write Set_type_;
    property Name[ViewFormat: Integer]: WideString read Get_Name;
    property Description: WideString read Get_Description write Set_Description;
    property Data: OleVariant read Get_Data;
    property FileName: WideString read Get_FileName write Set_FileName;
    property AttachmentStorage: IDispatch read Get_AttachmentStorage;
    property DirectLink: WideString read Get_DirectLink;
    property ServerFileName: WideString read Get_ServerFileName;
    property FileSize: Integer read Get_FileSize;
    property LastModified: TDateTime read Get_LastModified;
  end;

// *********************************************************************//
// DispIntf:  IAttachmentDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {613E9BF2-7888-438F-979F-D05DAB87B9C8}
// *********************************************************************//
  IAttachmentDisp = dispinterface
    ['{613E9BF2-7888-438F-979F-D05DAB87B9C8}']
    property type_: Integer dispid 11;
    property Name[ViewFormat: Integer]: WideString readonly dispid 12;
    property Description: WideString dispid 13;
    property Data: OleVariant readonly dispid 14;
    property FileName: WideString dispid 15;
    procedure Load(synchronize: WordBool; var RootPath: WideString); dispid 16;
    procedure Save(synchronize: WordBool); dispid 17;
    property AttachmentStorage: IDispatch readonly dispid 18;
    property DirectLink: WideString readonly dispid 19;
    property ServerFileName: WideString readonly dispid 20;
    property FileSize: Integer readonly dispid 21;
    property LastModified: TDateTime readonly dispid 22;
    procedure Rename(const NewName: WideString); dispid 23;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: ILink
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {79CFC0C1-7BB6-48CE-BC47-8074DDBCA542}
// *********************************************************************//
  ILink = interface(IBaseField)
    ['{79CFC0C1-7BB6-48CE-BC47-8074DDBCA542}']
    function Get_SourceEntity: IDispatch; safecall;
    function Get_TargetEntity: IDispatch; safecall;
    procedure Set_TargetEntity(const pVal: IDispatch); safecall;
    function Get_LinkedByEntity: IDispatch; safecall;
    function Get_CreatedBy: WideString; safecall;
    procedure Set_CreatedBy(const pVal: WideString); safecall;
    function Get_CreationDate: TDateTime; safecall;
    procedure Set_CreationDate(pVal: TDateTime); safecall;
    function Get_LinkType: WideString; safecall;
    procedure Set_LinkType(const pVal: WideString); safecall;
    function Get_Comment: WideString; safecall;
    procedure Set_Comment(const pVal: WideString); safecall;
    property SourceEntity: IDispatch read Get_SourceEntity;
    property TargetEntity: IDispatch read Get_TargetEntity write Set_TargetEntity;
    property LinkedByEntity: IDispatch read Get_LinkedByEntity;
    property CreatedBy: WideString read Get_CreatedBy write Set_CreatedBy;
    property CreationDate: TDateTime read Get_CreationDate write Set_CreationDate;
    property LinkType: WideString read Get_LinkType write Set_LinkType;
    property Comment: WideString read Get_Comment write Set_Comment;
  end;

// *********************************************************************//
// DispIntf:  ILinkDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {79CFC0C1-7BB6-48CE-BC47-8074DDBCA542}
// *********************************************************************//
  ILinkDisp = dispinterface
    ['{79CFC0C1-7BB6-48CE-BC47-8074DDBCA542}']
    property SourceEntity: IDispatch readonly dispid 11;
    property TargetEntity: IDispatch dispid 12;
    property LinkedByEntity: IDispatch readonly dispid 13;
    property CreatedBy: WideString dispid 14;
    property CreationDate: TDateTime dispid 15;
    property LinkType: WideString dispid 16;
    property Comment: WideString dispid 17;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: ILinkFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {49B715FA-458E-46EA-A171-0E0BFB38B3AF}
// *********************************************************************//
  ILinkFactory = interface(IBaseFactory)
    ['{49B715FA-458E-46EA-A171-0E0BFB38B3AF}']
    function Get_Owner: IDispatch; safecall;
    function Get_FullLinkage: WordBool; safecall;
    procedure Set_FullLinkage(pVal: WordBool); safecall;
    property Owner: IDispatch read Get_Owner;
    property FullLinkage: WordBool read Get_FullLinkage write Set_FullLinkage;
  end;

// *********************************************************************//
// DispIntf:  ILinkFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {49B715FA-458E-46EA-A171-0E0BFB38B3AF}
// *********************************************************************//
  ILinkFactoryDisp = dispinterface
    ['{49B715FA-458E-46EA-A171-0E0BFB38B3AF}']
    property Owner: IDispatch readonly dispid 8;
    property FullLinkage: WordBool dispid 9;
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: IReqTraceFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {59AFC6E7-D640-401D-80C4-934340993704}
// *********************************************************************//
  IReqTraceFactory = interface(IBaseFactory)
    ['{59AFC6E7-D640-401D-80C4-934340993704}']
  end;

// *********************************************************************//
// DispIntf:  IReqTraceFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {59AFC6E7-D640-401D-80C4-934340993704}
// *********************************************************************//
  IReqTraceFactoryDisp = dispinterface
    ['{59AFC6E7-D640-401D-80C4-934340993704}']
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: ITrace
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {47ED7949-FBFC-4C85-9AE0-32A3180D7256}
// *********************************************************************//
  ITrace = interface(IBaseField)
    ['{47ED7949-FBFC-4C85-9AE0-32A3180D7256}']
    function Get_FromReq: IDispatch; safecall;
    function Get_ToReq: IDispatch; safecall;
    procedure Set_TracedReq(const Param1: IDispatch); safecall;
    property FromReq: IDispatch read Get_FromReq;
    property ToReq: IDispatch read Get_ToReq;
    property TracedReq: IDispatch write Set_TracedReq;
  end;

// *********************************************************************//
// DispIntf:  ITraceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {47ED7949-FBFC-4C85-9AE0-32A3180D7256}
// *********************************************************************//
  ITraceDisp = dispinterface
    ['{47ED7949-FBFC-4C85-9AE0-32A3180D7256}']
    property FromReq: IDispatch readonly dispid 11;
    property ToReq: IDispatch readonly dispid 12;
    property TracedReq: IDispatch writeonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IReq
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4592C936-2524-4D05-9978-95901EDE0A54}
// *********************************************************************//
  IReq = interface(IBaseFieldExMail)
    ['{4592C936-2524-4D05-9978-95901EDE0A54}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    function Get_Comment: WideString; safecall;
    procedure Set_Comment(const pVal: WideString); safecall;
    function Get_Product: WideString; safecall;
    procedure Set_Product(const pVal: WideString); safecall;
    function Get_type_: WideString; safecall;
    procedure Set_type_(const pVal: WideString); safecall;
    function Get_Author: WideString; safecall;
    procedure Set_Author(const pVal: WideString); safecall;
    function Get_Count: Integer; safecall;
    function Get_Priority: WideString; safecall;
    procedure Set_Priority(const pVal: WideString); safecall;
    function Get_Status: WideString; safecall;
    function Get_Reviewed: WideString; safecall;
    procedure Set_Reviewed(const pVal: WideString); safecall;
    function AddCoverage(TestId: Integer; Order: Integer): Integer; safecall;
    function AddCoverageEx(SubjectID: Integer; Order: Integer): Integer; safecall;
    procedure RemoveCoverage(vTest: OleVariant; Recursive: WordBool); safecall;
    function GetCoverList(Recursive: WordBool): IList; safecall;
    function Get_Paragraph: WideString; safecall;
    function Get_Path: WideString; safecall;
    function Get_HasCoverage: WordBool; safecall;
    procedure Move(NewFatherId: Integer; NewOrder: Integer); safecall;
    function Get_IsFolder: WordBool; safecall;
    procedure Set_IsFolder(pVal: WordBool); safecall;
    function Get_ReqSummaryStatus: IDispatch; safecall;
    function Get_ReqCoverageStatus: IDispatch; safecall;
    function AddCoverageByFilter(SubjectID: Integer; Order: Integer; const TestFilter: WideString): Integer; safecall;
    function GetCoverListByFilter(const TestFilter: WideString; Recursive: WordBool): IList; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Comment: WideString read Get_Comment write Set_Comment;
    property Product: WideString read Get_Product write Set_Product;
    property type_: WideString read Get_type_ write Set_type_;
    property Author: WideString read Get_Author write Set_Author;
    property Count: Integer read Get_Count;
    property Priority: WideString read Get_Priority write Set_Priority;
    property Status: WideString read Get_Status;
    property Reviewed: WideString read Get_Reviewed write Set_Reviewed;
    property Paragraph: WideString read Get_Paragraph;
    property Path: WideString read Get_Path;
    property HasCoverage: WordBool read Get_HasCoverage;
    property IsFolder: WordBool read Get_IsFolder write Set_IsFolder;
    property ReqSummaryStatus: IDispatch read Get_ReqSummaryStatus;
    property ReqCoverageStatus: IDispatch read Get_ReqCoverageStatus;
  end;

// *********************************************************************//
// DispIntf:  IReqDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4592C936-2524-4D05-9978-95901EDE0A54}
// *********************************************************************//
  IReqDisp = dispinterface
    ['{4592C936-2524-4D05-9978-95901EDE0A54}']
    property Name: WideString dispid 15;
    property Comment: WideString dispid 16;
    property Product: WideString dispid 17;
    property type_: WideString dispid 18;
    property Author: WideString dispid 19;
    property Count: Integer readonly dispid 20;
    property Priority: WideString dispid 21;
    property Status: WideString readonly dispid 22;
    property Reviewed: WideString dispid 23;
    function AddCoverage(TestId: Integer; Order: Integer): Integer; dispid 24;
    function AddCoverageEx(SubjectID: Integer; Order: Integer): Integer; dispid 25;
    procedure RemoveCoverage(vTest: OleVariant; Recursive: WordBool); dispid 26;
    function GetCoverList(Recursive: WordBool): IList; dispid 27;
    property Paragraph: WideString readonly dispid 28;
    property Path: WideString readonly dispid 29;
    property HasCoverage: WordBool readonly dispid 30;
    procedure Move(NewFatherId: Integer; NewOrder: Integer); dispid 31;
    property IsFolder: WordBool dispid 32;
    property ReqSummaryStatus: IDispatch readonly dispid 33;
    property ReqCoverageStatus: IDispatch readonly dispid 34;
    function AddCoverageByFilter(SubjectID: Integer; Order: Integer; const TestFilter: WideString): Integer; dispid 35;
    function GetCoverListByFilter(const TestFilter: WideString; Recursive: WordBool): IList; dispid 36;
    procedure Mail(const SendTo: WideString; const SendCc: WideString; Option: Integer; 
                   const Subject: WideString; const Comment: WideString); dispid 14;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IReq2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {35692E1B-C235-426A-A77B-CD0D159C4F2E}
// *********************************************************************//
  IReq2 = interface(IReq)
    ['{35692E1B-C235-426A-A77B-CD0D159C4F2E}']
    function Get_ReqTraceFactory(TraceDirection: Integer): IDispatch; safecall;
    function Get_HasReqTraceability(TraceDirection: Integer): WordBool; safecall;
    function Get_RequirementType: IDispatch; safecall;
    function Get_TypeId: WideString; safecall;
    procedure Set_TypeId(const pVal: WideString); safecall;
    function get_Icon: IStream; safecall;
    function Get_ParentId: Integer; safecall;
    procedure Set_ParentId(pVal: Integer); safecall;
    procedure PopulateTargetCycleToChildren; safecall;
    procedure PopulateTargetReleaseToChildren; safecall;
    function Get_HasRichContent: WordBool; safecall;
    function GetCoverageTestsByReqFilter(const ReqFilter: WideString; Recursive: WordBool): IList; safecall;
    property ReqTraceFactory[TraceDirection: Integer]: IDispatch read Get_ReqTraceFactory;
    property HasReqTraceability[TraceDirection: Integer]: WordBool read Get_HasReqTraceability;
    property RequirementType: IDispatch read Get_RequirementType;
    property TypeId: WideString read Get_TypeId write Set_TypeId;
    property ParentId: Integer read Get_ParentId write Set_ParentId;
    property HasRichContent: WordBool read Get_HasRichContent;
  end;

// *********************************************************************//
// DispIntf:  IReq2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {35692E1B-C235-426A-A77B-CD0D159C4F2E}
// *********************************************************************//
  IReq2Disp = dispinterface
    ['{35692E1B-C235-426A-A77B-CD0D159C4F2E}']
    property ReqTraceFactory[TraceDirection: Integer]: IDispatch readonly dispid 37;
    property HasReqTraceability[TraceDirection: Integer]: WordBool readonly dispid 38;
    property RequirementType: IDispatch readonly dispid 39;
    property TypeId: WideString dispid 40;
    function get_Icon: IStream; dispid 41;
    property ParentId: Integer dispid 42;
    procedure PopulateTargetCycleToChildren; dispid 43;
    procedure PopulateTargetReleaseToChildren; dispid 44;
    property HasRichContent: WordBool readonly dispid 45;
    function GetCoverageTestsByReqFilter(const ReqFilter: WideString; Recursive: WordBool): IList; dispid 46;
    property Name: WideString dispid 15;
    property Comment: WideString dispid 16;
    property Product: WideString dispid 17;
    property type_: WideString dispid 18;
    property Author: WideString dispid 19;
    property Count: Integer readonly dispid 20;
    property Priority: WideString dispid 21;
    property Status: WideString readonly dispid 22;
    property Reviewed: WideString dispid 23;
    function AddCoverage(TestId: Integer; Order: Integer): Integer; dispid 24;
    function AddCoverageEx(SubjectID: Integer; Order: Integer): Integer; dispid 25;
    procedure RemoveCoverage(vTest: OleVariant; Recursive: WordBool); dispid 26;
    function GetCoverList(Recursive: WordBool): IList; dispid 27;
    property Paragraph: WideString readonly dispid 28;
    property Path: WideString readonly dispid 29;
    property HasCoverage: WordBool readonly dispid 30;
    procedure Move(NewFatherId: Integer; NewOrder: Integer); dispid 31;
    property IsFolder: WordBool dispid 32;
    property ReqSummaryStatus: IDispatch readonly dispid 33;
    property ReqCoverageStatus: IDispatch readonly dispid 34;
    function AddCoverageByFilter(SubjectID: Integer; Order: Integer; const TestFilter: WideString): Integer; dispid 35;
    function GetCoverListByFilter(const TestFilter: WideString; Recursive: WordBool): IList; dispid 36;
    procedure Mail(const SendTo: WideString; const SendCc: WideString; Option: Integer; 
                   const Subject: WideString; const Comment: WideString); dispid 14;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoverableReq
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F061ABB7-A65F-4146-8621-5A8B04C87B8D}
// *********************************************************************//
  ICoverableReq = interface(IDispatch)
    ['{F061ABB7-A65F-4146-8621-5A8B04C87B8D}']
    function Get_RequirementCoverageFactory: IDispatch; safecall;
    procedure AddTestInstanceToCoverage(TestInstanceID: Integer); safecall;
    procedure AddTestToCoverage(TestId: Integer); safecall;
    procedure AddTestsFromTestSetToCoverage(TestSetID: Integer; const TestInstanceFilter: WideString); safecall;
    procedure AddSubjectToCoverage(SubjectID: Integer; const TestFilter: WideString); safecall;
    property RequirementCoverageFactory: IDispatch read Get_RequirementCoverageFactory;
  end;

// *********************************************************************//
// DispIntf:  ICoverableReqDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F061ABB7-A65F-4146-8621-5A8B04C87B8D}
// *********************************************************************//
  ICoverableReqDisp = dispinterface
    ['{F061ABB7-A65F-4146-8621-5A8B04C87B8D}']
    property RequirementCoverageFactory: IDispatch readonly dispid 1;
    procedure AddTestInstanceToCoverage(TestInstanceID: Integer); dispid 2;
    procedure AddTestToCoverage(TestId: Integer); dispid 3;
    procedure AddTestsFromTestSetToCoverage(TestSetID: Integer; const TestInstanceFilter: WideString); dispid 4;
    procedure AddSubjectToCoverage(SubjectID: Integer; const TestFilter: WideString); dispid 5;
  end;

// *********************************************************************//
// Interface: ISequentialStream
// Flags:     (0)
// GUID:      {0C733A30-2A1C-11CE-ADE5-00AA0044773D}
// *********************************************************************//
  ISequentialStream = interface(IUnknown)
    ['{0C733A30-2A1C-11CE-ADE5-00AA0044773D}']
    function RemoteRead(out pv: Byte; cb: LongWord; out pcbRead: LongWord): HResult; stdcall;
    function RemoteWrite(var pv: Byte; cb: LongWord; out pcbWritten: LongWord): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IStream
// Flags:     (0)
// GUID:      {0000000C-0000-0000-C000-000000000046}
// *********************************************************************//
  IStream = interface(ISequentialStream)
    ['{0000000C-0000-0000-C000-000000000046}']
    function RemoteSeek(dlibMove: _LARGE_INTEGER; dwOrigin: LongWord; 
                        out plibNewPosition: _ULARGE_INTEGER): HResult; stdcall;
    function SetSize(libNewSize: _ULARGE_INTEGER): HResult; stdcall;
    function RemoteCopyTo(const pstm: IStream; cb: _ULARGE_INTEGER; out pcbRead: _ULARGE_INTEGER; 
                          out pcbWritten: _ULARGE_INTEGER): HResult; stdcall;
    function Commit(grfCommitFlags: LongWord): HResult; stdcall;
    function Revert: HResult; stdcall;
    function LockRegion(libOffset: _ULARGE_INTEGER; cb: _ULARGE_INTEGER; dwLockType: LongWord): HResult; stdcall;
    function UnlockRegion(libOffset: _ULARGE_INTEGER; cb: _ULARGE_INTEGER; dwLockType: LongWord): HResult; stdcall;
    function Stat(out pstatstg: tagSTATSTG; grfStatFlag: LongWord): HResult; stdcall;
    function Clone(out ppstm: IStream): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISupportRBTAnalysisParent
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C4BFEF87-D2BB-487F-B149-65B892644DFB}
// *********************************************************************//
  ISupportRBTAnalysisParent = interface(IDispatch)
    ['{C4BFEF87-D2BB-487F-B149-65B892644DFB}']
    procedure AnalyzeButDontSave; safecall;
    procedure AnalyzeAndSave; safecall;
    procedure ApplyPolicyOnResultMatix; safecall;
    function Get_TestingPolicyMatrix(BILevel: Integer; FPLevel: Integer): Integer; safecall;
    procedure Set_TestingPolicyMatrix(BILevel: Integer; FPLevel: Integer; pTestingLevel: Integer); safecall;
    function Get_TestingLevelPercentage(TestingLevel: Integer): Integer; safecall;
    procedure Set_TestingLevelPercentage(TestingLevel: Integer; pPercentage: Integer); safecall;
    function Get_FPLevelTestingEffortInHours(FPLevel: Integer): Integer; safecall;
    procedure Set_FPLevelTestingEffortInHours(FPLevel: Integer; pHours: Integer); safecall;
    function Get_AvailableTimeInHours: Integer; safecall;
    procedure Set_AvailableTimeInHours(pHours: Integer); safecall;
    function Get_AnalysisFilter: WideString; safecall;
    procedure Set_AnalysisFilter(const pVal: WideString); safecall;
    function Get_TestingEffortInHoursFromPolicyMatrix(BILevel: Integer; FPLevel: Integer): Integer; safecall;
    function Get_IsAnalyzed: WordBool; safecall;
    function Get_AnalysisResultCustomizedDurationInHours: Integer; safecall;
    function Get_AnalysisResultAnalyzedDurationInHours: Integer; safecall;
    function Get_AnalysisResultLastAnalysisDate: TDateTime; safecall;
    function Get_AnalysisResultAggregatedRNDEffortsInHours: Integer; safecall;
    function Get_AnalysisResultCountIgnoredRequirements: Integer; safecall;
    function Get_AnalysisResultCountCustomizedRequirements: Integer; safecall;
    function Get_AnalysisResultCountUnanalyzableRequirements: Integer; safecall;
    function Get_AnalysisResultCountNonCustomizedRequirements(BILevel: Integer; FPLevel: Integer): Integer; safecall;
    procedure ResetPolicyToDefaults; safecall;
    property TestingPolicyMatrix[BILevel: Integer; FPLevel: Integer]: Integer read Get_TestingPolicyMatrix write Set_TestingPolicyMatrix;
    property TestingLevelPercentage[TestingLevel: Integer]: Integer read Get_TestingLevelPercentage write Set_TestingLevelPercentage;
    property FPLevelTestingEffortInHours[FPLevel: Integer]: Integer read Get_FPLevelTestingEffortInHours write Set_FPLevelTestingEffortInHours;
    property AvailableTimeInHours: Integer read Get_AvailableTimeInHours write Set_AvailableTimeInHours;
    property AnalysisFilter: WideString read Get_AnalysisFilter write Set_AnalysisFilter;
    property TestingEffortInHoursFromPolicyMatrix[BILevel: Integer; FPLevel: Integer]: Integer read Get_TestingEffortInHoursFromPolicyMatrix;
    property IsAnalyzed: WordBool read Get_IsAnalyzed;
    property AnalysisResultCustomizedDurationInHours: Integer read Get_AnalysisResultCustomizedDurationInHours;
    property AnalysisResultAnalyzedDurationInHours: Integer read Get_AnalysisResultAnalyzedDurationInHours;
    property AnalysisResultLastAnalysisDate: TDateTime read Get_AnalysisResultLastAnalysisDate;
    property AnalysisResultAggregatedRNDEffortsInHours: Integer read Get_AnalysisResultAggregatedRNDEffortsInHours;
    property AnalysisResultCountIgnoredRequirements: Integer read Get_AnalysisResultCountIgnoredRequirements;
    property AnalysisResultCountCustomizedRequirements: Integer read Get_AnalysisResultCountCustomizedRequirements;
    property AnalysisResultCountUnanalyzableRequirements: Integer read Get_AnalysisResultCountUnanalyzableRequirements;
    property AnalysisResultCountNonCustomizedRequirements[BILevel: Integer; FPLevel: Integer]: Integer read Get_AnalysisResultCountNonCustomizedRequirements;
  end;

// *********************************************************************//
// DispIntf:  ISupportRBTAnalysisParentDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C4BFEF87-D2BB-487F-B149-65B892644DFB}
// *********************************************************************//
  ISupportRBTAnalysisParentDisp = dispinterface
    ['{C4BFEF87-D2BB-487F-B149-65B892644DFB}']
    procedure AnalyzeButDontSave; dispid 1;
    procedure AnalyzeAndSave; dispid 2;
    procedure ApplyPolicyOnResultMatix; dispid 3;
    property TestingPolicyMatrix[BILevel: Integer; FPLevel: Integer]: Integer dispid 20;
    property TestingLevelPercentage[TestingLevel: Integer]: Integer dispid 21;
    property FPLevelTestingEffortInHours[FPLevel: Integer]: Integer dispid 22;
    property AvailableTimeInHours: Integer dispid 23;
    property AnalysisFilter: WideString dispid 24;
    property TestingEffortInHoursFromPolicyMatrix[BILevel: Integer; FPLevel: Integer]: Integer readonly dispid 25;
    property IsAnalyzed: WordBool readonly dispid 33;
    property AnalysisResultCustomizedDurationInHours: Integer readonly dispid 34;
    property AnalysisResultAnalyzedDurationInHours: Integer readonly dispid 35;
    property AnalysisResultLastAnalysisDate: TDateTime readonly dispid 36;
    property AnalysisResultAggregatedRNDEffortsInHours: Integer readonly dispid 37;
    property AnalysisResultCountIgnoredRequirements: Integer readonly dispid 38;
    property AnalysisResultCountCustomizedRequirements: Integer readonly dispid 39;
    property AnalysisResultCountUnanalyzableRequirements: Integer readonly dispid 40;
    property AnalysisResultCountNonCustomizedRequirements[BILevel: Integer; FPLevel: Integer]: Integer readonly dispid 41;
    procedure ResetPolicyToDefaults; dispid 50;
  end;

// *********************************************************************//
// Interface: ISupportRBTAssessment
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7D7FDD57-E6B0-4CD5-BB97-0D2DFFD2DD70}
// *********************************************************************//
  ISupportRBTAssessment = interface(IDispatch)
    ['{7D7FDD57-E6B0-4CD5-BB97-0D2DFFD2DD70}']
    function Get_BIChosenAnswerForQuestion(QuestionID: Integer): Integer; safecall;
    procedure Set_BIChosenAnswerForQuestion(QuestionID: Integer; pAnswerID: Integer); safecall;
    procedure AssessBILevel; safecall;
    function Get_AssessedBILevel: WideString; safecall;
    function Get_UseCustomBILevel: WordBool; safecall;
    procedure Set_UseCustomBILevel(pVal: WordBool); safecall;
    function Get_CustomBILevel: WideString; safecall;
    procedure Set_CustomBILevel(const pVal: WideString); safecall;
    function Get_EffectiveBILevel: WideString; safecall;
    function Get_FPChosenAnswerForQuestion(QuestionID: Integer): Integer; safecall;
    procedure Set_FPChosenAnswerForQuestion(QuestionID: Integer; pAnswerID: Integer); safecall;
    procedure AssessFPLevel; safecall;
    function Get_AssessedFPLevel: WideString; safecall;
    function Get_UseCustomFPLevel: WordBool; safecall;
    procedure Set_UseCustomFPLevel(pVal: WordBool); safecall;
    function Get_CustomFPLevel: WideString; safecall;
    procedure Set_CustomFPLevel(const pVal: WideString); safecall;
    function Get_EffectiveFPLevel: WideString; safecall;
    property BIChosenAnswerForQuestion[QuestionID: Integer]: Integer read Get_BIChosenAnswerForQuestion write Set_BIChosenAnswerForQuestion;
    property AssessedBILevel: WideString read Get_AssessedBILevel;
    property UseCustomBILevel: WordBool read Get_UseCustomBILevel write Set_UseCustomBILevel;
    property CustomBILevel: WideString read Get_CustomBILevel write Set_CustomBILevel;
    property EffectiveBILevel: WideString read Get_EffectiveBILevel;
    property FPChosenAnswerForQuestion[QuestionID: Integer]: Integer read Get_FPChosenAnswerForQuestion write Set_FPChosenAnswerForQuestion;
    property AssessedFPLevel: WideString read Get_AssessedFPLevel;
    property UseCustomFPLevel: WordBool read Get_UseCustomFPLevel write Set_UseCustomFPLevel;
    property CustomFPLevel: WideString read Get_CustomFPLevel write Set_CustomFPLevel;
    property EffectiveFPLevel: WideString read Get_EffectiveFPLevel;
  end;

// *********************************************************************//
// DispIntf:  ISupportRBTAssessmentDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7D7FDD57-E6B0-4CD5-BB97-0D2DFFD2DD70}
// *********************************************************************//
  ISupportRBTAssessmentDisp = dispinterface
    ['{7D7FDD57-E6B0-4CD5-BB97-0D2DFFD2DD70}']
    property BIChosenAnswerForQuestion[QuestionID: Integer]: Integer dispid 1;
    procedure AssessBILevel; dispid 2;
    property AssessedBILevel: WideString readonly dispid 3;
    property UseCustomBILevel: WordBool dispid 4;
    property CustomBILevel: WideString dispid 5;
    property EffectiveBILevel: WideString readonly dispid 6;
    property FPChosenAnswerForQuestion[QuestionID: Integer]: Integer dispid 11;
    procedure AssessFPLevel; dispid 12;
    property AssessedFPLevel: WideString readonly dispid 13;
    property UseCustomFPLevel: WordBool dispid 14;
    property CustomFPLevel: WideString dispid 15;
    property EffectiveFPLevel: WideString readonly dispid 16;
  end;

// *********************************************************************//
// Interface: ISupportRBTAnalysisChild
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {16E049C8-05E8-4D98-B9F4-CED6BCC763FD}
// *********************************************************************//
  ISupportRBTAnalysisChild = interface(IDispatch)
    ['{16E049C8-05E8-4D98-B9F4-CED6BCC763FD}']
    function Get_AnalyzedTestingLevel: WideString; safecall;
    function Get_AnalyzedTestingEffortInHours: Integer; safecall;
    function Get_UseCustomTLAndTE: WordBool; safecall;
    procedure Set_UseCustomTLAndTE(pVal: WordBool); safecall;
    function Get_CustomTestingLevel: WideString; safecall;
    procedure Set_CustomTestingLevel(const pTestingLevel: WideString); safecall;
    function Get_CustomTestingEffortInHours: Integer; safecall;
    procedure Set_CustomTestingEffortInHours(pVal: Integer); safecall;
    function Get_RnDEstimatedEffortInHours: Integer; safecall;
    procedure Set_RnDEstimatedEffortInHours(pVal: Integer); safecall;
    function Get_IgnoreInAnalysis: WordBool; safecall;
    procedure Set_IgnoreInAnalysis(pVal: WordBool); safecall;
    function Get_ParentRequirementForRBTAnalysis: IDispatch; safecall;
    property AnalyzedTestingLevel: WideString read Get_AnalyzedTestingLevel;
    property AnalyzedTestingEffortInHours: Integer read Get_AnalyzedTestingEffortInHours;
    property UseCustomTLAndTE: WordBool read Get_UseCustomTLAndTE write Set_UseCustomTLAndTE;
    property CustomTestingLevel: WideString read Get_CustomTestingLevel write Set_CustomTestingLevel;
    property CustomTestingEffortInHours: Integer read Get_CustomTestingEffortInHours write Set_CustomTestingEffortInHours;
    property RnDEstimatedEffortInHours: Integer read Get_RnDEstimatedEffortInHours write Set_RnDEstimatedEffortInHours;
    property IgnoreInAnalysis: WordBool read Get_IgnoreInAnalysis write Set_IgnoreInAnalysis;
    property ParentRequirementForRBTAnalysis: IDispatch read Get_ParentRequirementForRBTAnalysis;
  end;

// *********************************************************************//
// DispIntf:  ISupportRBTAnalysisChildDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {16E049C8-05E8-4D98-B9F4-CED6BCC763FD}
// *********************************************************************//
  ISupportRBTAnalysisChildDisp = dispinterface
    ['{16E049C8-05E8-4D98-B9F4-CED6BCC763FD}']
    property AnalyzedTestingLevel: WideString readonly dispid 1;
    property AnalyzedTestingEffortInHours: Integer readonly dispid 2;
    property UseCustomTLAndTE: WordBool dispid 10;
    property CustomTestingLevel: WideString dispid 11;
    property CustomTestingEffortInHours: Integer dispid 12;
    property RnDEstimatedEffortInHours: Integer dispid 31;
    property IgnoreInAnalysis: WordBool dispid 41;
    property ParentRequirementForRBTAnalysis: IDispatch readonly dispid 50;
  end;

// *********************************************************************//
// Interface: IReqFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {833093EE-C983-46F7-88BF-DE5D7E2FCBBD}
// *********************************************************************//
  IReqFactory = interface(IBaseFactoryEx)
    ['{833093EE-C983-46F7-88BF-DE5D7E2FCBBD}']
    function GetChildrenList(FatherID: Integer): IList; safecall;
    function Find(StartRootID: Integer; const FieldName: WideString; const Pattern: WideString; 
                  mode: Integer; Limit: Integer): IList; safecall;
    function BuildSummaryGraph(const XAxisField: WideString; const GroupByField: WideString; 
                               const SumOfField: WideString; MaxCols: Integer; Filter: OleVariant; 
                               ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; safecall;
    function BuildProgressGraph(const GroupByField: WideString; const SumOfField: WideString; 
                                ByHistory: WordBool; MajorSkip: Integer; MinorSkip: Integer; 
                                MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                                ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; safecall;
    function BuildTrendGraph(const GroupByField: WideString; const SumOfField: WideString; 
                             MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                             ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; safecall;
    function BuildPerfGraph(const GroupByField: WideString; const SumOfField: WideString; 
                            MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                            ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; safecall;
    function BuildSummaryGraphEx(const XAxisField: WideString; const GroupByField: WideString; 
                                 const SumOfField: WideString; MaxCols: Integer; 
                                 Filter: OleVariant; ForceRefresh: WordBool; 
                                 ShowFullPath: WordBool; ShowNullParents: WordBool): IDispatch; safecall;
    function BuildProgressGraphEx(const GroupByField: WideString; const SumOfField: WideString; 
                                  ByHistory: WordBool; MajorSkip: Integer; MinorSkip: Integer; 
                                  MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                                  ForceRefresh: WordBool; ShowFullPath: WordBool; 
                                  ShowNullParents: WordBool): IDispatch; safecall;
    function BuildTrendGraphEx(const GroupByField: WideString; const SumOfField: WideString; 
                               MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                               ForceRefresh: WordBool; ShowFullPath: WordBool; 
                               ShowNullParents: WordBool): IDispatch; safecall;
    function BuildPerfGraphEx(const GroupByField: WideString; const SumOfField: WideString; 
                              MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                              ForceRefresh: WordBool; ShowFullPath: WordBool; 
                              ShowNullParents: WordBool): IDispatch; safecall;
  end;

// *********************************************************************//
// DispIntf:  IReqFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {833093EE-C983-46F7-88BF-DE5D7E2FCBBD}
// *********************************************************************//
  IReqFactoryDisp = dispinterface
    ['{833093EE-C983-46F7-88BF-DE5D7E2FCBBD}']
    function GetChildrenList(FatherID: Integer): IList; dispid 9;
    function Find(StartRootID: Integer; const FieldName: WideString; const Pattern: WideString; 
                  mode: Integer; Limit: Integer): IList; dispid 10;
    function BuildSummaryGraph(const XAxisField: WideString; const GroupByField: WideString; 
                               const SumOfField: WideString; MaxCols: Integer; Filter: OleVariant; 
                               ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 11;
    function BuildProgressGraph(const GroupByField: WideString; const SumOfField: WideString; 
                                ByHistory: WordBool; MajorSkip: Integer; MinorSkip: Integer; 
                                MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                                ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 12;
    function BuildTrendGraph(const GroupByField: WideString; const SumOfField: WideString; 
                             MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                             ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 13;
    function BuildPerfGraph(const GroupByField: WideString; const SumOfField: WideString; 
                            MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                            ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 14;
    function BuildSummaryGraphEx(const XAxisField: WideString; const GroupByField: WideString; 
                                 const SumOfField: WideString; MaxCols: Integer; 
                                 Filter: OleVariant; ForceRefresh: WordBool; 
                                 ShowFullPath: WordBool; ShowNullParents: WordBool): IDispatch; dispid 15;
    function BuildProgressGraphEx(const GroupByField: WideString; const SumOfField: WideString; 
                                  ByHistory: WordBool; MajorSkip: Integer; MinorSkip: Integer; 
                                  MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                                  ForceRefresh: WordBool; ShowFullPath: WordBool; 
                                  ShowNullParents: WordBool): IDispatch; dispid 16;
    function BuildTrendGraphEx(const GroupByField: WideString; const SumOfField: WideString; 
                               MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                               ForceRefresh: WordBool; ShowFullPath: WordBool; 
                               ShowNullParents: WordBool): IDispatch; dispid 17;
    function BuildPerfGraphEx(const GroupByField: WideString; const SumOfField: WideString; 
                              MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                              ForceRefresh: WordBool; ShowFullPath: WordBool; 
                              ShowNullParents: WordBool): IDispatch; dispid 18;
    procedure Mail(Items: OleVariant; const SendTo: WideString; const SendCc: WideString; 
                   Option: Integer; const Subject: WideString; const Comment: WideString); dispid 8;
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: IReqFactory2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1F73BDFF-AC15-47FF-8264-88ADE733AAB7}
// *********************************************************************//
  IReqFactory2 = interface(IReqFactory)
    ['{1F73BDFF-AC15-47FF-8264-88ADE733AAB7}']
    function GetFilteredChildrenList(FatherID: Integer; const Filter: ITDFilter): IList; safecall;
  end;

// *********************************************************************//
// DispIntf:  IReqFactory2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1F73BDFF-AC15-47FF-8264-88ADE733AAB7}
// *********************************************************************//
  IReqFactory2Disp = dispinterface
    ['{1F73BDFF-AC15-47FF-8264-88ADE733AAB7}']
    function GetFilteredChildrenList(FatherID: Integer; const Filter: ITDFilter): IList; dispid 19;
    function GetChildrenList(FatherID: Integer): IList; dispid 9;
    function Find(StartRootID: Integer; const FieldName: WideString; const Pattern: WideString; 
                  mode: Integer; Limit: Integer): IList; dispid 10;
    function BuildSummaryGraph(const XAxisField: WideString; const GroupByField: WideString; 
                               const SumOfField: WideString; MaxCols: Integer; Filter: OleVariant; 
                               ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 11;
    function BuildProgressGraph(const GroupByField: WideString; const SumOfField: WideString; 
                                ByHistory: WordBool; MajorSkip: Integer; MinorSkip: Integer; 
                                MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                                ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 12;
    function BuildTrendGraph(const GroupByField: WideString; const SumOfField: WideString; 
                             MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                             ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 13;
    function BuildPerfGraph(const GroupByField: WideString; const SumOfField: WideString; 
                            MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                            ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 14;
    function BuildSummaryGraphEx(const XAxisField: WideString; const GroupByField: WideString; 
                                 const SumOfField: WideString; MaxCols: Integer; 
                                 Filter: OleVariant; ForceRefresh: WordBool; 
                                 ShowFullPath: WordBool; ShowNullParents: WordBool): IDispatch; dispid 15;
    function BuildProgressGraphEx(const GroupByField: WideString; const SumOfField: WideString; 
                                  ByHistory: WordBool; MajorSkip: Integer; MinorSkip: Integer; 
                                  MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                                  ForceRefresh: WordBool; ShowFullPath: WordBool; 
                                  ShowNullParents: WordBool): IDispatch; dispid 16;
    function BuildTrendGraphEx(const GroupByField: WideString; const SumOfField: WideString; 
                               MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                               ForceRefresh: WordBool; ShowFullPath: WordBool; 
                               ShowNullParents: WordBool): IDispatch; dispid 17;
    function BuildPerfGraphEx(const GroupByField: WideString; const SumOfField: WideString; 
                              MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                              ForceRefresh: WordBool; ShowFullPath: WordBool; 
                              ShowNullParents: WordBool): IDispatch; dispid 18;
    procedure Mail(Items: OleVariant; const SendTo: WideString; const SendCc: WideString; 
                   Option: Integer; const Subject: WideString; const Comment: WideString); dispid 8;
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: IReqFactory3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FDF842AD-361C-4F9A-82E6-6A2DB156FD27}
// *********************************************************************//
  IReqFactory3 = interface(IReqFactory2)
    ['{FDF842AD-361C-4F9A-82E6-6A2DB156FD27}']
    function GetTracedList(ReqID: Integer; TraceDirection: Integer): IList; safecall;
    function GetRequirementTypes: IList; safecall;
    function GetRequirementType(const TypeId: WideString): IDispatch; safecall;
    function ReqTypeIdToName(TypeId: Integer): WideString; safecall;
    function GetRequirementsSummaryStatus(const reqIDs: WideString; const Filter: WideString; 
                                          const coverageByCycles: IList): IList; safecall;
    function GetRequirementsByStatus(const Filter: WideString; const Status: WideString; 
                                     const coverageByCycles: IList): IList; safecall;
    function GetCoverageTestsByReqFilter(const ReqFilter: WideString): IList; safecall;
  end;

// *********************************************************************//
// DispIntf:  IReqFactory3Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FDF842AD-361C-4F9A-82E6-6A2DB156FD27}
// *********************************************************************//
  IReqFactory3Disp = dispinterface
    ['{FDF842AD-361C-4F9A-82E6-6A2DB156FD27}']
    function GetTracedList(ReqID: Integer; TraceDirection: Integer): IList; dispid 20;
    function GetRequirementTypes: IList; dispid 21;
    function GetRequirementType(const TypeId: WideString): IDispatch; dispid 22;
    function ReqTypeIdToName(TypeId: Integer): WideString; dispid 23;
    function GetRequirementsSummaryStatus(const reqIDs: WideString; const Filter: WideString; 
                                          const coverageByCycles: IList): IList; dispid 24;
    function GetRequirementsByStatus(const Filter: WideString; const Status: WideString; 
                                     const coverageByCycles: IList): IList; dispid 25;
    function GetCoverageTestsByReqFilter(const ReqFilter: WideString): IList; dispid 26;
    function GetFilteredChildrenList(FatherID: Integer; const Filter: ITDFilter): IList; dispid 19;
    function GetChildrenList(FatherID: Integer): IList; dispid 9;
    function Find(StartRootID: Integer; const FieldName: WideString; const Pattern: WideString; 
                  mode: Integer; Limit: Integer): IList; dispid 10;
    function BuildSummaryGraph(const XAxisField: WideString; const GroupByField: WideString; 
                               const SumOfField: WideString; MaxCols: Integer; Filter: OleVariant; 
                               ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 11;
    function BuildProgressGraph(const GroupByField: WideString; const SumOfField: WideString; 
                                ByHistory: WordBool; MajorSkip: Integer; MinorSkip: Integer; 
                                MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                                ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 12;
    function BuildTrendGraph(const GroupByField: WideString; const SumOfField: WideString; 
                             MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                             ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 13;
    function BuildPerfGraph(const GroupByField: WideString; const SumOfField: WideString; 
                            MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                            ForceRefresh: WordBool; ShowFullPath: WordBool): IDispatch; dispid 14;
    function BuildSummaryGraphEx(const XAxisField: WideString; const GroupByField: WideString; 
                                 const SumOfField: WideString; MaxCols: Integer; 
                                 Filter: OleVariant; ForceRefresh: WordBool; 
                                 ShowFullPath: WordBool; ShowNullParents: WordBool): IDispatch; dispid 15;
    function BuildProgressGraphEx(const GroupByField: WideString; const SumOfField: WideString; 
                                  ByHistory: WordBool; MajorSkip: Integer; MinorSkip: Integer; 
                                  MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                                  ForceRefresh: WordBool; ShowFullPath: WordBool; 
                                  ShowNullParents: WordBool): IDispatch; dispid 16;
    function BuildTrendGraphEx(const GroupByField: WideString; const SumOfField: WideString; 
                               MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                               ForceRefresh: WordBool; ShowFullPath: WordBool; 
                               ShowNullParents: WordBool): IDispatch; dispid 17;
    function BuildPerfGraphEx(const GroupByField: WideString; const SumOfField: WideString; 
                              MaxCols: Integer; Filter: OleVariant; FRDate: OleVariant; 
                              ForceRefresh: WordBool; ShowFullPath: WordBool; 
                              ShowNullParents: WordBool): IDispatch; dispid 18;
    procedure Mail(Items: OleVariant; const SendTo: WideString; const SendCc: WideString; 
                   Option: Integer; const Subject: WideString; const Comment: WideString); dispid 8;
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: IActionPermission
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1EE78B77-A68F-49D8-9707-9A7C8CEA10D2}
// *********************************************************************//
  IActionPermission = interface(IDispatch)
    ['{1EE78B77-A68F-49D8-9707-9A7C8CEA10D2}']
    function Get_ActionEnabled(ActionIdentity: OleVariant; ActionTarget: OleVariant): WordBool; safecall;
    property ActionEnabled[ActionIdentity: OleVariant; ActionTarget: OleVariant]: WordBool read Get_ActionEnabled;
  end;

// *********************************************************************//
// DispIntf:  IActionPermissionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1EE78B77-A68F-49D8-9707-9A7C8CEA10D2}
// *********************************************************************//
  IActionPermissionDisp = dispinterface
    ['{1EE78B77-A68F-49D8-9707-9A7C8CEA10D2}']
    property ActionEnabled[ActionIdentity: OleVariant; ActionTarget: OleVariant]: WordBool readonly dispid 1;
  end;

// *********************************************************************//
// Interface: IGraphDefinition
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {96615E7A-A7C4-4B6F-A00A-418B92070F83}
// *********************************************************************//
  IGraphDefinition = interface(IDispatch)
    ['{96615E7A-A7C4-4B6F-A00A-418B92070F83}']
    function Get_Module: Integer; safecall;
    function Get_type_: Integer; safecall;
    function Get_Property_(Prop: Integer): OleVariant; safecall;
    procedure Set_Property_(Prop: Integer; pVal: OleVariant); safecall;
    function Get_Filter: IDispatch; safecall;
    procedure Set_Filter(const pFilter: IDispatch); safecall;
    function Get_Text: WideString; safecall;
    property Module: Integer read Get_Module;
    property type_: Integer read Get_type_;
    property Property_[Prop: Integer]: OleVariant read Get_Property_ write Set_Property_;
    property Filter: IDispatch read Get_Filter write Set_Filter;
    property Text: WideString read Get_Text;
  end;

// *********************************************************************//
// DispIntf:  IGraphDefinitionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {96615E7A-A7C4-4B6F-A00A-418B92070F83}
// *********************************************************************//
  IGraphDefinitionDisp = dispinterface
    ['{96615E7A-A7C4-4B6F-A00A-418B92070F83}']
    property Module: Integer readonly dispid 1;
    property type_: Integer readonly dispid 2;
    property Property_[Prop: Integer]: OleVariant dispid 3;
    property Filter: IDispatch dispid 4;
    property Text: WideString readonly dispid 5;
  end;

// *********************************************************************//
// Interface: IGraphBuilder
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8F96D0C2-FFFE-4C6F-984E-CE022A50EA0E}
// *********************************************************************//
  IGraphBuilder = interface(IDispatch)
    ['{8F96D0C2-FFFE-4C6F-984E-CE022A50EA0E}']
    function CreateGraphDefinition(Module: Integer; GraphType: Integer): IDispatch; safecall;
    function BuildGraph(const pGraphDef: IDispatch): IDispatch; safecall;
    function BuildMultipleGraphs(GraphDefs: OleVariant): IList; safecall;
  end;

// *********************************************************************//
// DispIntf:  IGraphBuilderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8F96D0C2-FFFE-4C6F-984E-CE022A50EA0E}
// *********************************************************************//
  IGraphBuilderDisp = dispinterface
    ['{8F96D0C2-FFFE-4C6F-984E-CE022A50EA0E}']
    function CreateGraphDefinition(Module: Integer; GraphType: Integer): IDispatch; dispid 1;
    function BuildGraph(const pGraphDef: IDispatch): IDispatch; dispid 2;
    function BuildMultipleGraphs(GraphDefs: OleVariant): IList; dispid 3;
  end;

// *********************************************************************//
// Interface: IGraph
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ECCB1143-8914-497A-ACA0-8789CA64C2D6}
// *********************************************************************//
  IGraph = interface(IDispatch)
    ['{ECCB1143-8914-497A-ACA0-8789CA64C2D6}']
    function Get_ColName(Col: Integer): WideString; safecall;
    function Get_RowName(Row: Integer): WideString; safecall;
    function Get_ColType(Col: Integer): Smallint; safecall;
    function Get_Data(Col: Integer; Row: Integer): Integer; safecall;
    function Get_ColCount: Integer; safecall;
    function Get_RowCount: Integer; safecall;
    function DrillDown(pAreas: OleVariant; mAreas: OleVariant): IList; safecall;
    function Get_MaxValue: Integer; safecall;
    function Get_GraphTotal: Integer; safecall;
    function Get_RowTotal(Row: Integer): Integer; safecall;
    function Get_ColTotal(Col: Integer): Integer; safecall;
    function MultiDrillDown(Areas: OleVariant): IList; safecall;
    function Get_StartDate: TDateTime; safecall;
    property ColName[Col: Integer]: WideString read Get_ColName;
    property RowName[Row: Integer]: WideString read Get_RowName;
    property ColType[Col: Integer]: Smallint read Get_ColType;
    property Data[Col: Integer; Row: Integer]: Integer read Get_Data;
    property ColCount: Integer read Get_ColCount;
    property RowCount: Integer read Get_RowCount;
    property MaxValue: Integer read Get_MaxValue;
    property GraphTotal: Integer read Get_GraphTotal;
    property RowTotal[Row: Integer]: Integer read Get_RowTotal;
    property ColTotal[Col: Integer]: Integer read Get_ColTotal;
    property StartDate: TDateTime read Get_StartDate;
  end;

// *********************************************************************//
// DispIntf:  IGraphDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ECCB1143-8914-497A-ACA0-8789CA64C2D6}
// *********************************************************************//
  IGraphDisp = dispinterface
    ['{ECCB1143-8914-497A-ACA0-8789CA64C2D6}']
    property ColName[Col: Integer]: WideString readonly dispid 1;
    property RowName[Row: Integer]: WideString readonly dispid 2;
    property ColType[Col: Integer]: Smallint readonly dispid 3;
    property Data[Col: Integer; Row: Integer]: Integer readonly dispid 4;
    property ColCount: Integer readonly dispid 5;
    property RowCount: Integer readonly dispid 6;
    function DrillDown(pAreas: OleVariant; mAreas: OleVariant): IList; dispid 7;
    property MaxValue: Integer readonly dispid 8;
    property GraphTotal: Integer readonly dispid 9;
    property RowTotal[Row: Integer]: Integer readonly dispid 10;
    property ColTotal[Col: Integer]: Integer readonly dispid 11;
    function MultiDrillDown(Areas: OleVariant): IList; dispid 12;
    property StartDate: TDateTime readonly dispid 13;
  end;

// *********************************************************************//
// Interface: ISearchOptions
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2444C43F-5371-4B4A-B6B6-34D205644C35}
// *********************************************************************//
  ISearchOptions = interface(IDispatch)
    ['{2444C43F-5371-4B4A-B6B6-34D205644C35}']
    function Get_Property_(Prop: Integer): OleVariant; safecall;
    procedure Set_Property_(Prop: Integer; pVal: OleVariant); safecall;
    function Get_Filter: IDispatch; safecall;
    procedure Set_Filter(const pFilter: IDispatch); safecall;
    function Get_Text: WideString; safecall;
    property Property_[Prop: Integer]: OleVariant read Get_Property_ write Set_Property_;
    property Filter: IDispatch read Get_Filter write Set_Filter;
    property Text: WideString read Get_Text;
  end;

// *********************************************************************//
// DispIntf:  ISearchOptionsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2444C43F-5371-4B4A-B6B6-34D205644C35}
// *********************************************************************//
  ISearchOptionsDisp = dispinterface
    ['{2444C43F-5371-4B4A-B6B6-34D205644C35}']
    property Property_[Prop: Integer]: OleVariant dispid 1;
    property Filter: IDispatch dispid 2;
    property Text: WideString readonly dispid 3;
  end;

// *********************************************************************//
// Interface: ITestExecStatus
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C1ED849E-CB41-45A9-A256-9A0D3CFDB350}
// *********************************************************************//
  ITestExecStatus = interface(IDispatch)
    ['{C1ED849E-CB41-45A9-A256-9A0D3CFDB350}']
    function Get_TestId: Integer; safecall;
    function Get_Message: WideString; safecall;
    function Get_Status: WideString; safecall;
    function Get_TSTestId: OleVariant; safecall;
    function Get_TestInstance: Integer; safecall;
    property TestId: Integer read Get_TestId;
    property Message: WideString read Get_Message;
    property Status: WideString read Get_Status;
    property TSTestId: OleVariant read Get_TSTestId;
    property TestInstance: Integer read Get_TestInstance;
  end;

// *********************************************************************//
// DispIntf:  ITestExecStatusDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C1ED849E-CB41-45A9-A256-9A0D3CFDB350}
// *********************************************************************//
  ITestExecStatusDisp = dispinterface
    ['{C1ED849E-CB41-45A9-A256-9A0D3CFDB350}']
    property TestId: Integer readonly dispid 1;
    property Message: WideString readonly dispid 2;
    property Status: WideString readonly dispid 3;
    property TSTestId: OleVariant readonly dispid 4;
    property TestInstance: Integer readonly dispid 5;
  end;

// *********************************************************************//
// Interface: IExecutionStatus
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D367F107-1BCE-4AAB-8E6B-BF6399BD64FC}
// *********************************************************************//
  IExecutionStatus = interface(IDispatch)
    ['{D367F107-1BCE-4AAB-8E6B-BF6399BD64FC}']
    function Get_Count: Integer; safecall;
    procedure RefreshExecStatusInfo(TestData: OleVariant; Force: WordBool); safecall;
    function Get_Finished: WordBool; safecall;
    function EventsList: IList; safecall;
    function Get_Item(Index: Integer): OleVariant; safecall;
    function Get__NewEnum: IUnknown; safecall;
    property Count: Integer read Get_Count;
    property Finished: WordBool read Get_Finished;
    property Item[Index: Integer]: OleVariant read Get_Item; default;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  IExecutionStatusDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D367F107-1BCE-4AAB-8E6B-BF6399BD64FC}
// *********************************************************************//
  IExecutionStatusDisp = dispinterface
    ['{D367F107-1BCE-4AAB-8E6B-BF6399BD64FC}']
    property Count: Integer readonly dispid 1;
    procedure RefreshExecStatusInfo(TestData: OleVariant; Force: WordBool); dispid 2;
    property Finished: WordBool readonly dispid 3;
    function EventsList: IList; dispid 4;
    property Item[Index: Integer]: OleVariant readonly dispid 0; default;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// Interface: ITSScheduler
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E99AC0C8-46AB-42C3-9CB2-9C9AEC35A861}
// *********************************************************************//
  ITSScheduler = interface(IDispatch)
    ['{E99AC0C8-46AB-42C3-9CB2-9C9AEC35A861}']
    procedure Run(TestData: OleVariant); safecall;
    procedure Stop(TestData: OleVariant); safecall;
    function Get_LogEnabled: WordBool; safecall;
    procedure Set_LogEnabled(pVal: WordBool); safecall;
    function Get_TdHostName: WideString; safecall;
    procedure Set_TdHostName(const pVal: WideString); safecall;
    function Get_HostTimeOut: Integer; safecall;
    procedure Set_HostTimeOut(pVal: Integer); safecall;
    function Get_RunAllLocally: WordBool; safecall;
    procedure Set_RunAllLocally(pVal: WordBool); safecall;
    function Get_ExecutionStatus: IDispatch; safecall;
    function Get_ExecutionLog: WideString; safecall;
    function Get_RunOnHost(TSTestId: OleVariant): WideString; safecall;
    procedure Set_RunOnHost(TSTestId: OleVariant; const pVal: WideString); safecall;
    function Get_VM_Config(TSTestId: OleVariant): WideString; safecall;
    procedure Set_VM_Config(TSTestId: OleVariant; const pVal: WideString); safecall;
    property LogEnabled: WordBool read Get_LogEnabled write Set_LogEnabled;
    property TdHostName: WideString read Get_TdHostName write Set_TdHostName;
    property HostTimeOut: Integer read Get_HostTimeOut write Set_HostTimeOut;
    property RunAllLocally: WordBool read Get_RunAllLocally write Set_RunAllLocally;
    property ExecutionStatus: IDispatch read Get_ExecutionStatus;
    property ExecutionLog: WideString read Get_ExecutionLog;
    property RunOnHost[TSTestId: OleVariant]: WideString read Get_RunOnHost write Set_RunOnHost;
    property VM_Config[TSTestId: OleVariant]: WideString read Get_VM_Config write Set_VM_Config;
  end;

// *********************************************************************//
// DispIntf:  ITSSchedulerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E99AC0C8-46AB-42C3-9CB2-9C9AEC35A861}
// *********************************************************************//
  ITSSchedulerDisp = dispinterface
    ['{E99AC0C8-46AB-42C3-9CB2-9C9AEC35A861}']
    procedure Run(TestData: OleVariant); dispid 1;
    procedure Stop(TestData: OleVariant); dispid 2;
    property LogEnabled: WordBool dispid 3;
    property TdHostName: WideString dispid 4;
    property HostTimeOut: Integer dispid 5;
    property RunAllLocally: WordBool dispid 6;
    property ExecutionStatus: IDispatch readonly dispid 7;
    property ExecutionLog: WideString readonly dispid 8;
    property RunOnHost[TSTestId: OleVariant]: WideString dispid 9;
    property VM_Config[TSTestId: OleVariant]: WideString dispid 10;
  end;

// *********************************************************************//
// Interface: IDBManager
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {437A2A3C-00EB-4B53-89C8-BBC5DED2D52C}
// *********************************************************************//
  IDBManager = interface(IDispatch)
    ['{437A2A3C-00EB-4B53-89C8-BBC5DED2D52C}']
    procedure CreateDatabase(DBType: SYSINT; const DBName: WideString; 
                             const ConnectionString: WideString); safecall;
    procedure RemoveDatabase(const DBName: WideString); safecall;
    function Get_AdminUserName: WideString; safecall;
    procedure Set_AdminUserName(const pVal: WideString); safecall;
    function Get_Domain: WideString; safecall;
    procedure Set_Domain(const pVal: WideString); safecall;
    function Get_AdminUserPassword: WideString; safecall;
    procedure Set_AdminUserPassword(const pVal: WideString); safecall;
    property AdminUserName: WideString read Get_AdminUserName write Set_AdminUserName;
    property Domain: WideString read Get_Domain write Set_Domain;
    property AdminUserPassword: WideString read Get_AdminUserPassword write Set_AdminUserPassword;
  end;

// *********************************************************************//
// DispIntf:  IDBManagerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {437A2A3C-00EB-4B53-89C8-BBC5DED2D52C}
// *********************************************************************//
  IDBManagerDisp = dispinterface
    ['{437A2A3C-00EB-4B53-89C8-BBC5DED2D52C}']
    procedure CreateDatabase(DBType: SYSINT; const DBName: WideString; 
                             const ConnectionString: WideString); dispid 1;
    procedure RemoveDatabase(const DBName: WideString); dispid 2;
    property AdminUserName: WideString dispid 3;
    property Domain: WideString dispid 4;
    property AdminUserPassword: WideString dispid 5;
  end;

// *********************************************************************//
// Interface: ICustomization
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9D4F53EF-41A2-4059-8AB3-13BBCA8333E8}
// *********************************************************************//
  ICustomization = interface(IObjectLockingSupport)
    ['{9D4F53EF-41A2-4059-8AB3-13BBCA8333E8}']
    procedure Load; safecall;
    procedure Commit; safecall;
    function Get_Fields: IDispatch; safecall;
    function Get_Lists: IDispatch; safecall;
    function Get_Permissions: IDispatch; safecall;
    function Get_Users: IDispatch; safecall;
    function Get_UsersGroups: IDispatch; safecall;
    function Get_Actions: IDispatch; safecall;
    function Get_Modules: IDispatch; safecall;
    function Get_MailConditions: IDispatch; safecall;
    function Get_ExtendedUDFSupport: Integer; safecall;
    property Fields: IDispatch read Get_Fields;
    property Lists: IDispatch read Get_Lists;
    property Permissions: IDispatch read Get_Permissions;
    property Users: IDispatch read Get_Users;
    property UsersGroups: IDispatch read Get_UsersGroups;
    property Actions: IDispatch read Get_Actions;
    property Modules: IDispatch read Get_Modules;
    property MailConditions: IDispatch read Get_MailConditions;
    property ExtendedUDFSupport: Integer read Get_ExtendedUDFSupport;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9D4F53EF-41A2-4059-8AB3-13BBCA8333E8}
// *********************************************************************//
  ICustomizationDisp = dispinterface
    ['{9D4F53EF-41A2-4059-8AB3-13BBCA8333E8}']
    procedure Load; dispid 4;
    procedure Commit; dispid 5;
    property Fields: IDispatch readonly dispid 6;
    property Lists: IDispatch readonly dispid 7;
    property Permissions: IDispatch readonly dispid 8;
    property Users: IDispatch readonly dispid 9;
    property UsersGroups: IDispatch readonly dispid 10;
    property Actions: IDispatch readonly dispid 11;
    property Modules: IDispatch readonly dispid 12;
    property MailConditions: IDispatch readonly dispid 13;
    property ExtendedUDFSupport: Integer readonly dispid 14;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: ICustomization2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {01A21FB9-74F1-4934-81F0-8C473F7A6E50}
// *********************************************************************//
  ICustomization2 = interface(ICustomization)
    ['{01A21FB9-74F1-4934-81F0-8C473F7A6E50}']
    function Get_IsChanged: WordBool; safecall;
    procedure Rollback; safecall;
    property IsChanged: WordBool read Get_IsChanged;
  end;

// *********************************************************************//
// DispIntf:  ICustomization2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {01A21FB9-74F1-4934-81F0-8C473F7A6E50}
// *********************************************************************//
  ICustomization2Disp = dispinterface
    ['{01A21FB9-74F1-4934-81F0-8C473F7A6E50}']
    property IsChanged: WordBool readonly dispid 15;
    procedure Rollback; dispid 16;
    procedure Load; dispid 4;
    procedure Commit; dispid 5;
    property Fields: IDispatch readonly dispid 6;
    property Lists: IDispatch readonly dispid 7;
    property Permissions: IDispatch readonly dispid 8;
    property Users: IDispatch readonly dispid 9;
    property UsersGroups: IDispatch readonly dispid 10;
    property Actions: IDispatch readonly dispid 11;
    property Modules: IDispatch readonly dispid 12;
    property MailConditions: IDispatch readonly dispid 13;
    property ExtendedUDFSupport: Integer readonly dispid 14;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: ICustomization3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D42ED49E-B4CD-4434-88E4-CB6A0521EF3A}
// *********************************************************************//
  ICustomization3 = interface(ICustomization2)
    ['{D42ED49E-B4CD-4434-88E4-CB6A0521EF3A}']
    function Get_Types: IDispatch; safecall;
    function Get_EntityDataTables: WideString; safecall;
    function Get_CustomizableEntitiesTables: IList; safecall;
    function Get_RBT: IDispatch; safecall;
    property Types: IDispatch read Get_Types;
    property EntityDataTables: WideString read Get_EntityDataTables;
    property CustomizableEntitiesTables: IList read Get_CustomizableEntitiesTables;
    property RBT: IDispatch read Get_RBT;
  end;

// *********************************************************************//
// DispIntf:  ICustomization3Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D42ED49E-B4CD-4434-88E4-CB6A0521EF3A}
// *********************************************************************//
  ICustomization3Disp = dispinterface
    ['{D42ED49E-B4CD-4434-88E4-CB6A0521EF3A}']
    property Types: IDispatch readonly dispid 17;
    property EntityDataTables: WideString readonly dispid 18;
    property CustomizableEntitiesTables: IList readonly dispid 19;
    property RBT: IDispatch readonly dispid 20;
    property IsChanged: WordBool readonly dispid 15;
    procedure Rollback; dispid 16;
    procedure Load; dispid 4;
    procedure Commit; dispid 5;
    property Fields: IDispatch readonly dispid 6;
    property Lists: IDispatch readonly dispid 7;
    property Permissions: IDispatch readonly dispid 8;
    property Users: IDispatch readonly dispid 9;
    property UsersGroups: IDispatch readonly dispid 10;
    property Actions: IDispatch readonly dispid 11;
    property Modules: IDispatch readonly dispid 12;
    property MailConditions: IDispatch readonly dispid 13;
    property ExtendedUDFSupport: Integer readonly dispid 14;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: ICustomizationField
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E34F74EC-DC52-42D8-A7E4-B4F06A56CF40}
// *********************************************************************//
  ICustomizationField = interface(IDispatch)
    ['{E34F74EC-DC52-42D8-A7E4-B4F06A56CF40}']
    function Get_UserLabel: WideString; safecall;
    procedure Set_UserLabel(const pVal: WideString); safecall;
    function Get_TableName: WideString; safecall;
    function Get_EditStyle: WideString; safecall;
    procedure Set_EditStyle(const pVal: WideString); safecall;
    function Get_IsSystem: WordBool; safecall;
    procedure Set_IsSystem(pVal: WordBool); safecall;
    function Get_IsCanFilter: WordBool; safecall;
    procedure Set_IsCanFilter(pVal: WordBool); safecall;
    function Get_IsKey: WordBool; safecall;
    procedure Set_IsKey(pVal: WordBool); safecall;
    function Get_KeyOrder: Integer; safecall;
    procedure Set_KeyOrder(pVal: Integer); safecall;
    function Get_IsActive: WordBool; safecall;
    procedure Set_IsActive(pVal: WordBool); safecall;
    function Get_IsEdit: WordBool; safecall;
    procedure Set_IsEdit(pVal: WordBool); safecall;
    function Get_IsHistory: WordBool; safecall;
    procedure Set_IsHistory(pVal: WordBool); safecall;
    function Get_IsMail: WordBool; safecall;
    procedure Set_IsMail(pVal: WordBool); safecall;
    function Get_IsVerify: WordBool; safecall;
    procedure Set_IsVerify(pVal: WordBool); safecall;
    function Get_IsByCode: WordBool; safecall;
    procedure Set_IsByCode(pVal: WordBool); safecall;
    function Get_IsRequired: WordBool; safecall;
    procedure Set_IsRequired(pVal: WordBool); safecall;
    function Get_UserColumnType: WideString; safecall;
    procedure Set_UserColumnType(const pVal: WideString); safecall;
    function Get_IsKeepValue: WordBool; safecall;
    procedure Set_IsKeepValue(pVal: WordBool); safecall;
    function Get_IsCustomizable: WordBool; safecall;
    procedure Set_IsCustomizable(pVal: WordBool); safecall;
    function Get_FieldSize: Integer; safecall;
    procedure Set_FieldSize(pVal: Integer); safecall;
    function Get_ColumnName: WideString; safecall;
    function Get_ColumnType: WideString; safecall;
    procedure Set_ColumnType(const pVal: WideString); safecall;
    function Get_EditMask: WideString; safecall;
    procedure Set_EditMask(const pVal: WideString); safecall;
    function Get_List: IDispatch; safecall;
    procedure Set_List(const pVal: IDispatch); safecall;
    function Get_RootId: OleVariant; safecall;
    procedure Set_RootId(pVal: OleVariant); safecall;
    function Get_type_: Integer; safecall;
    procedure Set_type_(pVal: Integer); safecall;
    function Get_Updated: WordBool; safecall;
    procedure Set_Updated(pVal: WordBool); safecall;
    function Get_GrantModifyMask: Integer; safecall;
    procedure Set_GrantModifyMask(pVal: Integer); safecall;
    function Get_OwnerSensibleMask: Integer; safecall;
    procedure Set_OwnerSensibleMask(pVal: Integer); safecall;
    function Get_IsVisibleInNewBug: Integer; safecall;
    procedure Set_IsVisibleInNewBug(pVal: Integer); safecall;
    function Get_IsTransitionLogic: WordBool; safecall;
    procedure Set_IsTransitionLogic(pVal: WordBool); safecall;
    function Get_DefaultValue: WideString; safecall;
    procedure Set_DefaultValue(const pVal: WideString); safecall;
    function Get_IsToSum: WordBool; safecall;
    procedure Set_IsToSum(pVal: WordBool); safecall;
    function Get_VisibleForGroups: Integer; safecall;
    procedure Set_VisibleForGroups(pVal: Integer); safecall;
    function Get_VersionControl: WordBool; safecall;
    procedure Set_VersionControl(pVal: WordBool); safecall;
    function Get_NewCreated: WordBool; safecall;
    procedure Set_NewCreated(pVal: WordBool); safecall;
    property UserLabel: WideString read Get_UserLabel write Set_UserLabel;
    property TableName: WideString read Get_TableName;
    property EditStyle: WideString read Get_EditStyle write Set_EditStyle;
    property IsSystem: WordBool read Get_IsSystem write Set_IsSystem;
    property IsCanFilter: WordBool read Get_IsCanFilter write Set_IsCanFilter;
    property IsKey: WordBool read Get_IsKey write Set_IsKey;
    property KeyOrder: Integer read Get_KeyOrder write Set_KeyOrder;
    property IsActive: WordBool read Get_IsActive write Set_IsActive;
    property IsEdit: WordBool read Get_IsEdit write Set_IsEdit;
    property IsHistory: WordBool read Get_IsHistory write Set_IsHistory;
    property IsMail: WordBool read Get_IsMail write Set_IsMail;
    property IsVerify: WordBool read Get_IsVerify write Set_IsVerify;
    property IsByCode: WordBool read Get_IsByCode write Set_IsByCode;
    property IsRequired: WordBool read Get_IsRequired write Set_IsRequired;
    property UserColumnType: WideString read Get_UserColumnType write Set_UserColumnType;
    property IsKeepValue: WordBool read Get_IsKeepValue write Set_IsKeepValue;
    property IsCustomizable: WordBool read Get_IsCustomizable write Set_IsCustomizable;
    property FieldSize: Integer read Get_FieldSize write Set_FieldSize;
    property ColumnName: WideString read Get_ColumnName;
    property ColumnType: WideString read Get_ColumnType write Set_ColumnType;
    property EditMask: WideString read Get_EditMask write Set_EditMask;
    property List: IDispatch read Get_List write Set_List;
    property RootId: OleVariant read Get_RootId write Set_RootId;
    property type_: Integer read Get_type_ write Set_type_;
    property Updated: WordBool read Get_Updated write Set_Updated;
    property GrantModifyMask: Integer read Get_GrantModifyMask write Set_GrantModifyMask;
    property OwnerSensibleMask: Integer read Get_OwnerSensibleMask write Set_OwnerSensibleMask;
    property IsVisibleInNewBug: Integer read Get_IsVisibleInNewBug write Set_IsVisibleInNewBug;
    property IsTransitionLogic: WordBool read Get_IsTransitionLogic write Set_IsTransitionLogic;
    property DefaultValue: WideString read Get_DefaultValue write Set_DefaultValue;
    property IsToSum: WordBool read Get_IsToSum write Set_IsToSum;
    property VisibleForGroups: Integer read Get_VisibleForGroups write Set_VisibleForGroups;
    property VersionControl: WordBool read Get_VersionControl write Set_VersionControl;
    property NewCreated: WordBool read Get_NewCreated write Set_NewCreated;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationFieldDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E34F74EC-DC52-42D8-A7E4-B4F06A56CF40}
// *********************************************************************//
  ICustomizationFieldDisp = dispinterface
    ['{E34F74EC-DC52-42D8-A7E4-B4F06A56CF40}']
    property UserLabel: WideString dispid 1;
    property TableName: WideString readonly dispid 2;
    property EditStyle: WideString dispid 3;
    property IsSystem: WordBool dispid 4;
    property IsCanFilter: WordBool dispid 5;
    property IsKey: WordBool dispid 6;
    property KeyOrder: Integer dispid 7;
    property IsActive: WordBool dispid 8;
    property IsEdit: WordBool dispid 9;
    property IsHistory: WordBool dispid 10;
    property IsMail: WordBool dispid 11;
    property IsVerify: WordBool dispid 12;
    property IsByCode: WordBool dispid 13;
    property IsRequired: WordBool dispid 14;
    property UserColumnType: WideString dispid 15;
    property IsKeepValue: WordBool dispid 16;
    property IsCustomizable: WordBool dispid 17;
    property FieldSize: Integer dispid 18;
    property ColumnName: WideString readonly dispid 19;
    property ColumnType: WideString dispid 20;
    property EditMask: WideString dispid 21;
    property List: IDispatch dispid 22;
    property RootId: OleVariant dispid 23;
    property type_: Integer dispid 24;
    property Updated: WordBool dispid 25;
    property GrantModifyMask: Integer dispid 26;
    property OwnerSensibleMask: Integer dispid 27;
    property IsVisibleInNewBug: Integer dispid 28;
    property IsTransitionLogic: WordBool dispid 29;
    property DefaultValue: WideString dispid 30;
    property IsToSum: WordBool dispid 31;
    property VisibleForGroups: Integer dispid 32;
    property VersionControl: WordBool dispid 33;
    property NewCreated: WordBool dispid 34;
  end;

// *********************************************************************//
// Interface: ICustomizationField2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2FA7E440-704F-4EFE-B500-EB93E7AFD294}
// *********************************************************************//
  ICustomizationField2 = interface(ICustomizationField)
    ['{2FA7E440-704F-4EFE-B500-EB93E7AFD294}']
    function Get_GrantModifyForGroup(Group: OleVariant): WordBool; safecall;
    procedure Set_GrantModifyForGroup(Group: OleVariant; pGrant: WordBool); safecall;
    function Get_AuthorizedModifyForGroups: IList; safecall;
    function Get_OwnerSensibleForGroup(Group: OleVariant): WordBool; safecall;
    procedure Set_OwnerSensibleForGroup(Group: OleVariant; pGrant: WordBool); safecall;
    function Get_AuthorizedOwnerSensibleForGroups: IList; safecall;
    function Get_VisibleInNewBugForGroup(Group: OleVariant): WordBool; safecall;
    procedure Set_VisibleInNewBugForGroup(Group: OleVariant; pGrant: WordBool); safecall;
    function Get_AuthorizedVisibleInNewBugForGroups: IList; safecall;
    function Get_VisibleForGroup(Group: OleVariant): WordBool; safecall;
    procedure Set_VisibleForGroup(Group: OleVariant; pGrant: WordBool); safecall;
    function Get_AuthorizedVisibleForGroups: IList; safecall;
    function Get_IsCanGroup: WordBool; safecall;
    procedure Set_IsCanGroup(pVal: WordBool); safecall;
    function Get_AuditUpdate: WordBool; safecall;
    procedure Set_AuditUpdate(pVal: WordBool); safecall;
    function Get_IsSearchable: WordBool; safecall;
    procedure Set_IsSearchable(pVal: WordBool); safecall;
    function Get_CanMakeSearchable: WordBool; safecall;
    function Get_IsVirtual: WordBool; safecall;
    function Get_IsMultiValue: WordBool; safecall;
    procedure Set_IsMultiValue(pVal: WordBool); safecall;
    function Get_CanMakeMultiValue: WordBool; safecall;
    property GrantModifyForGroup[Group: OleVariant]: WordBool read Get_GrantModifyForGroup write Set_GrantModifyForGroup;
    property AuthorizedModifyForGroups: IList read Get_AuthorizedModifyForGroups;
    property OwnerSensibleForGroup[Group: OleVariant]: WordBool read Get_OwnerSensibleForGroup write Set_OwnerSensibleForGroup;
    property AuthorizedOwnerSensibleForGroups: IList read Get_AuthorizedOwnerSensibleForGroups;
    property VisibleInNewBugForGroup[Group: OleVariant]: WordBool read Get_VisibleInNewBugForGroup write Set_VisibleInNewBugForGroup;
    property AuthorizedVisibleInNewBugForGroups: IList read Get_AuthorizedVisibleInNewBugForGroups;
    property VisibleForGroup[Group: OleVariant]: WordBool read Get_VisibleForGroup write Set_VisibleForGroup;
    property AuthorizedVisibleForGroups: IList read Get_AuthorizedVisibleForGroups;
    property IsCanGroup: WordBool read Get_IsCanGroup write Set_IsCanGroup;
    property AuditUpdate: WordBool read Get_AuditUpdate write Set_AuditUpdate;
    property IsSearchable: WordBool read Get_IsSearchable write Set_IsSearchable;
    property CanMakeSearchable: WordBool read Get_CanMakeSearchable;
    property IsVirtual: WordBool read Get_IsVirtual;
    property IsMultiValue: WordBool read Get_IsMultiValue write Set_IsMultiValue;
    property CanMakeMultiValue: WordBool read Get_CanMakeMultiValue;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationField2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2FA7E440-704F-4EFE-B500-EB93E7AFD294}
// *********************************************************************//
  ICustomizationField2Disp = dispinterface
    ['{2FA7E440-704F-4EFE-B500-EB93E7AFD294}']
    property GrantModifyForGroup[Group: OleVariant]: WordBool dispid 35;
    property AuthorizedModifyForGroups: IList readonly dispid 36;
    property OwnerSensibleForGroup[Group: OleVariant]: WordBool dispid 37;
    property AuthorizedOwnerSensibleForGroups: IList readonly dispid 38;
    property VisibleInNewBugForGroup[Group: OleVariant]: WordBool dispid 39;
    property AuthorizedVisibleInNewBugForGroups: IList readonly dispid 40;
    property VisibleForGroup[Group: OleVariant]: WordBool dispid 41;
    property AuthorizedVisibleForGroups: IList readonly dispid 42;
    property IsCanGroup: WordBool dispid 43;
    property AuditUpdate: WordBool dispid 44;
    property IsSearchable: WordBool dispid 45;
    property CanMakeSearchable: WordBool readonly dispid 46;
    property IsVirtual: WordBool readonly dispid 47;
    property IsMultiValue: WordBool dispid 48;
    property CanMakeMultiValue: WordBool readonly dispid 49;
    property UserLabel: WideString dispid 1;
    property TableName: WideString readonly dispid 2;
    property EditStyle: WideString dispid 3;
    property IsSystem: WordBool dispid 4;
    property IsCanFilter: WordBool dispid 5;
    property IsKey: WordBool dispid 6;
    property KeyOrder: Integer dispid 7;
    property IsActive: WordBool dispid 8;
    property IsEdit: WordBool dispid 9;
    property IsHistory: WordBool dispid 10;
    property IsMail: WordBool dispid 11;
    property IsVerify: WordBool dispid 12;
    property IsByCode: WordBool dispid 13;
    property IsRequired: WordBool dispid 14;
    property UserColumnType: WideString dispid 15;
    property IsKeepValue: WordBool dispid 16;
    property IsCustomizable: WordBool dispid 17;
    property FieldSize: Integer dispid 18;
    property ColumnName: WideString readonly dispid 19;
    property ColumnType: WideString dispid 20;
    property EditMask: WideString dispid 21;
    property List: IDispatch dispid 22;
    property RootId: OleVariant dispid 23;
    property type_: Integer dispid 24;
    property Updated: WordBool dispid 25;
    property GrantModifyMask: Integer dispid 26;
    property OwnerSensibleMask: Integer dispid 27;
    property IsVisibleInNewBug: Integer dispid 28;
    property IsTransitionLogic: WordBool dispid 29;
    property DefaultValue: WideString dispid 30;
    property IsToSum: WordBool dispid 31;
    property VisibleForGroups: Integer dispid 32;
    property VersionControl: WordBool dispid 33;
    property NewCreated: WordBool dispid 34;
  end;

// *********************************************************************//
// Interface: ICustomizationFields
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6388B1FB-C735-4D24-B1E4-97221B302461}
// *********************************************************************//
  ICustomizationFields = interface(IDispatch)
    ['{6388B1FB-C735-4D24-B1E4-97221B302461}']
    function Get_Field(const TableName: WideString; const FieldName: WideString): IDispatch; safecall;
    function Get_Fields(const TableName: WideString): IList; safecall;
    function AddActiveField(const TableName: WideString): IDispatch; safecall;
    function Get_FieldExists(const TableName: WideString; const FieldName: WideString): WordBool; safecall;
    function AddActiveMemoField(const TableName: WideString): IDispatch; safecall;
    property Field[const TableName: WideString; const FieldName: WideString]: IDispatch read Get_Field;
    property Fields[const TableName: WideString]: IList read Get_Fields;
    property FieldExists[const TableName: WideString; const FieldName: WideString]: WordBool read Get_FieldExists;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationFieldsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6388B1FB-C735-4D24-B1E4-97221B302461}
// *********************************************************************//
  ICustomizationFieldsDisp = dispinterface
    ['{6388B1FB-C735-4D24-B1E4-97221B302461}']
    property Field[const TableName: WideString; const FieldName: WideString]: IDispatch readonly dispid 1;
    property Fields[const TableName: WideString]: IList readonly dispid 2;
    function AddActiveField(const TableName: WideString): IDispatch; dispid 3;
    property FieldExists[const TableName: WideString; const FieldName: WideString]: WordBool readonly dispid 4;
    function AddActiveMemoField(const TableName: WideString): IDispatch; dispid 5;
  end;

// *********************************************************************//
// Interface: ICustomizationLists
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4EA26B82-65DC-4315-AD7F-D963A1C4EB2F}
// *********************************************************************//
  ICustomizationLists = interface(IDispatch)
    ['{4EA26B82-65DC-4315-AD7F-D963A1C4EB2F}']
    function AddList(const Name: WideString): IDispatch; safecall;
    procedure RemoveList(const Name: WideString); safecall;
    function Get_List(Param: OleVariant): IDispatch; safecall;
    function Get_Count: Integer; safecall;
    function Get_ListByCount(Count: Integer): IDispatch; safecall;
    function Get_IsListExist(const ListName: WideString): WordBool; safecall;
    property List[Param: OleVariant]: IDispatch read Get_List;
    property Count: Integer read Get_Count;
    property ListByCount[Count: Integer]: IDispatch read Get_ListByCount;
    property IsListExist[const ListName: WideString]: WordBool read Get_IsListExist;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationListsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4EA26B82-65DC-4315-AD7F-D963A1C4EB2F}
// *********************************************************************//
  ICustomizationListsDisp = dispinterface
    ['{4EA26B82-65DC-4315-AD7F-D963A1C4EB2F}']
    function AddList(const Name: WideString): IDispatch; dispid 1;
    procedure RemoveList(const Name: WideString); dispid 2;
    property List[Param: OleVariant]: IDispatch readonly dispid 3;
    property Count: Integer readonly dispid 4;
    property ListByCount[Count: Integer]: IDispatch readonly dispid 5;
    property IsListExist[const ListName: WideString]: WordBool readonly dispid 6;
  end;

// *********************************************************************//
// Interface: ICustomizationList
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1E1C07CA-7339-4741-A41D-DEC5A065B1F1}
// *********************************************************************//
  ICustomizationList = interface(IDispatch)
    ['{1E1C07CA-7339-4741-A41D-DEC5A065B1F1}']
    function Get_RootNode: IDispatch; safecall;
    function Get_Name: WideString; safecall;
    function Find(Val: OleVariant): IDispatch; safecall;
    function Get_Deleted: WordBool; safecall;
    procedure Set_Deleted(pVal: WordBool); safecall;
    property RootNode: IDispatch read Get_RootNode;
    property Name: WideString read Get_Name;
    property Deleted: WordBool read Get_Deleted write Set_Deleted;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationListDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1E1C07CA-7339-4741-A41D-DEC5A065B1F1}
// *********************************************************************//
  ICustomizationListDisp = dispinterface
    ['{1E1C07CA-7339-4741-A41D-DEC5A065B1F1}']
    property RootNode: IDispatch readonly dispid 1;
    property Name: WideString readonly dispid 2;
    function Find(Val: OleVariant): IDispatch; dispid 3;
    property Deleted: WordBool dispid 4;
  end;

// *********************************************************************//
// Interface: ICustomizationListNode
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {18C04A97-2141-4852-8E02-0E79D3CAEAD3}
// *********************************************************************//
  ICustomizationListNode = interface(IDispatch)
    ['{18C04A97-2141-4852-8E02-0E79D3CAEAD3}']
    function AddChild(Node: OleVariant): IDispatch; safecall;
    procedure RemoveChild(Node: OleVariant); safecall;
    function Get_Child(const NodeName: WideString): IDispatch; safecall;
    function Get_Children: IList; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    function Get_ID: Integer; safecall;
    procedure Set_ID(pVal: Integer); safecall;
    function Get_Father: IDispatch; safecall;
    procedure Set_Father(const pVal: IDispatch); safecall;
    function Get_CanAddChild: WordBool; safecall;
    function Get_ReadOnly: WordBool; safecall;
    function Get_List: IDispatch; safecall;
    function Get_ChildrenCount: Integer; safecall;
    function Get_Updated: WordBool; safecall;
    procedure Set_Updated(pVal: WordBool); safecall;
    function Get_Deleted: WordBool; safecall;
    procedure Set_Deleted(pVal: WordBool); safecall;
    function Get_Order: Integer; safecall;
    procedure Set_Order(pVal: Integer); safecall;
    property Child[const NodeName: WideString]: IDispatch read Get_Child;
    property Children: IList read Get_Children;
    property Name: WideString read Get_Name write Set_Name;
    property ID: Integer read Get_ID write Set_ID;
    property Father: IDispatch read Get_Father write Set_Father;
    property CanAddChild: WordBool read Get_CanAddChild;
    property ReadOnly: WordBool read Get_ReadOnly;
    property List: IDispatch read Get_List;
    property ChildrenCount: Integer read Get_ChildrenCount;
    property Updated: WordBool read Get_Updated write Set_Updated;
    property Deleted: WordBool read Get_Deleted write Set_Deleted;
    property Order: Integer read Get_Order write Set_Order;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationListNodeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {18C04A97-2141-4852-8E02-0E79D3CAEAD3}
// *********************************************************************//
  ICustomizationListNodeDisp = dispinterface
    ['{18C04A97-2141-4852-8E02-0E79D3CAEAD3}']
    function AddChild(Node: OleVariant): IDispatch; dispid 1;
    procedure RemoveChild(Node: OleVariant); dispid 2;
    property Child[const NodeName: WideString]: IDispatch readonly dispid 3;
    property Children: IList readonly dispid 4;
    property Name: WideString dispid 5;
    property ID: Integer dispid 6;
    property Father: IDispatch dispid 7;
    property CanAddChild: WordBool readonly dispid 8;
    property ReadOnly: WordBool readonly dispid 9;
    property List: IDispatch readonly dispid 10;
    property ChildrenCount: Integer readonly dispid 11;
    property Updated: WordBool dispid 12;
    property Deleted: WordBool dispid 13;
    property Order: Integer dispid 14;
  end;

// *********************************************************************//
// Interface: ICustomizationTypedField
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {780EDB90-97D3-4146-AD5F-F2F313EDF29E}
// *********************************************************************//
  ICustomizationTypedField = interface(IDispatch)
    ['{780EDB90-97D3-4146-AD5F-F2F313EDF29E}']
    function Get_Field: IDispatch; safecall;
    function Get_type_: IDispatch; safecall;
    function Get_IsRequired: WordBool; safecall;
    procedure Set_IsRequired(pbRequired: WordBool); safecall;
    property Field: IDispatch read Get_Field;
    property type_: IDispatch read Get_type_;
    property IsRequired: WordBool read Get_IsRequired write Set_IsRequired;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationTypedFieldDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {780EDB90-97D3-4146-AD5F-F2F313EDF29E}
// *********************************************************************//
  ICustomizationTypedFieldDisp = dispinterface
    ['{780EDB90-97D3-4146-AD5F-F2F313EDF29E}']
    property Field: IDispatch readonly dispid 1;
    property type_: IDispatch readonly dispid 2;
    property IsRequired: WordBool dispid 3;
  end;

// *********************************************************************//
// Interface: ICustomizationTypes
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {30873CCD-888B-4383-AECD-6C4D9EFF553F}
// *********************************************************************//
  ICustomizationTypes = interface(IDispatch)
    ['{30873CCD-888B-4383-AECD-6C4D9EFF553F}']
    function AddCustomizationType(EntityType: Integer; const Name: WideString; 
                                  CreateAsTypeId: Integer): IDispatch; safecall;
    procedure RemoveCustomizationType(EntityType: Integer; CustomizationTypeId: Integer); safecall;
    function GetEntityCustomizationTypes(EntityType: Integer): IList; safecall;
    function GetEntityCustomizationType(EntityType: Integer; CustomizationTypeId: Integer): IDispatch; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationTypesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {30873CCD-888B-4383-AECD-6C4D9EFF553F}
// *********************************************************************//
  ICustomizationTypesDisp = dispinterface
    ['{30873CCD-888B-4383-AECD-6C4D9EFF553F}']
    function AddCustomizationType(EntityType: Integer; const Name: WideString; 
                                  CreateAsTypeId: Integer): IDispatch; dispid 1;
    procedure RemoveCustomizationType(EntityType: Integer; CustomizationTypeId: Integer); dispid 2;
    function GetEntityCustomizationTypes(EntityType: Integer): IList; dispid 3;
    function GetEntityCustomizationType(EntityType: Integer; CustomizationTypeId: Integer): IDispatch; dispid 4;
  end;

// *********************************************************************//
// Interface: ITableProperties
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C015CC00-5F0F-4DD6-9D8C-733B1412BB1B}
// *********************************************************************//
  ITableProperties = interface(IDispatch)
    ['{C015CC00-5F0F-4DD6-9D8C-733B1412BB1B}']
    function Get_Name: WideString; safecall;
    function Get_UserLabel: WideString; safecall;
    property Name: WideString read Get_Name;
    property UserLabel: WideString read Get_UserLabel;
  end;

// *********************************************************************//
// DispIntf:  ITablePropertiesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C015CC00-5F0F-4DD6-9D8C-733B1412BB1B}
// *********************************************************************//
  ITablePropertiesDisp = dispinterface
    ['{C015CC00-5F0F-4DD6-9D8C-733B1412BB1B}']
    property Name: WideString readonly dispid 1;
    property UserLabel: WideString readonly dispid 2;
  end;

// *********************************************************************//
// Interface: ICustomizationType
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB345576-4831-4653-816F-791478BFE555}
// *********************************************************************//
  ICustomizationType = interface(IDispatch)
    ['{EB345576-4831-4653-816F-791478BFE555}']
    function Get_ID: Integer; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    function Get_Fields: IList; safecall;
    function Get_Field(const FieldName: WideString): IDispatch; safecall;
    function AddField(const NewFieldName: WideString): IDispatch; safecall;
    procedure RemoveField(const FieldName: WideString); safecall;
    function Get_Icon: IStream; safecall;
    procedure Set_Icon(const pBitMap: IStream); safecall;
    function Get_EditingControl: WideString; safecall;
    procedure Set_EditingControl(const pVal: WideString); safecall;
    function Get_Prefix: WideString; safecall;
    procedure Set_Prefix(const pVal: WideString); safecall;
    property ID: Integer read Get_ID;
    property Name: WideString read Get_Name write Set_Name;
    property Fields: IList read Get_Fields;
    property Field[const FieldName: WideString]: IDispatch read Get_Field;
    property Icon: IStream read Get_Icon write Set_Icon;
    property EditingControl: WideString read Get_EditingControl write Set_EditingControl;
    property Prefix: WideString read Get_Prefix write Set_Prefix;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationTypeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB345576-4831-4653-816F-791478BFE555}
// *********************************************************************//
  ICustomizationTypeDisp = dispinterface
    ['{EB345576-4831-4653-816F-791478BFE555}']
    property ID: Integer readonly dispid 1;
    property Name: WideString dispid 2;
    property Fields: IList readonly dispid 3;
    property Field[const FieldName: WideString]: IDispatch readonly dispid 4;
    function AddField(const NewFieldName: WideString): IDispatch; dispid 5;
    procedure RemoveField(const FieldName: WideString); dispid 6;
    property Icon: IStream dispid 7;
    property EditingControl: WideString dispid 8;
    property Prefix: WideString dispid 9;
  end;

// *********************************************************************//
// Interface: ICustomizationReqType
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {05518018-2339-4E08-87BE-D14C69527B7A}
// *********************************************************************//
  ICustomizationReqType = interface(ICustomizationType)
    ['{05518018-2339-4E08-87BE-D14C69527B7A}']
    function Get_HasDirectCoverage: WordBool; safecall;
    procedure Set_HasDirectCoverage(pVal: WordBool); safecall;
    function Get_RiskAnalysisType: Integer; safecall;
    procedure Set_RiskAnalysisType(pVal: Integer); safecall;
    property HasDirectCoverage: WordBool read Get_HasDirectCoverage write Set_HasDirectCoverage;
    property RiskAnalysisType: Integer read Get_RiskAnalysisType write Set_RiskAnalysisType;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationReqTypeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {05518018-2339-4E08-87BE-D14C69527B7A}
// *********************************************************************//
  ICustomizationReqTypeDisp = dispinterface
    ['{05518018-2339-4E08-87BE-D14C69527B7A}']
    property HasDirectCoverage: WordBool dispid 10;
    property RiskAnalysisType: Integer dispid 11;
    property ID: Integer readonly dispid 1;
    property Name: WideString dispid 2;
    property Fields: IList readonly dispid 3;
    property Field[const FieldName: WideString]: IDispatch readonly dispid 4;
    function AddField(const NewFieldName: WideString): IDispatch; dispid 5;
    procedure RemoveField(const FieldName: WideString); dispid 6;
    property Icon: IStream dispid 7;
    property EditingControl: WideString dispid 8;
    property Prefix: WideString dispid 9;
  end;

// *********************************************************************//
// Interface: ICustomizationRBT
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ACAEB7E2-FD86-4A8C-957E-A934FB730219}
// *********************************************************************//
  ICustomizationRBT = interface(IDispatch)
    ['{ACAEB7E2-FD86-4A8C-957E-A934FB730219}']
    function Get_BIQuestions: IList; safecall;
    function Get_BIQuestionByID(ID: Integer): IDispatch; safecall;
    function AddBIQuestion: IDispatch; safecall;
    procedure DeleteBIQuestion(ID: Integer); safecall;
    function Get_FPQuestions: IList; safecall;
    function Get_FPQuestionByID(ID: Integer): IDispatch; safecall;
    function AddFPQuestion: IDispatch; safecall;
    procedure DeleteFPQuestion(ID: Integer); safecall;
    function Get_TestingPolicyMatrix(BILevel: Integer; FPLevel: Integer): Integer; safecall;
    procedure Set_TestingPolicyMatrix(BILevel: Integer; FPLevel: Integer; pTestingLevel: Integer); safecall;
    function Get_TestingLevelPercentage(TestingLevel: Integer): Integer; safecall;
    procedure Set_TestingLevelPercentage(TestingLevel: Integer; pPercentage: Integer); safecall;
    function Get_FPLevelTestingEffortInHours(FPLevel: Integer): Integer; safecall;
    procedure Set_FPLevelTestingEffortInHours(FPLevel: Integer; pHours: Integer); safecall;
    function Get_BILevelRiskLowerThreshold(BILevel: Integer): Integer; safecall;
    procedure Set_BILevelRiskLowerThreshold(BILevel: Integer; pLowerThreshold: Integer); safecall;
    function Get_FPLevelRiskLowerThreshold(FPLevel: Integer): Integer; safecall;
    procedure Set_FPLevelRiskLowerThreshold(FPLevel: Integer; pLowerThreshold: Integer); safecall;
    function Get_DisplayedTimeUnits: WideString; safecall;
    procedure Set_DisplayedTimeUnits(const pDisplayedTimeUnits: WideString); safecall;
    function Get_Updated: WordBool; safecall;
    function TranslateFPLevel(FPLevelEnum: Integer): WideString; safecall;
    function TranslateBILevel(BILevelEnum: Integer): WideString; safecall;
    function TranslateTestingLevel(TestingLevelEnum: Integer): WideString; safecall;
    function CalcBILevelByAnswersWeight(AnswersWeight: Integer): Integer; safecall;
    function CalcFPLevelByAnswersWeight(AnswersWeight: Integer): Integer; safecall;
    property BIQuestions: IList read Get_BIQuestions;
    property BIQuestionByID[ID: Integer]: IDispatch read Get_BIQuestionByID;
    property FPQuestions: IList read Get_FPQuestions;
    property FPQuestionByID[ID: Integer]: IDispatch read Get_FPQuestionByID;
    property TestingPolicyMatrix[BILevel: Integer; FPLevel: Integer]: Integer read Get_TestingPolicyMatrix write Set_TestingPolicyMatrix;
    property TestingLevelPercentage[TestingLevel: Integer]: Integer read Get_TestingLevelPercentage write Set_TestingLevelPercentage;
    property FPLevelTestingEffortInHours[FPLevel: Integer]: Integer read Get_FPLevelTestingEffortInHours write Set_FPLevelTestingEffortInHours;
    property BILevelRiskLowerThreshold[BILevel: Integer]: Integer read Get_BILevelRiskLowerThreshold write Set_BILevelRiskLowerThreshold;
    property FPLevelRiskLowerThreshold[FPLevel: Integer]: Integer read Get_FPLevelRiskLowerThreshold write Set_FPLevelRiskLowerThreshold;
    property DisplayedTimeUnits: WideString read Get_DisplayedTimeUnits write Set_DisplayedTimeUnits;
    property Updated: WordBool read Get_Updated;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationRBTDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ACAEB7E2-FD86-4A8C-957E-A934FB730219}
// *********************************************************************//
  ICustomizationRBTDisp = dispinterface
    ['{ACAEB7E2-FD86-4A8C-957E-A934FB730219}']
    property BIQuestions: IList readonly dispid 1;
    property BIQuestionByID[ID: Integer]: IDispatch readonly dispid 2;
    function AddBIQuestion: IDispatch; dispid 3;
    procedure DeleteBIQuestion(ID: Integer); dispid 4;
    property FPQuestions: IList readonly dispid 11;
    property FPQuestionByID[ID: Integer]: IDispatch readonly dispid 12;
    function AddFPQuestion: IDispatch; dispid 13;
    procedure DeleteFPQuestion(ID: Integer); dispid 14;
    property TestingPolicyMatrix[BILevel: Integer; FPLevel: Integer]: Integer dispid 20;
    property TestingLevelPercentage[TestingLevel: Integer]: Integer dispid 21;
    property FPLevelTestingEffortInHours[FPLevel: Integer]: Integer dispid 22;
    property BILevelRiskLowerThreshold[BILevel: Integer]: Integer dispid 23;
    property FPLevelRiskLowerThreshold[FPLevel: Integer]: Integer dispid 24;
    property DisplayedTimeUnits: WideString dispid 25;
    property Updated: WordBool readonly dispid 30;
    function TranslateFPLevel(FPLevelEnum: Integer): WideString; dispid 40;
    function TranslateBILevel(BILevelEnum: Integer): WideString; dispid 41;
    function TranslateTestingLevel(TestingLevelEnum: Integer): WideString; dispid 42;
    function CalcBILevelByAnswersWeight(AnswersWeight: Integer): Integer; dispid 50;
    function CalcFPLevelByAnswersWeight(AnswersWeight: Integer): Integer; dispid 51;
  end;

// *********************************************************************//
// Interface: ICustomizationRBTQuestion
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D641AF43-F4B6-4F9C-AC81-413557DC576C}
// *********************************************************************//
  ICustomizationRBTQuestion = interface(IDispatch)
    ['{D641AF43-F4B6-4F9C-AC81-413557DC576C}']
    function Get_ID: Integer; safecall;
    function Get_Answers: IList; safecall;
    function Get_AnswerByID(ID: Integer): IDispatch; safecall;
    function AddAnswer: IDispatch; safecall;
    procedure DeleteAnswer(ID: Integer); safecall;
    function Get_QuestionText: WideString; safecall;
    procedure Set_QuestionText(const pQuestionText: WideString); safecall;
    function Get_QuestionDescription: WideString; safecall;
    procedure Set_QuestionDescription(const pQuestionDescription: WideString); safecall;
    function Get_QuestionOrder: Integer; safecall;
    procedure Set_QuestionOrder(pnQuestionOrder: Integer); safecall;
    property ID: Integer read Get_ID;
    property Answers: IList read Get_Answers;
    property AnswerByID[ID: Integer]: IDispatch read Get_AnswerByID;
    property QuestionText: WideString read Get_QuestionText write Set_QuestionText;
    property QuestionDescription: WideString read Get_QuestionDescription write Set_QuestionDescription;
    property QuestionOrder: Integer read Get_QuestionOrder write Set_QuestionOrder;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationRBTQuestionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D641AF43-F4B6-4F9C-AC81-413557DC576C}
// *********************************************************************//
  ICustomizationRBTQuestionDisp = dispinterface
    ['{D641AF43-F4B6-4F9C-AC81-413557DC576C}']
    property ID: Integer readonly dispid 1;
    property Answers: IList readonly dispid 2;
    property AnswerByID[ID: Integer]: IDispatch readonly dispid 3;
    function AddAnswer: IDispatch; dispid 4;
    procedure DeleteAnswer(ID: Integer); dispid 5;
    property QuestionText: WideString dispid 10;
    property QuestionDescription: WideString dispid 11;
    property QuestionOrder: Integer dispid 12;
  end;

// *********************************************************************//
// Interface: ICustomizationRBTAnswer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {75D8B306-2274-4D9B-9DF4-491A7D2A9B9A}
// *********************************************************************//
  ICustomizationRBTAnswer = interface(IDispatch)
    ['{75D8B306-2274-4D9B-9DF4-491A7D2A9B9A}']
    function Get_ID: Integer; safecall;
    function Get_AnswerText: WideString; safecall;
    procedure Set_AnswerText(const pAnswerText: WideString); safecall;
    function Get_AnswerWeight: Integer; safecall;
    procedure Set_AnswerWeight(pAnswerWeight: Integer); safecall;
    property ID: Integer read Get_ID;
    property AnswerText: WideString read Get_AnswerText write Set_AnswerText;
    property AnswerWeight: Integer read Get_AnswerWeight write Set_AnswerWeight;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationRBTAnswerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {75D8B306-2274-4D9B-9DF4-491A7D2A9B9A}
// *********************************************************************//
  ICustomizationRBTAnswerDisp = dispinterface
    ['{75D8B306-2274-4D9B-9DF4-491A7D2A9B9A}']
    property ID: Integer readonly dispid 1;
    property AnswerText: WideString dispid 2;
    property AnswerWeight: Integer dispid 3;
  end;

// *********************************************************************//
// Interface: ISettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {55110A8D-110B-460C-9D28-F8B4BCF3DFF0}
// *********************************************************************//
  ISettings = interface(IDispatch)
    ['{55110A8D-110B-460C-9D28-F8B4BCF3DFF0}']
    procedure Open(const Category: WideString); safecall;
    function Get_Value(const Name: WideString): WideString; safecall;
    procedure Set_Value(const Name: WideString; const pVal: WideString); safecall;
    procedure Close; safecall;
    procedure DeleteCategory(const Category: WideString); safecall;
    procedure DeleteValue(const Name: WideString); safecall;
    function Get_EnumItems: IList; safecall;
    procedure Post; safecall;
    procedure Refresh(const Category: WideString); safecall;
    property Value[const Name: WideString]: WideString read Get_Value write Set_Value;
    property EnumItems: IList read Get_EnumItems;
  end;

// *********************************************************************//
// DispIntf:  ISettingsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {55110A8D-110B-460C-9D28-F8B4BCF3DFF0}
// *********************************************************************//
  ISettingsDisp = dispinterface
    ['{55110A8D-110B-460C-9D28-F8B4BCF3DFF0}']
    procedure Open(const Category: WideString); dispid 1;
    property Value[const Name: WideString]: WideString dispid 2;
    procedure Close; dispid 3;
    procedure DeleteCategory(const Category: WideString); dispid 4;
    procedure DeleteValue(const Name: WideString); dispid 5;
    property EnumItems: IList readonly dispid 6;
    procedure Post; dispid 7;
    procedure Refresh(const Category: WideString); dispid 8;
  end;

// *********************************************************************//
// Interface: ISettings2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B761098B-AC59-4C3D-A427-D09231A402B8}
// *********************************************************************//
  ISettings2 = interface(ISettings)
    ['{B761098B-AC59-4C3D-A427-D09231A402B8}']
    function Get_IsSystem(const Name: WideString): WordBool; safecall;
    property IsSystem[const Name: WideString]: WordBool read Get_IsSystem;
  end;

// *********************************************************************//
// DispIntf:  ISettings2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B761098B-AC59-4C3D-A427-D09231A402B8}
// *********************************************************************//
  ISettings2Disp = dispinterface
    ['{B761098B-AC59-4C3D-A427-D09231A402B8}']
    property IsSystem[const Name: WideString]: WordBool readonly dispid 9;
    procedure Open(const Category: WideString); dispid 1;
    property Value[const Name: WideString]: WideString dispid 2;
    procedure Close; dispid 3;
    procedure DeleteCategory(const Category: WideString); dispid 4;
    procedure DeleteValue(const Name: WideString); dispid 5;
    property EnumItems: IList readonly dispid 6;
    procedure Post; dispid 7;
    procedure Refresh(const Category: WideString); dispid 8;
  end;

// *********************************************************************//
// Interface: ITDMailConditions
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FCA0B016-AC98-4E63-A7EE-34759BF8038C}
// *********************************************************************//
  ITDMailConditions = interface(IObjectLockingSupport)
    ['{FCA0B016-AC98-4E63-A7EE-34759BF8038C}']
    procedure Load; safecall;
    function Get_Condition(const Name: WideString; IsUserCondition: WordBool): WideString; safecall;
    procedure Set_Condition(const Name: WideString; IsUserCondition: WordBool; 
                            const pVal: WideString); safecall;
    procedure DeleteCondition(const Name: WideString; IsUserCondition: WordBool); safecall;
    procedure Close(NeedToSave: WordBool); safecall;
    function Get_ItemList(GetRealNames: WordBool): IList; safecall;
    property Condition[const Name: WideString; IsUserCondition: WordBool]: WideString read Get_Condition write Set_Condition;
    property ItemList[GetRealNames: WordBool]: IList read Get_ItemList;
  end;

// *********************************************************************//
// DispIntf:  ITDMailConditionsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FCA0B016-AC98-4E63-A7EE-34759BF8038C}
// *********************************************************************//
  ITDMailConditionsDisp = dispinterface
    ['{FCA0B016-AC98-4E63-A7EE-34759BF8038C}']
    procedure Load; dispid 4;
    property Condition[const Name: WideString; IsUserCondition: WordBool]: WideString dispid 5;
    procedure DeleteCondition(const Name: WideString; IsUserCondition: WordBool); dispid 6;
    procedure Close(NeedToSave: WordBool); dispid 7;
    property ItemList[GetRealNames: WordBool]: IList readonly dispid 8;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: ICustomizationPermissions
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7EE7D348-AED6-4B3C-8FC7-5D9D8EA8E4C9}
// *********************************************************************//
  ICustomizationPermissions = interface(IDispatch)
    ['{7EE7D348-AED6-4B3C-8FC7-5D9D8EA8E4C9}']
    function Get_CanAddItem(const EntityName: WideString; Group: OleVariant): WordBool; safecall;
    procedure Set_CanAddItem(const EntityName: WideString; Group: OleVariant; pVal: WordBool); safecall;
    function Get_CanRemoveItem(const EntityName: WideString; Group: OleVariant): Integer; safecall;
    procedure Set_CanRemoveItem(const EntityName: WideString; Group: OleVariant; pVal: Integer); safecall;
    function Get_CanModifyField(const EntityName: WideString; Field: OleVariant; Group: OleVariant): Integer; safecall;
    procedure Set_CanModifyField(const EntityName: WideString; Field: OleVariant; 
                                 Group: OleVariant; pVal: Integer); safecall;
    function Get_TransitionRules(const EntityName: WideString; Field: OleVariant; Group: OleVariant): IDispatch; safecall;
    function Get_CanAllowAttachment(const EntityName: WideString; Group: OleVariant): Integer; safecall;
    procedure Set_CanAllowAttachment(const EntityName: WideString; Group: OleVariant; pVal: Integer); safecall;
    function Get_CanUseOwnerSensible(const EntityName: WideString): WordBool; safecall;
    function Get_HasAttachmentField(const EntityName: WideString): WordBool; safecall;
    procedure Set_IsVisibleInNewBug(const EntityName: WideString; Field: OleVariant; 
                                    Group: OleVariant; pVal: WordBool); safecall;
    function Get_IsVisibleInNewBug(const EntityName: WideString; Field: OleVariant; 
                                   Group: OleVariant): WordBool; safecall;
    procedure Set_CanModifyItem(const EntityName: WideString; Group: OleVariant; pVal: WordBool); safecall;
    function Get_CanModifyItem(const EntityName: WideString; Group: OleVariant): WordBool; safecall;
    function Get_AuditAddItem(const EntityName: WideString): WordBool; safecall;
    procedure Set_AuditAddItem(const EntityName: WideString; pVal: WordBool); safecall;
    function Get_AuditRemoveItem(const EntityName: WideString): WordBool; safecall;
    procedure Set_AuditRemoveItem(const EntityName: WideString; pVal: WordBool); safecall;
    property CanAddItem[const EntityName: WideString; Group: OleVariant]: WordBool read Get_CanAddItem write Set_CanAddItem;
    property CanRemoveItem[const EntityName: WideString; Group: OleVariant]: Integer read Get_CanRemoveItem write Set_CanRemoveItem;
    property CanModifyField[const EntityName: WideString; Field: OleVariant; Group: OleVariant]: Integer read Get_CanModifyField write Set_CanModifyField;
    property TransitionRules[const EntityName: WideString; Field: OleVariant; Group: OleVariant]: IDispatch read Get_TransitionRules;
    property CanAllowAttachment[const EntityName: WideString; Group: OleVariant]: Integer read Get_CanAllowAttachment write Set_CanAllowAttachment;
    property CanUseOwnerSensible[const EntityName: WideString]: WordBool read Get_CanUseOwnerSensible;
    property HasAttachmentField[const EntityName: WideString]: WordBool read Get_HasAttachmentField;
    property IsVisibleInNewBug[const EntityName: WideString; Field: OleVariant; Group: OleVariant]: WordBool read Get_IsVisibleInNewBug write Set_IsVisibleInNewBug;
    property CanModifyItem[const EntityName: WideString; Group: OleVariant]: WordBool read Get_CanModifyItem write Set_CanModifyItem;
    property AuditAddItem[const EntityName: WideString]: WordBool read Get_AuditAddItem write Set_AuditAddItem;
    property AuditRemoveItem[const EntityName: WideString]: WordBool read Get_AuditRemoveItem write Set_AuditRemoveItem;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationPermissionsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7EE7D348-AED6-4B3C-8FC7-5D9D8EA8E4C9}
// *********************************************************************//
  ICustomizationPermissionsDisp = dispinterface
    ['{7EE7D348-AED6-4B3C-8FC7-5D9D8EA8E4C9}']
    property CanAddItem[const EntityName: WideString; Group: OleVariant]: WordBool dispid 1;
    property CanRemoveItem[const EntityName: WideString; Group: OleVariant]: Integer dispid 2;
    property CanModifyField[const EntityName: WideString; Field: OleVariant; Group: OleVariant]: Integer dispid 3;
    property TransitionRules[const EntityName: WideString; Field: OleVariant; Group: OleVariant]: IDispatch readonly dispid 4;
    property CanAllowAttachment[const EntityName: WideString; Group: OleVariant]: Integer dispid 5;
    property CanUseOwnerSensible[const EntityName: WideString]: WordBool readonly dispid 6;
    property HasAttachmentField[const EntityName: WideString]: WordBool readonly dispid 7;
    property IsVisibleInNewBug[const EntityName: WideString; Field: OleVariant; Group: OleVariant]: WordBool dispid 8;
    property CanModifyItem[const EntityName: WideString; Group: OleVariant]: WordBool dispid 9;
    property AuditAddItem[const EntityName: WideString]: WordBool dispid 10;
    property AuditRemoveItem[const EntityName: WideString]: WordBool dispid 11;
  end;

// *********************************************************************//
// Interface: ICustomizationUsersGroups
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1CD20510-7700-42B6-83AB-4AFC0419318D}
// *********************************************************************//
  ICustomizationUsersGroups = interface(IDispatch)
    ['{1CD20510-7700-42B6-83AB-4AFC0419318D}']
    function AddGroup(const Name: WideString): IDispatch; safecall;
    function Get_Group(const Name: WideString): IDispatch; safecall;
    procedure RemoveGroup(const Name: WideString); safecall;
    function Get_Groups: IList; safecall;
    property Group[const Name: WideString]: IDispatch read Get_Group;
    property Groups: IList read Get_Groups;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationUsersGroupsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1CD20510-7700-42B6-83AB-4AFC0419318D}
// *********************************************************************//
  ICustomizationUsersGroupsDisp = dispinterface
    ['{1CD20510-7700-42B6-83AB-4AFC0419318D}']
    function AddGroup(const Name: WideString): IDispatch; dispid 1;
    property Group[const Name: WideString]: IDispatch readonly dispid 2;
    procedure RemoveGroup(const Name: WideString); dispid 3;
    property Groups: IList readonly dispid 4;
  end;

// *********************************************************************//
// Interface: ICustomizationUsersGroups2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2EDCC94A-817B-498F-A896-1E7C638B0097}
// *********************************************************************//
  ICustomizationUsersGroups2 = interface(ICustomizationUsersGroups)
    ['{2EDCC94A-817B-498F-A896-1E7C638B0097}']
    function IsNameValid(const Name: WideString; GroupId: Integer): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationUsersGroups2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2EDCC94A-817B-498F-A896-1E7C638B0097}
// *********************************************************************//
  ICustomizationUsersGroups2Disp = dispinterface
    ['{2EDCC94A-817B-498F-A896-1E7C638B0097}']
    function IsNameValid(const Name: WideString; GroupId: Integer): WordBool; dispid 5;
    function AddGroup(const Name: WideString): IDispatch; dispid 1;
    property Group[const Name: WideString]: IDispatch readonly dispid 2;
    procedure RemoveGroup(const Name: WideString); dispid 3;
    property Groups: IList readonly dispid 4;
  end;

// *********************************************************************//
// Interface: ICustomizationUsersGroup
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7E12617E-3B01-42BD-A16F-13118038D0B7}
// *********************************************************************//
  ICustomizationUsersGroup = interface(IDispatch)
    ['{7E12617E-3B01-42BD-A16F-13118038D0B7}']
    function Get_ID: Integer; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    function Get_Is_System: WordBool; safecall;
    procedure AddUser(User: OleVariant); safecall;
    procedure RemoveUser(User: OleVariant); safecall;
    function UsersList: IList; safecall;
    function Get_Updated: WordBool; safecall;
    procedure Set_Updated(pVal: WordBool); safecall;
    function Get_Deleted: WordBool; safecall;
    procedure Set_Deleted(pVal: WordBool); safecall;
    function Get_IsSystem: WordBool; safecall;
    function Get_HideFilter(const FilterType: WideString): WideString; safecall;
    procedure Set_HideFilter(const FilterType: WideString; const pVal: WideString); safecall;
    property ID: Integer read Get_ID;
    property Name: WideString read Get_Name write Set_Name;
    property Is_System: WordBool read Get_Is_System;
    property Updated: WordBool read Get_Updated write Set_Updated;
    property Deleted: WordBool read Get_Deleted write Set_Deleted;
    property IsSystem: WordBool read Get_IsSystem;
    property HideFilter[const FilterType: WideString]: WideString read Get_HideFilter write Set_HideFilter;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationUsersGroupDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7E12617E-3B01-42BD-A16F-13118038D0B7}
// *********************************************************************//
  ICustomizationUsersGroupDisp = dispinterface
    ['{7E12617E-3B01-42BD-A16F-13118038D0B7}']
    property ID: Integer readonly dispid 1;
    property Name: WideString dispid 2;
    property Is_System: WordBool readonly dispid 3;
    procedure AddUser(User: OleVariant); dispid 4;
    procedure RemoveUser(User: OleVariant); dispid 5;
    function UsersList: IList; dispid 6;
    property Updated: WordBool dispid 7;
    property Deleted: WordBool dispid 8;
    property IsSystem: WordBool readonly dispid 9;
    property HideFilter[const FilterType: WideString]: WideString dispid 10;
  end;

// *********************************************************************//
// Interface: ICustomizationUser
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C10389DD-70AC-48F5-BCF0-9A1CBA5FCAD9}
// *********************************************************************//
  ICustomizationUser = interface(IDispatch)
    ['{C10389DD-70AC-48F5-BCF0-9A1CBA5FCAD9}']
    function Get_Address: WideString; safecall;
    procedure Set_Address(const pVal: WideString); safecall;
    function Get_Email: WideString; safecall;
    procedure Set_Email(const pVal: WideString); safecall;
    function Get_FullName: WideString; safecall;
    procedure Set_FullName(const pVal: WideString); safecall;
    function Get_Phone: WideString; safecall;
    procedure Set_Phone(const pVal: WideString); safecall;
    function Get_Name: WideString; safecall;
    function Get_Updated: WordBool; safecall;
    procedure Set_Updated(pVal: WordBool); safecall;
    procedure RemoveFromGroup(Group: OleVariant); safecall;
    procedure AddToGroup(Group: OleVariant); safecall;
    function Get_In_Group(GroupName: OleVariant): WordBool; safecall;
    procedure Set_In_Group(GroupName: OleVariant; pVal: WordBool); safecall;
    function Get_Deleted: WordBool; safecall;
    procedure Set_Deleted(pVal: WordBool); safecall;
    function GroupsList: IList; safecall;
    procedure Set_Password(const Param1: WideString); safecall;
    function Get_InGroup(GroupName: OleVariant): WordBool; safecall;
    procedure Set_InGroup(GroupName: OleVariant; pVal: WordBool); safecall;
    function Get_DomainAuthentication: WideString; safecall;
    procedure Set_DomainAuthentication(const pVal: WideString); safecall;
    property Address: WideString read Get_Address write Set_Address;
    property Email: WideString read Get_Email write Set_Email;
    property FullName: WideString read Get_FullName write Set_FullName;
    property Phone: WideString read Get_Phone write Set_Phone;
    property Name: WideString read Get_Name;
    property Updated: WordBool read Get_Updated write Set_Updated;
    property In_Group[GroupName: OleVariant]: WordBool read Get_In_Group write Set_In_Group;
    property Deleted: WordBool read Get_Deleted write Set_Deleted;
    property Password: WideString write Set_Password;
    property InGroup[GroupName: OleVariant]: WordBool read Get_InGroup write Set_InGroup;
    property DomainAuthentication: WideString read Get_DomainAuthentication write Set_DomainAuthentication;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationUserDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C10389DD-70AC-48F5-BCF0-9A1CBA5FCAD9}
// *********************************************************************//
  ICustomizationUserDisp = dispinterface
    ['{C10389DD-70AC-48F5-BCF0-9A1CBA5FCAD9}']
    property Address: WideString dispid 1;
    property Email: WideString dispid 2;
    property FullName: WideString dispid 3;
    property Phone: WideString dispid 4;
    property Name: WideString readonly dispid 5;
    property Updated: WordBool dispid 6;
    procedure RemoveFromGroup(Group: OleVariant); dispid 7;
    procedure AddToGroup(Group: OleVariant); dispid 8;
    property In_Group[GroupName: OleVariant]: WordBool dispid 9;
    property Deleted: WordBool dispid 10;
    function GroupsList: IList; dispid 11;
    property Password: WideString writeonly dispid 12;
    property InGroup[GroupName: OleVariant]: WordBool dispid 13;
    property DomainAuthentication: WideString dispid 14;
  end;

// *********************************************************************//
// Interface: ICustomizationUsers
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DCFC6A77-C0F7-4F36-82E2-5164749254AF}
// *********************************************************************//
  ICustomizationUsers = interface(IDispatch)
    ['{DCFC6A77-C0F7-4F36-82E2-5164749254AF}']
    function Get_User(const Name: WideString): IDispatch; safecall;
    function AddUser(const Name: WideString): IDispatch; safecall;
    function Get_Users: IList; safecall;
    procedure RemoveUser(const Name: WideString); safecall;
    function Get_DomainUsers: WideString; safecall;
    procedure AddSiteUser(const UserName: WideString; const FullName: WideString; 
                          const Email: WideString; const Description: WideString; 
                          const Phone: WideString; Group: OleVariant); safecall;
    function Get_DomainUsersWithoutProjectUsers: WideString; safecall;
    procedure AddSiteAuthenticatedUser(const UserName: WideString; const FullName: WideString; 
                                       const Email: WideString; const Description: WideString; 
                                       const Phone: WideString; 
                                       const DomainAuthentication: WideString; Group: OleVariant); safecall;
    property User[const Name: WideString]: IDispatch read Get_User;
    property Users: IList read Get_Users;
    property DomainUsers: WideString read Get_DomainUsers;
    property DomainUsersWithoutProjectUsers: WideString read Get_DomainUsersWithoutProjectUsers;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationUsersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DCFC6A77-C0F7-4F36-82E2-5164749254AF}
// *********************************************************************//
  ICustomizationUsersDisp = dispinterface
    ['{DCFC6A77-C0F7-4F36-82E2-5164749254AF}']
    property User[const Name: WideString]: IDispatch readonly dispid 1;
    function AddUser(const Name: WideString): IDispatch; dispid 2;
    property Users: IList readonly dispid 3;
    procedure RemoveUser(const Name: WideString); dispid 4;
    property DomainUsers: WideString readonly dispid 5;
    procedure AddSiteUser(const UserName: WideString; const FullName: WideString; 
                          const Email: WideString; const Description: WideString; 
                          const Phone: WideString; Group: OleVariant); dispid 6;
    property DomainUsersWithoutProjectUsers: WideString readonly dispid 7;
    procedure AddSiteAuthenticatedUser(const UserName: WideString; const FullName: WideString; 
                                       const Email: WideString; const Description: WideString; 
                                       const Phone: WideString; 
                                       const DomainAuthentication: WideString; Group: OleVariant); dispid 8;
  end;

// *********************************************************************//
// Interface: ICustomizationUsers2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A23C23B0-5705-409C-8FC3-842D5CFFBF5E}
// *********************************************************************//
  ICustomizationUsers2 = interface(ICustomizationUsers)
    ['{A23C23B0-5705-409C-8FC3-842D5CFFBF5E}']
    function UserExistsInSite(const UserName: WideString): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationUsers2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A23C23B0-5705-409C-8FC3-842D5CFFBF5E}
// *********************************************************************//
  ICustomizationUsers2Disp = dispinterface
    ['{A23C23B0-5705-409C-8FC3-842D5CFFBF5E}']
    function UserExistsInSite(const UserName: WideString): WordBool; dispid 11;
    property User[const Name: WideString]: IDispatch readonly dispid 1;
    function AddUser(const Name: WideString): IDispatch; dispid 2;
    property Users: IList readonly dispid 3;
    procedure RemoveUser(const Name: WideString); dispid 4;
    property DomainUsers: WideString readonly dispid 5;
    procedure AddSiteUser(const UserName: WideString; const FullName: WideString; 
                          const Email: WideString; const Description: WideString; 
                          const Phone: WideString; Group: OleVariant); dispid 6;
    property DomainUsersWithoutProjectUsers: WideString readonly dispid 7;
    procedure AddSiteAuthenticatedUser(const UserName: WideString; const FullName: WideString; 
                                       const Email: WideString; const Description: WideString; 
                                       const Phone: WideString; 
                                       const DomainAuthentication: WideString; Group: OleVariant); dispid 8;
  end;

// *********************************************************************//
// Interface: ICustomizationUsers3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7236494B-BBE3-40D2-8176-E26F65D0F995}
// *********************************************************************//
  ICustomizationUsers3 = interface(ICustomizationUsers2)
    ['{7236494B-BBE3-40D2-8176-E26F65D0F995}']
    function GetUsersIdsInSite(const NameLike: WideString; IsExcludeUsersInCurrentProject: WordBool): WideString; safecall;
    function GetUsersPropertiesInSite(vFields: OleVariant; vIds: OleVariant): WideString; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationUsers3Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7236494B-BBE3-40D2-8176-E26F65D0F995}
// *********************************************************************//
  ICustomizationUsers3Disp = dispinterface
    ['{7236494B-BBE3-40D2-8176-E26F65D0F995}']
    function GetUsersIdsInSite(const NameLike: WideString; IsExcludeUsersInCurrentProject: WordBool): WideString; dispid 12;
    function GetUsersPropertiesInSite(vFields: OleVariant; vIds: OleVariant): WideString; dispid 13;
    function UserExistsInSite(const UserName: WideString): WordBool; dispid 11;
    property User[const Name: WideString]: IDispatch readonly dispid 1;
    function AddUser(const Name: WideString): IDispatch; dispid 2;
    property Users: IList readonly dispid 3;
    procedure RemoveUser(const Name: WideString); dispid 4;
    property DomainUsers: WideString readonly dispid 5;
    procedure AddSiteUser(const UserName: WideString; const FullName: WideString; 
                          const Email: WideString; const Description: WideString; 
                          const Phone: WideString; Group: OleVariant); dispid 6;
    property DomainUsersWithoutProjectUsers: WideString readonly dispid 7;
    procedure AddSiteAuthenticatedUser(const UserName: WideString; const FullName: WideString; 
                                       const Email: WideString; const Description: WideString; 
                                       const Phone: WideString; 
                                       const DomainAuthentication: WideString; Group: OleVariant); dispid 8;
  end;

// *********************************************************************//
// Interface: ICustomizationActions
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E746670E-69C7-4DC1-93BC-9B4662B6015D}
// *********************************************************************//
  ICustomizationActions = interface(IDispatch)
    ['{E746670E-69C7-4DC1-93BC-9B4662B6015D}']
    function Get_Actions: IList; safecall;
    function Get_Action(const Name: WideString): IDispatch; safecall;
    property Actions: IList read Get_Actions;
    property Action[const Name: WideString]: IDispatch read Get_Action;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationActionsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E746670E-69C7-4DC1-93BC-9B4662B6015D}
// *********************************************************************//
  ICustomizationActionsDisp = dispinterface
    ['{E746670E-69C7-4DC1-93BC-9B4662B6015D}']
    property Actions: IList readonly dispid 1;
    property Action[const Name: WideString]: IDispatch readonly dispid 2;
  end;

// *********************************************************************//
// Interface: ICustomizationAction
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {217D92D5-CD8A-4ADA-8ECC-9D13C224DCA8}
// *********************************************************************//
  ICustomizationAction = interface(IDispatch)
    ['{217D92D5-CD8A-4ADA-8ECC-9D13C224DCA8}']
    function Get_Name: WideString; safecall;
    function Get_Groups: IList; safecall;
    procedure AddGroup(Group: OleVariant); safecall;
    procedure RemoveGroup(Group: OleVariant); safecall;
    function Get_OwnerGroup: IDispatch; safecall;
    procedure Set_OwnerGroup(const pVal: IDispatch); safecall;
    function Get_Updated: WordBool; safecall;
    procedure Set_Updated(pVal: WordBool); safecall;
    function Get_IsGroupPermited(Group: OleVariant): WordBool; safecall;
    function Get_IsOwnerGroup(Group: OleVariant): WordBool; safecall;
    function Get_IsUserPermited(User: OleVariant): WordBool; safecall;
    function Get_AuditAction: WordBool; safecall;
    procedure Set_AuditAction(pVal: WordBool); safecall;
    property Name: WideString read Get_Name;
    property Groups: IList read Get_Groups;
    property OwnerGroup: IDispatch read Get_OwnerGroup write Set_OwnerGroup;
    property Updated: WordBool read Get_Updated write Set_Updated;
    property IsGroupPermited[Group: OleVariant]: WordBool read Get_IsGroupPermited;
    property IsOwnerGroup[Group: OleVariant]: WordBool read Get_IsOwnerGroup;
    property IsUserPermited[User: OleVariant]: WordBool read Get_IsUserPermited;
    property AuditAction: WordBool read Get_AuditAction write Set_AuditAction;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationActionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {217D92D5-CD8A-4ADA-8ECC-9D13C224DCA8}
// *********************************************************************//
  ICustomizationActionDisp = dispinterface
    ['{217D92D5-CD8A-4ADA-8ECC-9D13C224DCA8}']
    property Name: WideString readonly dispid 1;
    property Groups: IList readonly dispid 2;
    procedure AddGroup(Group: OleVariant); dispid 3;
    procedure RemoveGroup(Group: OleVariant); dispid 4;
    property OwnerGroup: IDispatch dispid 5;
    property Updated: WordBool dispid 6;
    property IsGroupPermited[Group: OleVariant]: WordBool readonly dispid 7;
    property IsOwnerGroup[Group: OleVariant]: WordBool readonly dispid 8;
    property IsUserPermited[User: OleVariant]: WordBool readonly dispid 9;
    property AuditAction: WordBool dispid 10;
  end;

// *********************************************************************//
// Interface: ICustomizationModules
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2EEC167C-FBBF-4A2F-8DE6-DE8A05EDDB50}
// *********************************************************************//
  ICustomizationModules = interface(IDispatch)
    ['{2EEC167C-FBBF-4A2F-8DE6-DE8A05EDDB50}']
    function Get_Name(ModuleID: Integer): WideString; safecall;
    procedure Set_Name(ModuleID: Integer; const pVal: WideString); safecall;
    function Get_GUID(ModuleID: Integer): WideString; safecall;
    procedure Set_GUID(ModuleID: Integer; const pVal: WideString); safecall;
    function Get_Description(ModuleID: Integer): WideString; safecall;
    procedure Set_Description(ModuleID: Integer; const pVal: WideString); safecall;
    function Get_Visible(ModuleID: Integer): Integer; safecall;
    procedure Set_Visible(ModuleID: Integer; pVal: Integer); safecall;
    property Name[ModuleID: Integer]: WideString read Get_Name write Set_Name;
    property GUID[ModuleID: Integer]: WideString read Get_GUID write Set_GUID;
    property Description[ModuleID: Integer]: WideString read Get_Description write Set_Description;
    property Visible[ModuleID: Integer]: Integer read Get_Visible write Set_Visible;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationModulesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2EEC167C-FBBF-4A2F-8DE6-DE8A05EDDB50}
// *********************************************************************//
  ICustomizationModulesDisp = dispinterface
    ['{2EEC167C-FBBF-4A2F-8DE6-DE8A05EDDB50}']
    property Name[ModuleID: Integer]: WideString dispid 1;
    property GUID[ModuleID: Integer]: WideString dispid 2;
    property Description[ModuleID: Integer]: WideString dispid 3;
    property Visible[ModuleID: Integer]: Integer dispid 4;
  end;

// *********************************************************************//
// Interface: ICustomizationModules2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3A2F36D9-0CEF-4864-A067-7246D6615D9E}
// *********************************************************************//
  ICustomizationModules2 = interface(ICustomizationModules)
    ['{3A2F36D9-0CEF-4864-A067-7246D6615D9E}']
    function Get_IsVisibleForGroup(ModuleID: Integer; Group: OleVariant): WordBool; safecall;
    procedure Set_IsVisibleForGroup(ModuleID: Integer; Group: OleVariant; pVal: WordBool); safecall;
    function Get_VisibleForGroups(ModuleID: Integer): IList; safecall;
    property IsVisibleForGroup[ModuleID: Integer; Group: OleVariant]: WordBool read Get_IsVisibleForGroup write Set_IsVisibleForGroup;
    property VisibleForGroups[ModuleID: Integer]: IList read Get_VisibleForGroups;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationModules2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3A2F36D9-0CEF-4864-A067-7246D6615D9E}
// *********************************************************************//
  ICustomizationModules2Disp = dispinterface
    ['{3A2F36D9-0CEF-4864-A067-7246D6615D9E}']
    property IsVisibleForGroup[ModuleID: Integer; Group: OleVariant]: WordBool dispid 5;
    property VisibleForGroups[ModuleID: Integer]: IList readonly dispid 6;
    property Name[ModuleID: Integer]: WideString dispid 1;
    property GUID[ModuleID: Integer]: WideString dispid 2;
    property Description[ModuleID: Integer]: WideString dispid 3;
    property Visible[ModuleID: Integer]: Integer dispid 4;
  end;

// *********************************************************************//
// Interface: ICustomizationModules3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {109DCBCF-8D7D-4280-837B-4F950604B48B}
// *********************************************************************//
  ICustomizationModules3 = interface(ICustomizationModules2)
    ['{109DCBCF-8D7D-4280-837B-4F950604B48B}']
    function Get_Modules: IList; safecall;
    function Get_Module(ModuleID: Integer): IModule; safecall;
    property Modules: IList read Get_Modules;
    property Module[ModuleID: Integer]: IModule read Get_Module;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationModules3Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {109DCBCF-8D7D-4280-837B-4F950604B48B}
// *********************************************************************//
  ICustomizationModules3Disp = dispinterface
    ['{109DCBCF-8D7D-4280-837B-4F950604B48B}']
    property Modules: IList readonly dispid 7;
    property Module[ModuleID: Integer]: IModule readonly dispid 8;
    property IsVisibleForGroup[ModuleID: Integer; Group: OleVariant]: WordBool dispid 5;
    property VisibleForGroups[ModuleID: Integer]: IList readonly dispid 6;
    property Name[ModuleID: Integer]: WideString dispid 1;
    property GUID[ModuleID: Integer]: WideString dispid 2;
    property Description[ModuleID: Integer]: WideString dispid 3;
    property Visible[ModuleID: Integer]: Integer dispid 4;
  end;

// *********************************************************************//
// Interface: IModule
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {56799AB1-FA33-4ED4-BD4F-3CAB0E207EEB}
// *********************************************************************//
  IModule = interface(IDispatch)
    ['{56799AB1-FA33-4ED4-BD4F-3CAB0E207EEB}']
    function Get_ID: Integer; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pVal: WideString); safecall;
    function Get_GUID: WideString; safecall;
    procedure Set_GUID(const pVal: WideString); safecall;
    function Get_Visible: WideString; safecall;
    procedure Set_Visible(const pVal: WideString); safecall;
    function Get_Updated: WordBool; safecall;
    procedure Set_Updated(pVal: WordBool); safecall;
    procedure Set_VisibleForGroup(GroupId: Integer; Param2: WordBool); safecall;
    procedure Set_NumericVisible(Param1: Integer); safecall;
    function Get_Order: Integer; safecall;
    procedure Set_Order(pVal: Integer); safecall;
    property ID: Integer read Get_ID;
    property Name: WideString read Get_Name write Set_Name;
    property Description: WideString read Get_Description write Set_Description;
    property GUID: WideString read Get_GUID write Set_GUID;
    property Visible: WideString read Get_Visible write Set_Visible;
    property Updated: WordBool read Get_Updated write Set_Updated;
    property VisibleForGroup[GroupId: Integer]: WordBool write Set_VisibleForGroup;
    property NumericVisible: Integer write Set_NumericVisible;
    property Order: Integer read Get_Order write Set_Order;
  end;

// *********************************************************************//
// DispIntf:  IModuleDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {56799AB1-FA33-4ED4-BD4F-3CAB0E207EEB}
// *********************************************************************//
  IModuleDisp = dispinterface
    ['{56799AB1-FA33-4ED4-BD4F-3CAB0E207EEB}']
    property ID: Integer readonly dispid 1;
    property Name: WideString dispid 2;
    property Description: WideString dispid 3;
    property GUID: WideString dispid 4;
    property Visible: WideString dispid 5;
    property Updated: WordBool dispid 7;
    property VisibleForGroup[GroupId: Integer]: WordBool writeonly dispid 8;
    property NumericVisible: Integer writeonly dispid 9;
    property Order: Integer dispid 10;
  end;

// *********************************************************************//
// Interface: ITDChat
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D323F3D1-837E-4C0F-9ACB-7CBCDDA557DC}
// *********************************************************************//
  ITDChat = interface(IDispatch)
    ['{D323F3D1-837E-4C0F-9ACB-7CBCDDA557DC}']
    procedure Connect(const ChatRoom: WideString; out NewData: WideString); safecall;
    procedure Disconnect; safecall;
    procedure PutMessage(const ChatMessage: WideString; out NewData: WideString); safecall;
    function Get_ChatData(GetAllMesseges: WordBool): WideString; safecall;
    procedure ChangeChat(const NewChatRoom: WideString); safecall;
    property ChatData[GetAllMesseges: WordBool]: WideString read Get_ChatData;
  end;

// *********************************************************************//
// DispIntf:  ITDChatDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D323F3D1-837E-4C0F-9ACB-7CBCDDA557DC}
// *********************************************************************//
  ITDChatDisp = dispinterface
    ['{D323F3D1-837E-4C0F-9ACB-7CBCDDA557DC}']
    procedure Connect(const ChatRoom: WideString; out NewData: WideString); dispid 1;
    procedure Disconnect; dispid 2;
    procedure PutMessage(const ChatMessage: WideString; out NewData: WideString); dispid 3;
    property ChatData[GetAllMesseges: WordBool]: WideString readonly dispid 4;
    procedure ChangeChat(const NewChatRoom: WideString); dispid 5;
  end;

// *********************************************************************//
// Interface: ICustomizationTransitionRule
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {93FF8BA2-20E4-40C0-BB37-638B5BFD8DAC}
// *********************************************************************//
  ICustomizationTransitionRule = interface(IDispatch)
    ['{93FF8BA2-20E4-40C0-BB37-638B5BFD8DAC}']
    function Get_SourceValue: WideString; safecall;
    procedure Set_SourceValue(const pVal: WideString); safecall;
    function Get_DestinationValue: WideString; safecall;
    procedure Set_DestinationValue(const pVal: WideString); safecall;
    function Get_IsAllowed: WordBool; safecall;
    procedure Set_IsAllowed(pVal: WordBool); safecall;
    function Get_Updated: WordBool; safecall;
    procedure Set_Updated(pVal: WordBool); safecall;
    property SourceValue: WideString read Get_SourceValue write Set_SourceValue;
    property DestinationValue: WideString read Get_DestinationValue write Set_DestinationValue;
    property IsAllowed: WordBool read Get_IsAllowed write Set_IsAllowed;
    property Updated: WordBool read Get_Updated write Set_Updated;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationTransitionRuleDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {93FF8BA2-20E4-40C0-BB37-638B5BFD8DAC}
// *********************************************************************//
  ICustomizationTransitionRuleDisp = dispinterface
    ['{93FF8BA2-20E4-40C0-BB37-638B5BFD8DAC}']
    property SourceValue: WideString dispid 1;
    property DestinationValue: WideString dispid 2;
    property IsAllowed: WordBool dispid 3;
    property Updated: WordBool dispid 4;
  end;

// *********************************************************************//
// Interface: ICustomizationTransitionRules
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {365FA56C-AE1E-46EB-A776-6EDDB82BF290}
// *********************************************************************//
  ICustomizationTransitionRules = interface(IDispatch)
    ['{365FA56C-AE1E-46EB-A776-6EDDB82BF290}']
    function Get_Count: Integer; safecall;
    function Get_TransitionRule(Position: Integer): IDispatch; safecall;
    function AddTransitionRule: IDispatch; safecall;
    procedure RemoveTransitionRule(Rule: OleVariant); safecall;
    function Get_Updated: WordBool; safecall;
    procedure Set_Updated(pVal: WordBool); safecall;
    function Get_Field: IDispatch; safecall;
    function Get_Group: IDispatch; safecall;
    function Get_EntityName: WideString; safecall;
    property Count: Integer read Get_Count;
    property TransitionRule[Position: Integer]: IDispatch read Get_TransitionRule;
    property Updated: WordBool read Get_Updated write Set_Updated;
    property Field: IDispatch read Get_Field;
    property Group: IDispatch read Get_Group;
    property EntityName: WideString read Get_EntityName;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationTransitionRulesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {365FA56C-AE1E-46EB-A776-6EDDB82BF290}
// *********************************************************************//
  ICustomizationTransitionRulesDisp = dispinterface
    ['{365FA56C-AE1E-46EB-A776-6EDDB82BF290}']
    property Count: Integer readonly dispid 1;
    property TransitionRule[Position: Integer]: IDispatch readonly dispid 2;
    function AddTransitionRule: IDispatch; dispid 3;
    procedure RemoveTransitionRule(Rule: OleVariant); dispid 4;
    property Updated: WordBool dispid 5;
    property Field: IDispatch readonly dispid 6;
    property Group: IDispatch readonly dispid 7;
    property EntityName: WideString readonly dispid 8;
  end;

// *********************************************************************//
// Interface: IErrorInfo
// Flags:     (0)
// GUID:      {1CF2B120-547D-101B-8E65-08002B2BD119}
// *********************************************************************//
  IErrorInfo = interface(IUnknown)
    ['{1CF2B120-547D-101B-8E65-08002B2BD119}']
    function GetGUID(out pGUID: TGUID): HResult; stdcall;
    function GetSource(out pBstrSource: WideString): HResult; stdcall;
    function GetDescription(out pBstrDescription: WideString): HResult; stdcall;
    function GetHelpFile(out pBstrHelpFile: WideString): HResult; stdcall;
    function GetHelpContext(out pdwHelpContext: LongWord): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ITDErrorInfo
// Flags:     (320) Dual OleAutomation
// GUID:      {DEBC6003-2ABE-4C93-A769-646F300A7986}
// *********************************************************************//
  ITDErrorInfo = interface(IErrorInfo)
    ['{DEBC6003-2ABE-4C93-A769-646F300A7986}']
    function Get_Details: WideString; safecall;
    property Details: WideString read Get_Details;
  end;

// *********************************************************************//
// DispIntf:  ITDErrorInfoDisp
// Flags:     (320) Dual OleAutomation
// GUID:      {DEBC6003-2ABE-4C93-A769-646F300A7986}
// *********************************************************************//
  ITDErrorInfoDisp = dispinterface
    ['{DEBC6003-2ABE-4C93-A769-646F300A7986}']
    property Details: WideString readonly dispid 1;
    procedure GetGUID(out pGUID: {??TGUID}OleVariant); dispid 1610678272;
    procedure GetSource(out pBstrSource: WideString); dispid 1610678273;
    procedure GetDescription(out pBstrDescription: WideString); dispid 1610678274;
    procedure GetHelpFile(out pBstrHelpFile: WideString); dispid 1610678275;
    procedure GetHelpContext(out pdwHelpContext: LongWord); dispid 1610678276;
  end;

// *********************************************************************//
// Interface: IChangeEntry
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0977F04D-0A7C-403D-A07B-1C2780362C46}
// *********************************************************************//
  IChangeEntry = interface(IBaseFieldEx)
    ['{0977F04D-0A7C-403D-A07B-1C2780362C46}']
    function Get_FileName: WideString; safecall;
    function Get_FilePath: WideString; safecall;
    function Get_StartVersion: WideString; safecall;
    function Get_WorkingVersion: WideString; safecall;
    procedure Set_WorkingVersion(const pVal: WideString); safecall;
    function Get_EndVersion: WideString; safecall;
    procedure Set_EndVersion(const pVal: WideString); safecall;
    function Get_CreatedBy: WideString; safecall;
    function Get_CreationDate: TDateTime; safecall;
    property FileName: WideString read Get_FileName;
    property FilePath: WideString read Get_FilePath;
    property StartVersion: WideString read Get_StartVersion;
    property WorkingVersion: WideString read Get_WorkingVersion write Set_WorkingVersion;
    property EndVersion: WideString read Get_EndVersion write Set_EndVersion;
    property CreatedBy: WideString read Get_CreatedBy;
    property CreationDate: TDateTime read Get_CreationDate;
  end;

// *********************************************************************//
// DispIntf:  IChangeEntryDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0977F04D-0A7C-403D-A07B-1C2780362C46}
// *********************************************************************//
  IChangeEntryDisp = dispinterface
    ['{0977F04D-0A7C-403D-A07B-1C2780362C46}']
    property FileName: WideString readonly dispid 14;
    property FilePath: WideString readonly dispid 15;
    property StartVersion: WideString readonly dispid 16;
    property WorkingVersion: WideString dispid 17;
    property EndVersion: WideString dispid 18;
    property CreatedBy: WideString readonly dispid 19;
    property CreationDate: TDateTime readonly dispid 20;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IChange
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {74B94507-8A42-4D11-B5BD-943B76C9A982}
// *********************************************************************//
  IChange = interface(IBaseFieldEx)
    ['{74B94507-8A42-4D11-B5BD-943B76C9A982}']
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pVal: WideString); safecall;
    function Get_Comments: WideString; safecall;
    procedure Set_Comments(const pVal: WideString); safecall;
    function Get_CreatedBy: WideString; safecall;
    function Get_CreationDate: TDateTime; safecall;
    function Get_ClosingDate: TDateTime; safecall;
    procedure Set_ClosingDate(pVal: TDateTime); safecall;
    function Get_VOB_Labels: WideString; safecall;
    procedure Set_VOB_Labels(const pVal: WideString); safecall;
    function Get_ChangeEntryFactory: IDispatch; safecall;
    procedure AddBugLink(newVal: Integer); safecall;
    procedure RemoveBugLink(newVal: Integer); safecall;
    procedure GetBugLinks(out pVal: IList); safecall;
    function Get_AutoGetLinks: WordBool; safecall;
    procedure Set_AutoGetLinks(pVal: WordBool); safecall;
    function Get_Links: WideString; safecall;
    property Description: WideString read Get_Description write Set_Description;
    property Comments: WideString read Get_Comments write Set_Comments;
    property CreatedBy: WideString read Get_CreatedBy;
    property CreationDate: TDateTime read Get_CreationDate;
    property ClosingDate: TDateTime read Get_ClosingDate write Set_ClosingDate;
    property VOB_Labels: WideString read Get_VOB_Labels write Set_VOB_Labels;
    property ChangeEntryFactory: IDispatch read Get_ChangeEntryFactory;
    property AutoGetLinks: WordBool read Get_AutoGetLinks write Set_AutoGetLinks;
    property Links: WideString read Get_Links;
  end;

// *********************************************************************//
// DispIntf:  IChangeDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {74B94507-8A42-4D11-B5BD-943B76C9A982}
// *********************************************************************//
  IChangeDisp = dispinterface
    ['{74B94507-8A42-4D11-B5BD-943B76C9A982}']
    property Description: WideString dispid 14;
    property Comments: WideString dispid 15;
    property CreatedBy: WideString readonly dispid 16;
    property CreationDate: TDateTime readonly dispid 17;
    property ClosingDate: TDateTime dispid 18;
    property VOB_Labels: WideString dispid 19;
    property ChangeEntryFactory: IDispatch readonly dispid 20;
    procedure AddBugLink(newVal: Integer); dispid 21;
    procedure RemoveBugLink(newVal: Integer); dispid 22;
    procedure GetBugLinks(out pVal: IList); dispid 23;
    property AutoGetLinks: WordBool dispid 24;
    property Links: WideString readonly dispid 25;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IComFrec
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D2FA8791-3A81-4D03-95CA-74EF6E059C4F}
// *********************************************************************//
  IComFrec = interface(IDispatch)
    ['{D2FA8791-3A81-4D03-95CA-74EF6E059C4F}']
    procedure Open(const NewData: WideString); safecall;
    procedure WriteRecord; safecall;
    function Get_ReadRecord: WordBool; safecall;
    function Get_RecordString: WideString; safecall;
    function Get_Buffer: WideString; safecall;
    function Get_Value(const AtributeName: WideString): WideString; safecall;
    procedure Set_Value(const AtributeName: WideString; const pVal: WideString); safecall;
    procedure AddItem(const AttrName: WideString; const Value: WideString); safecall;
    function Get_ValuePos(Pos: Integer): WideString; safecall;
    procedure Set_ValuePos(Pos: Integer; const pVal: WideString); safecall;
    function Get_IsAttribute(const AttributeName: WideString): WordBool; safecall;
    function Get_NumberOfAttributes: Integer; safecall;
    function Get_AttributeName(Position: Integer): WideString; safecall;
    procedure Set_AttributeName(Position: Integer; const pVal: WideString); safecall;
    function Get_AttributePosition(const AttributeName: WideString): Integer; safecall;
    procedure RemoveItem(const AttributeName: WideString); safecall;
    procedure RemoveItemPos(ItemPos: Integer); safecall;
    procedure ClearItemList; safecall;
    property ReadRecord: WordBool read Get_ReadRecord;
    property RecordString: WideString read Get_RecordString;
    property Buffer: WideString read Get_Buffer;
    property Value[const AtributeName: WideString]: WideString read Get_Value write Set_Value;
    property ValuePos[Pos: Integer]: WideString read Get_ValuePos write Set_ValuePos;
    property IsAttribute[const AttributeName: WideString]: WordBool read Get_IsAttribute;
    property NumberOfAttributes: Integer read Get_NumberOfAttributes;
    property AttributeName[Position: Integer]: WideString read Get_AttributeName write Set_AttributeName;
    property AttributePosition[const AttributeName: WideString]: Integer read Get_AttributePosition;
  end;

// *********************************************************************//
// DispIntf:  IComFrecDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D2FA8791-3A81-4D03-95CA-74EF6E059C4F}
// *********************************************************************//
  IComFrecDisp = dispinterface
    ['{D2FA8791-3A81-4D03-95CA-74EF6E059C4F}']
    procedure Open(const NewData: WideString); dispid 1;
    procedure WriteRecord; dispid 2;
    property ReadRecord: WordBool readonly dispid 3;
    property RecordString: WideString readonly dispid 4;
    property Buffer: WideString readonly dispid 5;
    property Value[const AtributeName: WideString]: WideString dispid 6;
    procedure AddItem(const AttrName: WideString; const Value: WideString); dispid 7;
    property ValuePos[Pos: Integer]: WideString dispid 8;
    property IsAttribute[const AttributeName: WideString]: WordBool readonly dispid 9;
    property NumberOfAttributes: Integer readonly dispid 10;
    property AttributeName[Position: Integer]: WideString dispid 11;
    property AttributePosition[const AttributeName: WideString]: Integer readonly dispid 12;
    procedure RemoveItem(const AttributeName: WideString); dispid 13;
    procedure RemoveItemPos(ItemPos: Integer); dispid 14;
    procedure ClearItemList; dispid 15;
  end;

// *********************************************************************//
// Interface: IExecEventNotifyByMailSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {615FBF36-3E96-4C0F-9827-12FA20D13C58}
// *********************************************************************//
  IExecEventNotifyByMailSettings = interface(IDispatch)
    ['{615FBF36-3E96-4C0F-9827-12FA20D13C58}']
    function Get_EMailTo: WideString; safecall;
    procedure Set_EMailTo(const pVal: WideString); safecall;
    function Get_UserMessage: WideString; safecall;
    procedure Set_UserMessage(const pVal: WideString); safecall;
    function Get_Enabled(EventType: Integer): WordBool; safecall;
    procedure Set_Enabled(EventType: Integer; pVal: WordBool); safecall;
    procedure Save(AutoPost: WordBool); safecall;
    property EMailTo: WideString read Get_EMailTo write Set_EMailTo;
    property UserMessage: WideString read Get_UserMessage write Set_UserMessage;
    property Enabled[EventType: Integer]: WordBool read Get_Enabled write Set_Enabled;
  end;

// *********************************************************************//
// DispIntf:  IExecEventNotifyByMailSettingsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {615FBF36-3E96-4C0F-9827-12FA20D13C58}
// *********************************************************************//
  IExecEventNotifyByMailSettingsDisp = dispinterface
    ['{615FBF36-3E96-4C0F-9827-12FA20D13C58}']
    property EMailTo: WideString dispid 1;
    property UserMessage: WideString dispid 2;
    property Enabled[EventType: Integer]: WordBool dispid 3;
    procedure Save(AutoPost: WordBool); dispid 4;
  end;

// *********************************************************************//
// Interface: IProjectProperties
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {59A79946-0678-4E59-B4B0-9967E4314CCA}
// *********************************************************************//
  IProjectProperties = interface(IDispatch)
    ['{59A79946-0678-4E59-B4B0-9967E4314CCA}']
    function Get_Count: Integer; safecall;
    function Get_ParamValue(vParam: OleVariant): WideString; safecall;
    function Get_ParamName(ParamIndex: Integer): WideString; safecall;
    function Get_IsParam(const ParamName: WideString): WordBool; safecall;
    property Count: Integer read Get_Count;
    property ParamValue[vParam: OleVariant]: WideString read Get_ParamValue;
    property ParamName[ParamIndex: Integer]: WideString read Get_ParamName;
    property IsParam[const ParamName: WideString]: WordBool read Get_IsParam;
  end;

// *********************************************************************//
// DispIntf:  IProjectPropertiesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {59A79946-0678-4E59-B4B0-9967E4314CCA}
// *********************************************************************//
  IProjectPropertiesDisp = dispinterface
    ['{59A79946-0678-4E59-B4B0-9967E4314CCA}']
    property Count: Integer readonly dispid 1;
    property ParamValue[vParam: OleVariant]: WideString readonly dispid 2;
    property ParamName[ParamIndex: Integer]: WideString readonly dispid 3;
    property IsParam[const ParamName: WideString]: WordBool readonly dispid 4;
  end;

// *********************************************************************//
// Interface: IStepParams
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B4776982-5666-4075-99A3-0574EDA12EF2}
// *********************************************************************//
  IStepParams = interface(IDispatch)
    ['{B4776982-5666-4075-99A3-0574EDA12EF2}']
    function Get_Count: Integer; safecall;
    function Get_ParamValue(vParam: OleVariant): WideString; safecall;
    procedure Set_ParamValue(vParam: OleVariant; const pVal: WideString); safecall;
    procedure ClearParam(vParam: OleVariant); safecall;
    function Get_ParamType(vParam: OleVariant): WideString; safecall;
    procedure Set_ParamType(vParam: OleVariant; const pVal: WideString); safecall;
    function Get_ParamExist(const ParamName: WideString): WordBool; safecall;
    function Get_BaseValue(vParam: OleVariant; out HasBaseValue: WordBool): WideString; safecall;
    function Get_ParamName(nPosition: Integer): WideString; safecall;
    function Get_type_(vParam: OleVariant): Integer; safecall;
    procedure Save; safecall;
    procedure Refresh; safecall;
    procedure AddParam(const ParamName: WideString; const ParamType: WideString); safecall;
    procedure DeleteParam(const ParamName: WideString); safecall;
    property Count: Integer read Get_Count;
    property ParamValue[vParam: OleVariant]: WideString read Get_ParamValue write Set_ParamValue;
    property ParamType[vParam: OleVariant]: WideString read Get_ParamType write Set_ParamType;
    property ParamExist[const ParamName: WideString]: WordBool read Get_ParamExist;
    property BaseValue[vParam: OleVariant; out HasBaseValue: WordBool]: WideString read Get_BaseValue;
    property ParamName[nPosition: Integer]: WideString read Get_ParamName;
    property type_[vParam: OleVariant]: Integer read Get_type_;
  end;

// *********************************************************************//
// DispIntf:  IStepParamsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B4776982-5666-4075-99A3-0574EDA12EF2}
// *********************************************************************//
  IStepParamsDisp = dispinterface
    ['{B4776982-5666-4075-99A3-0574EDA12EF2}']
    property Count: Integer readonly dispid 1;
    property ParamValue[vParam: OleVariant]: WideString dispid 2;
    procedure ClearParam(vParam: OleVariant); dispid 3;
    property ParamType[vParam: OleVariant]: WideString dispid 4;
    property ParamExist[const ParamName: WideString]: WordBool readonly dispid 5;
    property BaseValue[vParam: OleVariant; out HasBaseValue: WordBool]: WideString readonly dispid 6;
    property ParamName[nPosition: Integer]: WideString readonly dispid 7;
    property type_[vParam: OleVariant]: Integer readonly dispid 8;
    procedure Save; dispid 9;
    procedure Refresh; dispid 10;
    procedure AddParam(const ParamName: WideString; const ParamType: WideString); dispid 11;
    procedure DeleteParam(const ParamName: WideString); dispid 12;
  end;

// *********************************************************************//
// Interface: ITextParser
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {328737D2-7777-4E5E-BB9A-488277C730C5}
// *********************************************************************//
  ITextParser = interface(IDispatch)
    ['{328737D2-7777-4E5E-BB9A-488277C730C5}']
    function Get_Count: Integer; safecall;
    function Get_ParamValue(vParam: OleVariant): WideString; safecall;
    procedure Set_ParamValue(vParam: OleVariant; const pVal: WideString); safecall;
    procedure ClearParam(vParam: OleVariant); safecall;
    function Get_type_(vParam: OleVariant): Integer; safecall;
    function Get_ParamType(vParam: OleVariant): WideString; safecall;
    function Get_ParamExist(const ParamName: WideString): WordBool; safecall;
    function Get_ParamName(nPosition: Integer): WideString; safecall;
    procedure Initialize(const StartClose: WideString; const EndClose: WideString; 
                         const TypeClose: WideString; MaxLen: Integer; const DefaultType: WideString); safecall;
    procedure Set_Text(const pVal: WideString); safecall;
    function Get_Text: WideString; safecall;
    procedure EvaluateText; safecall;
    property Count: Integer read Get_Count;
    property ParamValue[vParam: OleVariant]: WideString read Get_ParamValue write Set_ParamValue;
    property type_[vParam: OleVariant]: Integer read Get_type_;
    property ParamType[vParam: OleVariant]: WideString read Get_ParamType;
    property ParamExist[const ParamName: WideString]: WordBool read Get_ParamExist;
    property ParamName[nPosition: Integer]: WideString read Get_ParamName;
    property Text: WideString read Get_Text write Set_Text;
  end;

// *********************************************************************//
// DispIntf:  ITextParserDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {328737D2-7777-4E5E-BB9A-488277C730C5}
// *********************************************************************//
  ITextParserDisp = dispinterface
    ['{328737D2-7777-4E5E-BB9A-488277C730C5}']
    property Count: Integer readonly dispid 1;
    property ParamValue[vParam: OleVariant]: WideString dispid 2;
    procedure ClearParam(vParam: OleVariant); dispid 3;
    property type_[vParam: OleVariant]: Integer readonly dispid 4;
    property ParamType[vParam: OleVariant]: WideString readonly dispid 5;
    property ParamExist[const ParamName: WideString]: WordBool readonly dispid 6;
    property ParamName[nPosition: Integer]: WideString readonly dispid 7;
    procedure Initialize(const StartClose: WideString; const EndClose: WideString; 
                         const TypeClose: WideString; MaxLen: Integer; const DefaultType: WideString); dispid 8;
    property Text: WideString dispid 9;
    procedure EvaluateText; dispid 10;
  end;

// *********************************************************************//
// Interface: IExecEventInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5377347E-3F8D-4B54-B962-18527B652EDD}
// *********************************************************************//
  IExecEventInfo = interface(IDispatch)
    ['{5377347E-3F8D-4B54-B962-18527B652EDD}']
    function Get_EventType: Integer; safecall;
    function Get_EventTime: WideString; safecall;
    function Get_EventDate: WideString; safecall;
    function Get_EventParam(const ParamName: WideString): WideString; safecall;
    property EventType: Integer read Get_EventType;
    property EventTime: WideString read Get_EventTime;
    property EventDate: WideString read Get_EventDate;
    property EventParam[const ParamName: WideString]: WideString read Get_EventParam;
  end;

// *********************************************************************//
// DispIntf:  IExecEventInfoDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5377347E-3F8D-4B54-B962-18527B652EDD}
// *********************************************************************//
  IExecEventInfoDisp = dispinterface
    ['{5377347E-3F8D-4B54-B962-18527B652EDD}']
    property EventType: Integer readonly dispid 1;
    property EventTime: WideString readonly dispid 2;
    property EventDate: WideString readonly dispid 3;
    property EventParam[const ParamName: WideString]: WideString readonly dispid 4;
  end;

// *********************************************************************//
// Interface: IAmarillusHash
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5073A186-2A46-4C93-A3F5-F8C0AA66694F}
// *********************************************************************//
  IAmarillusHash = interface(IDispatch)
    ['{5073A186-2A46-4C93-A3F5-F8C0AA66694F}']
    function GenerateHash(const Value: WideString): WideString; safecall;
  end;

// *********************************************************************//
// DispIntf:  IAmarillusHashDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5073A186-2A46-4C93-A3F5-F8C0AA66694F}
// *********************************************************************//
  IAmarillusHashDisp = dispinterface
    ['{5073A186-2A46-4C93-A3F5-F8C0AA66694F}']
    function GenerateHash(const Value: WideString): WideString; dispid 1;
  end;

// *********************************************************************//
// Interface: IVersionItem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {38D402FA-9823-4D25-979E-62C377AC2E77}
// *********************************************************************//
  IVersionItem = interface(IDispatch)
    ['{38D402FA-9823-4D25-979E-62C377AC2E77}']
    function Get_Comments: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_IsLocked: WordBool; safecall;
    function Get_Date: WideString; safecall;
    function Get_User: WideString; safecall;
    function Get_Time: WideString; safecall;
    property Comments: WideString read Get_Comments;
    property Version: WideString read Get_Version;
    property IsLocked: WordBool read Get_IsLocked;
    property Date: WideString read Get_Date;
    property User: WideString read Get_User;
    property Time: WideString read Get_Time;
  end;

// *********************************************************************//
// DispIntf:  IVersionItemDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {38D402FA-9823-4D25-979E-62C377AC2E77}
// *********************************************************************//
  IVersionItemDisp = dispinterface
    ['{38D402FA-9823-4D25-979E-62C377AC2E77}']
    property Comments: WideString readonly dispid 1;
    property Version: WideString readonly dispid 2;
    property IsLocked: WordBool readonly dispid 3;
    property Date: WideString readonly dispid 4;
    property User: WideString readonly dispid 5;
    property Time: WideString readonly dispid 6;
  end;

// *********************************************************************//
// Interface: IVcsAdmin
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4FB0D662-F589-4C2D-BC4E-1A6E75845472}
// *********************************************************************//
  IVcsAdmin = interface(IDispatch)
    ['{4FB0D662-F589-4C2D-BC4E-1A6E75845472}']
  end;

// *********************************************************************//
// DispIntf:  IVcsAdminDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4FB0D662-F589-4C2D-BC4E-1A6E75845472}
// *********************************************************************//
  IVcsAdminDisp = dispinterface
    ['{4FB0D662-F589-4C2D-BC4E-1A6E75845472}']
  end;

// *********************************************************************//
// Interface: IExecutionSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {41120F91-BBBE-4913-975D-5346234765A6}
// *********************************************************************//
  IExecutionSettings = interface(IDispatch)
    ['{41120F91-BBBE-4913-975D-5346234765A6}']
    procedure Set_PlannedExecutionTime(vVal: OleVariant); safecall;
    function Get_PlannedExecutionTime: OleVariant; safecall;
    procedure Set_PlannedExecutionDate(vVal: OleVariant); safecall;
    function Get_PlannedExecutionDate: OleVariant; safecall;
    procedure Set_PlannedRunDuration(vVal: OleVariant); safecall;
    function Get_PlannedRunDuration: OleVariant; safecall;
    function Get_OnExecEventSchedulerActionType(EventType: Integer): Integer; safecall;
    procedure Set_OnExecEventSchedulerActionType(EventType: Integer; pVal: Integer); safecall;
    function Get_OnExecEventSchedulerActionParams(EventType: Integer): IDispatch; safecall;
    property PlannedExecutionTime: OleVariant read Get_PlannedExecutionTime write Set_PlannedExecutionTime;
    property PlannedExecutionDate: OleVariant read Get_PlannedExecutionDate write Set_PlannedExecutionDate;
    property PlannedRunDuration: OleVariant read Get_PlannedRunDuration write Set_PlannedRunDuration;
    property OnExecEventSchedulerActionType[EventType: Integer]: Integer read Get_OnExecEventSchedulerActionType write Set_OnExecEventSchedulerActionType;
    property OnExecEventSchedulerActionParams[EventType: Integer]: IDispatch read Get_OnExecEventSchedulerActionParams;
  end;

// *********************************************************************//
// DispIntf:  IExecutionSettingsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {41120F91-BBBE-4913-975D-5346234765A6}
// *********************************************************************//
  IExecutionSettingsDisp = dispinterface
    ['{41120F91-BBBE-4913-975D-5346234765A6}']
    property PlannedExecutionTime: OleVariant dispid 1;
    property PlannedExecutionDate: OleVariant dispid 2;
    property PlannedRunDuration: OleVariant dispid 3;
    property OnExecEventSchedulerActionType[EventType: Integer]: Integer dispid 4;
    property OnExecEventSchedulerActionParams[EventType: Integer]: IDispatch readonly dispid 5;
  end;

// *********************************************************************//
// Interface: IOnExecEventSchedulerActionParams
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CBD80CD0-1961-4191-A318-ABC50AB2ACD9}
// *********************************************************************//
  IOnExecEventSchedulerActionParams = interface(IDispatch)
    ['{CBD80CD0-1961-4191-A318-ABC50AB2ACD9}']
    function Get_OnExecEventSchedulerAction: Integer; safecall;
    procedure Set_Parameter(Index: Integer; vVal: OleVariant); safecall;
    function Get_Parameter(Index: Integer): OleVariant; safecall;
    property OnExecEventSchedulerAction: Integer read Get_OnExecEventSchedulerAction;
    property Parameter[Index: Integer]: OleVariant read Get_Parameter write Set_Parameter;
  end;

// *********************************************************************//
// DispIntf:  IOnExecEventSchedulerActionParamsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CBD80CD0-1961-4191-A318-ABC50AB2ACD9}
// *********************************************************************//
  IOnExecEventSchedulerActionParamsDisp = dispinterface
    ['{CBD80CD0-1961-4191-A318-ABC50AB2ACD9}']
    property OnExecEventSchedulerAction: Integer readonly dispid 1;
    property Parameter[Index: Integer]: OleVariant dispid 2;
  end;

// *********************************************************************//
// Interface: IOnExecEventSchedulerRestartParams
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3120287D-98B1-4D49-9BC5-3324555D8D04}
// *********************************************************************//
  IOnExecEventSchedulerRestartParams = interface(IOnExecEventSchedulerActionParams)
    ['{3120287D-98B1-4D49-9BC5-3324555D8D04}']
    procedure Set_NumberOfRetries(Val: Integer); safecall;
    function Get_NumberOfRetries: Integer; safecall;
    procedure Set_CleanupTest(vVal: OleVariant); safecall;
    function Get_CleanupTest: OleVariant; safecall;
    property NumberOfRetries: Integer read Get_NumberOfRetries write Set_NumberOfRetries;
    property CleanupTest: OleVariant read Get_CleanupTest write Set_CleanupTest;
  end;

// *********************************************************************//
// DispIntf:  IOnExecEventSchedulerRestartParamsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3120287D-98B1-4D49-9BC5-3324555D8D04}
// *********************************************************************//
  IOnExecEventSchedulerRestartParamsDisp = dispinterface
    ['{3120287D-98B1-4D49-9BC5-3324555D8D04}']
    property NumberOfRetries: Integer dispid 3;
    property CleanupTest: OleVariant dispid 4;
    property OnExecEventSchedulerAction: Integer readonly dispid 1;
    property Parameter[Index: Integer]: OleVariant dispid 2;
  end;

// *********************************************************************//
// Interface: ITestSetTreeManager
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FD53A549-A095-469F-AD8E-95F9F034D2DF}
// *********************************************************************//
  ITestSetTreeManager = interface(IDispatch)
    ['{FD53A549-A095-469F-AD8E-95F9F034D2DF}']
    function Get_Root: IDispatch; safecall;
    function Get_NodeByPath(const Path: WideString): IDispatch; safecall;
    function Get_NodeById(NodeID: Integer): IDispatch; safecall;
    function Get_Unattached: IDispatch; safecall;
    property Root: IDispatch read Get_Root;
    property NodeByPath[const Path: WideString]: IDispatch read Get_NodeByPath;
    property NodeById[NodeID: Integer]: IDispatch read Get_NodeById;
    property Unattached: IDispatch read Get_Unattached;
  end;

// *********************************************************************//
// DispIntf:  ITestSetTreeManagerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FD53A549-A095-469F-AD8E-95F9F034D2DF}
// *********************************************************************//
  ITestSetTreeManagerDisp = dispinterface
    ['{FD53A549-A095-469F-AD8E-95F9F034D2DF}']
    property Root: IDispatch readonly dispid 0;
    property NodeByPath[const Path: WideString]: IDispatch readonly dispid 1;
    property NodeById[NodeID: Integer]: IDispatch readonly dispid 2;
    property Unattached: IDispatch readonly dispid 3;
  end;

// *********************************************************************//
// Interface: ITestSetFolder
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E9E2BCFE-CAAC-492D-A210-C2E49A68C78F}
// *********************************************************************//
  ITestSetFolder = interface(ISysTreeNode)
    ['{E9E2BCFE-CAAC-492D-A210-C2E49A68C78F}']
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pVal: WideString); safecall;
    function Get_FatherID: Integer; safecall;
    function Get_FatherDisp: IDispatch; safecall;
    function Get_ViewOrder: Integer; safecall;
    procedure Set_ViewOrder(pVal: Integer); safecall;
    function Get_SubNodes: IList; safecall;
    function AddNodeDisp(const NodeName: WideString): IDispatch; safecall;
    procedure RemoveNodeEx(Node: OleVariant; DeleteTestSets: WordBool); safecall;
    procedure Move(Father: OleVariant); safecall;
    function Get_TestSetFactory: IDispatch; safecall;
    function Get_HasAttachment: WordBool; safecall;
    function Get_Attachments: IDispatch; safecall;
    function FindTestSets(const Pattern: WideString; MatchCase: WordBool; const Filter: WideString): IList; safecall;
    property Description: WideString read Get_Description write Set_Description;
    property FatherID: Integer read Get_FatherID;
    property FatherDisp: IDispatch read Get_FatherDisp;
    property ViewOrder: Integer read Get_ViewOrder write Set_ViewOrder;
    property SubNodes: IList read Get_SubNodes;
    property TestSetFactory: IDispatch read Get_TestSetFactory;
    property HasAttachment: WordBool read Get_HasAttachment;
    property Attachments: IDispatch read Get_Attachments;
  end;

// *********************************************************************//
// DispIntf:  ITestSetFolderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E9E2BCFE-CAAC-492D-A210-C2E49A68C78F}
// *********************************************************************//
  ITestSetFolderDisp = dispinterface
    ['{E9E2BCFE-CAAC-492D-A210-C2E49A68C78F}']
    property Description: WideString dispid 15;
    property FatherID: Integer readonly dispid 16;
    property FatherDisp: IDispatch readonly dispid 17;
    property ViewOrder: Integer dispid 18;
    property SubNodes: IList readonly dispid 19;
    function AddNodeDisp(const NodeName: WideString): IDispatch; dispid 20;
    procedure RemoveNodeEx(Node: OleVariant; DeleteTestSets: WordBool); dispid 21;
    procedure Move(Father: OleVariant); dispid 22;
    property TestSetFactory: IDispatch readonly dispid 23;
    property HasAttachment: WordBool readonly dispid 24;
    property Attachments: IDispatch readonly dispid 25;
    function FindTestSets(const Pattern: WideString; MatchCase: WordBool; const Filter: WideString): IList; dispid 26;
    property Name: WideString dispid 0;
    function AddNode(const NodeName: WideString): ISysTreeNode; dispid 1;
    function NewList: IList; dispid 2;
    property NodeID: Integer readonly dispid 3;
    property Attribute: Integer readonly dispid 4;
    function FindChildNode(const ChildName: WideString): ISysTreeNode; dispid 5;
    procedure RemoveNode(Node: OleVariant); dispid 6;
    property Father: ISysTreeNode readonly dispid 7;
    property Child[Index: Integer]: ISysTreeNode readonly dispid 8;
    property Count: Integer readonly dispid 9;
    property DepthType: Smallint readonly dispid 10;
    function FindChildren(const Pattern: WideString; MatchCase: WordBool; const Filter: WideString): IList; dispid 11;
    property Path: WideString readonly dispid 12;
    procedure Post; dispid 13;
    procedure Refresh; dispid 14;
  end;

// *********************************************************************//
// Interface: ITestSetFolder2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {18B58E14-B956-40A3-A37F-B8EF1136F238}
// *********************************************************************//
  ITestSetFolder2 = interface(ITestSetFolder)
    ['{18B58E14-B956-40A3-A37F-B8EF1136F238}']
    function FindTestInstances(const Pattern: WideString; MatchCase: WordBool; 
                               const Filter: WideString): IList; safecall;
  end;

// *********************************************************************//
// DispIntf:  ITestSetFolder2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {18B58E14-B956-40A3-A37F-B8EF1136F238}
// *********************************************************************//
  ITestSetFolder2Disp = dispinterface
    ['{18B58E14-B956-40A3-A37F-B8EF1136F238}']
    function FindTestInstances(const Pattern: WideString; MatchCase: WordBool; 
                               const Filter: WideString): IList; dispid 27;
    property Description: WideString dispid 15;
    property FatherID: Integer readonly dispid 16;
    property FatherDisp: IDispatch readonly dispid 17;
    property ViewOrder: Integer dispid 18;
    property SubNodes: IList readonly dispid 19;
    function AddNodeDisp(const NodeName: WideString): IDispatch; dispid 20;
    procedure RemoveNodeEx(Node: OleVariant; DeleteTestSets: WordBool); dispid 21;
    procedure Move(Father: OleVariant); dispid 22;
    property TestSetFactory: IDispatch readonly dispid 23;
    property HasAttachment: WordBool readonly dispid 24;
    property Attachments: IDispatch readonly dispid 25;
    function FindTestSets(const Pattern: WideString; MatchCase: WordBool; const Filter: WideString): IList; dispid 26;
    property Name: WideString dispid 0;
    function AddNode(const NodeName: WideString): ISysTreeNode; dispid 1;
    function NewList: IList; dispid 2;
    property NodeID: Integer readonly dispid 3;
    property Attribute: Integer readonly dispid 4;
    function FindChildNode(const ChildName: WideString): ISysTreeNode; dispid 5;
    procedure RemoveNode(Node: OleVariant); dispid 6;
    property Father: ISysTreeNode readonly dispid 7;
    property Child[Index: Integer]: ISysTreeNode readonly dispid 8;
    property Count: Integer readonly dispid 9;
    property DepthType: Smallint readonly dispid 10;
    function FindChildren(const Pattern: WideString; MatchCase: WordBool; const Filter: WideString): IList; dispid 11;
    property Path: WideString readonly dispid 12;
    procedure Post; dispid 13;
    procedure Refresh; dispid 14;
  end;

// *********************************************************************//
// Interface: ITestSetFolder3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {42A0D93D-2E7A-4D93-A9DF-754928F7F6BC}
// *********************************************************************//
  ITestSetFolder3 = interface(ITestSetFolder2)
    ['{42A0D93D-2E7A-4D93-A9DF-754928F7F6BC}']
    procedure Set_TargetCycle(pVal: OleVariant); safecall;
    function Get_TargetCycle: OleVariant; safecall;
    function Get_FolderFields: IList; safecall;
    property TargetCycle: OleVariant read Get_TargetCycle write Set_TargetCycle;
    property FolderFields: IList read Get_FolderFields;
  end;

// *********************************************************************//
// DispIntf:  ITestSetFolder3Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {42A0D93D-2E7A-4D93-A9DF-754928F7F6BC}
// *********************************************************************//
  ITestSetFolder3Disp = dispinterface
    ['{42A0D93D-2E7A-4D93-A9DF-754928F7F6BC}']
    property TargetCycle: OleVariant dispid 28;
    property FolderFields: IList readonly dispid 29;
    function FindTestInstances(const Pattern: WideString; MatchCase: WordBool; 
                               const Filter: WideString): IList; dispid 27;
    property Description: WideString dispid 15;
    property FatherID: Integer readonly dispid 16;
    property FatherDisp: IDispatch readonly dispid 17;
    property ViewOrder: Integer dispid 18;
    property SubNodes: IList readonly dispid 19;
    function AddNodeDisp(const NodeName: WideString): IDispatch; dispid 20;
    procedure RemoveNodeEx(Node: OleVariant; DeleteTestSets: WordBool); dispid 21;
    procedure Move(Father: OleVariant); dispid 22;
    property TestSetFactory: IDispatch readonly dispid 23;
    property HasAttachment: WordBool readonly dispid 24;
    property Attachments: IDispatch readonly dispid 25;
    function FindTestSets(const Pattern: WideString; MatchCase: WordBool; const Filter: WideString): IList; dispid 26;
    property Name: WideString dispid 0;
    function AddNode(const NodeName: WideString): ISysTreeNode; dispid 1;
    function NewList: IList; dispid 2;
    property NodeID: Integer readonly dispid 3;
    property Attribute: Integer readonly dispid 4;
    function FindChildNode(const ChildName: WideString): ISysTreeNode; dispid 5;
    procedure RemoveNode(Node: OleVariant); dispid 6;
    property Father: ISysTreeNode readonly dispid 7;
    property Child[Index: Integer]: ISysTreeNode readonly dispid 8;
    property Count: Integer readonly dispid 9;
    property DepthType: Smallint readonly dispid 10;
    function FindChildren(const Pattern: WideString; MatchCase: WordBool; const Filter: WideString): IList; dispid 11;
    property Path: WideString readonly dispid 12;
    procedure Post; dispid 13;
    procedure Refresh; dispid 14;
  end;

// *********************************************************************//
// Interface: _ITestSetFolder
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {5FCA1AE7-AE4A-4709-BD98-13240D68BBD4}
// *********************************************************************//
  _ITestSetFolder = interface(IUnknown)
    ['{5FCA1AE7-AE4A-4709-BD98-13240D68BBD4}']
    procedure _FindChildNode_(const ChildName: WideString; Recursive: WordBool; 
                              out pNode: ITestSetFolder; out pIndex: Integer); safecall;
    function _IsInitialized_: WordBool; safecall;
    procedure _SetNodeData_(const NodeData: WideString); safecall;
    procedure _MoveChild_(const Node: IDispatch; Order: WordBool); safecall;
  end;

// *********************************************************************//
// DispIntf:  _ITestSetFolderDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {5FCA1AE7-AE4A-4709-BD98-13240D68BBD4}
// *********************************************************************//
  _ITestSetFolderDisp = dispinterface
    ['{5FCA1AE7-AE4A-4709-BD98-13240D68BBD4}']
    procedure _FindChildNode_(const ChildName: WideString; Recursive: WordBool; 
                              out pNode: ITestSetFolder; out pIndex: Integer); dispid 1610678272;
    function _IsInitialized_: WordBool; dispid 1610678273;
    procedure _SetNodeData_(const NodeData: WideString); dispid 1610678274;
    procedure _MoveChild_(const Node: IDispatch; Order: WordBool); dispid 1610678275;
  end;

// *********************************************************************//
// Interface: ITestSetFolderInternal
// Flags:     (256) OleAutomation
// GUID:      {19F5C80C-DB4A-48B0-9EE8-AE0AE3090D89}
// *********************************************************************//
  ITestSetFolderInternal = interface(IUnknown)
    ['{19F5C80C-DB4A-48B0-9EE8-AE0AE3090D89}']
    function GetInstancesInformation(out pAll: Integer; out pNotExecuted: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ICustomizationMailConditions
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2D05E2CD-60E9-4C56-A05D-D25872A00335}
// *********************************************************************//
  ICustomizationMailConditions = interface(IDispatch)
    ['{2D05E2CD-60E9-4C56-A05D-D25872A00335}']
    function Get_Condition(const Name: WideString; ConditionType: Integer): IDispatch; safecall;
    function Get_Conditions: IList; safecall;
    function AddCondition(const Name: WideString; ConditionType: Integer; 
                          const ConditionText: WideString): IDispatch; safecall;
    procedure RemoveCondition(const Name: WideString; ConditionType: Integer); safecall;
    function Get_ConditionExist(const Name: WideString; ConditionType: Integer): WordBool; safecall;
    property Condition[const Name: WideString; ConditionType: Integer]: IDispatch read Get_Condition;
    property Conditions: IList read Get_Conditions;
    property ConditionExist[const Name: WideString; ConditionType: Integer]: WordBool read Get_ConditionExist;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationMailConditionsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2D05E2CD-60E9-4C56-A05D-D25872A00335}
// *********************************************************************//
  ICustomizationMailConditionsDisp = dispinterface
    ['{2D05E2CD-60E9-4C56-A05D-D25872A00335}']
    property Condition[const Name: WideString; ConditionType: Integer]: IDispatch readonly dispid 1;
    property Conditions: IList readonly dispid 2;
    function AddCondition(const Name: WideString; ConditionType: Integer; 
                          const ConditionText: WideString): IDispatch; dispid 3;
    procedure RemoveCondition(const Name: WideString; ConditionType: Integer); dispid 4;
    property ConditionExist[const Name: WideString; ConditionType: Integer]: WordBool readonly dispid 5;
  end;

// *********************************************************************//
// Interface: ICustomizationMailCondition
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {509C8491-47BF-454B-B899-852A55A17F46}
// *********************************************************************//
  ICustomizationMailCondition = interface(IDispatch)
    ['{509C8491-47BF-454B-B899-852A55A17F46}']
    function Get_Name: WideString; safecall;
    function Get_ConditionText: WideString; safecall;
    procedure Set_ConditionText(const pVal: WideString); safecall;
    function Get_Updated: WordBool; safecall;
    procedure Set_Updated(pVal: WordBool); safecall;
    function Get_Deleted: WordBool; safecall;
    procedure Set_Deleted(pVal: WordBool); safecall;
    function Get_ConditionType: Integer; safecall;
    property Name: WideString read Get_Name;
    property ConditionText: WideString read Get_ConditionText write Set_ConditionText;
    property Updated: WordBool read Get_Updated write Set_Updated;
    property Deleted: WordBool read Get_Deleted write Set_Deleted;
    property ConditionType: Integer read Get_ConditionType;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationMailConditionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {509C8491-47BF-454B-B899-852A55A17F46}
// *********************************************************************//
  ICustomizationMailConditionDisp = dispinterface
    ['{509C8491-47BF-454B-B899-852A55A17F46}']
    property Name: WideString readonly dispid 1;
    property ConditionText: WideString dispid 2;
    property Updated: WordBool dispid 3;
    property Deleted: WordBool dispid 4;
    property ConditionType: Integer readonly dispid 5;
  end;

// *********************************************************************//
// Interface: IAnalysis
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {557AF6E9-FB13-4934-9A8F-6620BA38C547}
// *********************************************************************//
  IAnalysis = interface(IDispatch)
    ['{557AF6E9-FB13-4934-9A8F-6620BA38C547}']
    function Get_FilterText: WideString; safecall;
    procedure Set_FilterText(const pVal: WideString); safecall;
    function Get_type_: WideString; safecall;
    procedure Set_type_(const pVal: WideString); safecall;
    function GetDistinctValues(Fields: OleVariant): OleVariant; safecall;
    function GetSummaryData(Fields: OleVariant; DataFields: OleVariant): OleVariant; safecall;
    function Get_JoinCondition: WideString; safecall;
    procedure Set_JoinCondition(const pVal: WideString); safecall;
    property FilterText: WideString read Get_FilterText write Set_FilterText;
    property type_: WideString read Get_type_ write Set_type_;
    property JoinCondition: WideString read Get_JoinCondition write Set_JoinCondition;
  end;

// *********************************************************************//
// DispIntf:  IAnalysisDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {557AF6E9-FB13-4934-9A8F-6620BA38C547}
// *********************************************************************//
  IAnalysisDisp = dispinterface
    ['{557AF6E9-FB13-4934-9A8F-6620BA38C547}']
    property FilterText: WideString dispid 1;
    property type_: WideString dispid 2;
    function GetDistinctValues(Fields: OleVariant): OleVariant; dispid 3;
    function GetSummaryData(Fields: OleVariant; DataFields: OleVariant): OleVariant; dispid 4;
    property JoinCondition: WideString dispid 5;
  end;

// *********************************************************************//
// Interface: IAlert
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A1314B45-32F6-4841-9EB6-922EC4A76CB2}
// *********************************************************************//
  IAlert = interface(IDispatch)
    ['{A1314B45-32F6-4841-9EB6-922EC4A76CB2}']
    function Get_Description: WideString; safecall;
    function Get_AlertDate: TDateTime; safecall;
    function Get_ID: Integer; safecall;
    function Get_AlertType: Integer; safecall;
    function Get_Unread: WordBool; safecall;
    procedure Set_Unread(pVal: WordBool); safecall;
    function Get_Subject: WideString; safecall;
    function Get_ParentEntityURL: WideString; safecall;
    property Description: WideString read Get_Description;
    property AlertDate: TDateTime read Get_AlertDate;
    property ID: Integer read Get_ID;
    property AlertType: Integer read Get_AlertType;
    property Unread: WordBool read Get_Unread write Set_Unread;
    property Subject: WideString read Get_Subject;
    property ParentEntityURL: WideString read Get_ParentEntityURL;
  end;

// *********************************************************************//
// DispIntf:  IAlertDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A1314B45-32F6-4841-9EB6-922EC4A76CB2}
// *********************************************************************//
  IAlertDisp = dispinterface
    ['{A1314B45-32F6-4841-9EB6-922EC4A76CB2}']
    property Description: WideString readonly dispid 1;
    property AlertDate: TDateTime readonly dispid 2;
    property ID: Integer readonly dispid 3;
    property AlertType: Integer readonly dispid 4;
    property Unread: WordBool dispid 5;
    property Subject: WideString readonly dispid 6;
    property ParentEntityURL: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface: IAlertManager
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7A0B3B0B-60C4-4B84-8A35-1E9337AD055E}
// *********************************************************************//
  IAlertManager = interface(IDispatch)
    ['{7A0B3B0B-60C4-4B84-8A35-1E9337AD055E}']
    procedure DeleteAlert(IDs: OleVariant); safecall;
    procedure CleanAllAlerts; safecall;
    function Get_Alert(ID: Integer): IDispatch; safecall;
    function Get_AlertList(const EntityType: WideString; NeedRefresh: WordBool): IList; safecall;
    property Alert[ID: Integer]: IDispatch read Get_Alert;
    property AlertList[const EntityType: WideString; NeedRefresh: WordBool]: IList read Get_AlertList;
  end;

// *********************************************************************//
// DispIntf:  IAlertManagerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7A0B3B0B-60C4-4B84-8A35-1E9337AD055E}
// *********************************************************************//
  IAlertManagerDisp = dispinterface
    ['{7A0B3B0B-60C4-4B84-8A35-1E9337AD055E}']
    procedure DeleteAlert(IDs: OleVariant); dispid 1;
    procedure CleanAllAlerts; dispid 2;
    property Alert[ID: Integer]: IDispatch readonly dispid 3;
    property AlertList[const EntityType: WideString; NeedRefresh: WordBool]: IList readonly dispid 4;
  end;

// *********************************************************************//
// Interface: IAlertManager2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AAA7D0A8-433C-4A92-8A8C-E160C743FD68}
// *********************************************************************//
  IAlertManager2 = interface(IAlertManager)
    ['{AAA7D0A8-433C-4A92-8A8C-E160C743FD68}']
    function GetFilterText: WideString; safecall;
    procedure DeleteAlertsByFilter(const EntityType: WideString; const Filter: WideString); safecall;
  end;

// *********************************************************************//
// DispIntf:  IAlertManager2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AAA7D0A8-433C-4A92-8A8C-E160C743FD68}
// *********************************************************************//
  IAlertManager2Disp = dispinterface
    ['{AAA7D0A8-433C-4A92-8A8C-E160C743FD68}']
    function GetFilterText: WideString; dispid 5;
    procedure DeleteAlertsByFilter(const EntityType: WideString; const Filter: WideString); dispid 6;
    procedure DeleteAlert(IDs: OleVariant); dispid 1;
    procedure CleanAllAlerts; dispid 2;
    property Alert[ID: Integer]: IDispatch readonly dispid 3;
    property AlertList[const EntityType: WideString; NeedRefresh: WordBool]: IList readonly dispid 4;
  end;

// *********************************************************************//
// Interface: IRuleManager
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FCBDBAD5-380A-43F5-B4D4-4CD988B0C924}
// *********************************************************************//
  IRuleManager = interface(IDispatch)
    ['{FCBDBAD5-380A-43F5-B4D4-4CD988B0C924}']
    function GetRule(ID: Integer): IDispatch; safecall;
    function Get_Rules(NeedRefresh: WordBool): IList; safecall;
    property Rules[NeedRefresh: WordBool]: IList read Get_Rules;
  end;

// *********************************************************************//
// DispIntf:  IRuleManagerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FCBDBAD5-380A-43F5-B4D4-4CD988B0C924}
// *********************************************************************//
  IRuleManagerDisp = dispinterface
    ['{FCBDBAD5-380A-43F5-B4D4-4CD988B0C924}']
    function GetRule(ID: Integer): IDispatch; dispid 1;
    property Rules[NeedRefresh: WordBool]: IList readonly dispid 2;
  end;

// *********************************************************************//
// Interface: IRule
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5186B0F4-DAC2-4ABD-B248-8ED6E852C40D}
// *********************************************************************//
  IRule = interface(IDispatch)
    ['{5186B0F4-DAC2-4ABD-B248-8ED6E852C40D}']
    function Get_ID: Integer; safecall;
    function Get_IsActive: WordBool; safecall;
    procedure Set_IsActive(pVal: WordBool); safecall;
    function Get_ToMail: WordBool; safecall;
    procedure Set_ToMail(pVal: WordBool); safecall;
    function Get_Description: WideString; safecall;
    procedure Post; safecall;
    property ID: Integer read Get_ID;
    property IsActive: WordBool read Get_IsActive write Set_IsActive;
    property ToMail: WordBool read Get_ToMail write Set_ToMail;
    property Description: WideString read Get_Description;
  end;

// *********************************************************************//
// DispIntf:  IRuleDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5186B0F4-DAC2-4ABD-B248-8ED6E852C40D}
// *********************************************************************//
  IRuleDisp = dispinterface
    ['{5186B0F4-DAC2-4ABD-B248-8ED6E852C40D}']
    property ID: Integer readonly dispid 1;
    property IsActive: WordBool dispid 2;
    property ToMail: WordBool dispid 3;
    property Description: WideString readonly dispid 4;
    procedure Post; dispid 5;
  end;

// *********************************************************************//
// Interface: IRule2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2B4FDFEF-7FD6-4152-944D-11E5D938ACB6}
// *********************************************************************//
  IRule2 = interface(IRule)
    ['{2B4FDFEF-7FD6-4152-944D-11E5D938ACB6}']
    function Get_Recipient: WideString; safecall;
    property Recipient: WideString read Get_Recipient;
  end;

// *********************************************************************//
// DispIntf:  IRule2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2B4FDFEF-7FD6-4152-944D-11E5D938ACB6}
// *********************************************************************//
  IRule2Disp = dispinterface
    ['{2B4FDFEF-7FD6-4152-944D-11E5D938ACB6}']
    property Recipient: WideString readonly dispid 6;
    property ID: Integer readonly dispid 1;
    property IsActive: WordBool dispid 2;
    property ToMail: WordBool dispid 3;
    property Description: WideString readonly dispid 4;
    procedure Post; dispid 5;
  end;

// *********************************************************************//
// Interface: IReqSummaryStatus
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CCD9F62A-3899-4233-9C2C-A25BFF1AF041}
// *********************************************************************//
  IReqSummaryStatus = interface(IDispatch)
    ['{CCD9F62A-3899-4233-9C2C-A25BFF1AF041}']
    function Get_PossibleStatuses: IList; safecall;
    function Get_SummaryStatus(const StatusName: WideString): Integer; safecall;
    function Get_TotalSummaryNodes: Integer; safecall;
    function Get_ReqID: Integer; safecall;
    property PossibleStatuses: IList read Get_PossibleStatuses;
    property SummaryStatus[const StatusName: WideString]: Integer read Get_SummaryStatus;
    property TotalSummaryNodes: Integer read Get_TotalSummaryNodes;
    property ReqID: Integer read Get_ReqID;
  end;

// *********************************************************************//
// DispIntf:  IReqSummaryStatusDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CCD9F62A-3899-4233-9C2C-A25BFF1AF041}
// *********************************************************************//
  IReqSummaryStatusDisp = dispinterface
    ['{CCD9F62A-3899-4233-9C2C-A25BFF1AF041}']
    property PossibleStatuses: IList readonly dispid 1;
    property SummaryStatus[const StatusName: WideString]: Integer readonly dispid 2;
    property TotalSummaryNodes: Integer readonly dispid 3;
    property ReqID: Integer readonly dispid 4;
  end;

// *********************************************************************//
// Interface: IReqCoverageStatus
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {650BCE02-3C9A-4C22-ABCF-C2872EED73EB}
// *********************************************************************//
  IReqCoverageStatus = interface(IDispatch)
    ['{650BCE02-3C9A-4C22-ABCF-C2872EED73EB}']
    function Get_PossibleStatuses: IList; safecall;
    function Get_SummaryStatus(const Status: WideString): Integer; safecall;
    function Get_TotalSummaryNodes: Integer; safecall;
    property PossibleStatuses: IList read Get_PossibleStatuses;
    property SummaryStatus[const Status: WideString]: Integer read Get_SummaryStatus;
    property TotalSummaryNodes: Integer read Get_TotalSummaryNodes;
  end;

// *********************************************************************//
// DispIntf:  IReqCoverageStatusDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {650BCE02-3C9A-4C22-ABCF-C2872EED73EB}
// *********************************************************************//
  IReqCoverageStatusDisp = dispinterface
    ['{650BCE02-3C9A-4C22-ABCF-C2872EED73EB}']
    property PossibleStatuses: IList readonly dispid 1;
    property SummaryStatus[const Status: WideString]: Integer readonly dispid 2;
    property TotalSummaryNodes: Integer readonly dispid 3;
  end;

// *********************************************************************//
// Interface: ICacheMgr
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {30300941-F52E-4FFD-8314-3EA232206EB0}
// *********************************************************************//
  ICacheMgr = interface(IDispatch)
    ['{30300941-F52E-4FFD-8314-3EA232206EB0}']
    procedure Run; safecall;
    function Get_IsRunning: Integer; safecall;
    procedure SetFileTime(const bsFilePath: WideString); safecall;
    procedure SetUpdateRegistry(bAllowUpdate: Integer); safecall;
    procedure SetCurrentTest(const bsTestPath: WideString); safecall;
    property IsRunning: Integer read Get_IsRunning;
  end;

// *********************************************************************//
// DispIntf:  ICacheMgrDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {30300941-F52E-4FFD-8314-3EA232206EB0}
// *********************************************************************//
  ICacheMgrDisp = dispinterface
    ['{30300941-F52E-4FFD-8314-3EA232206EB0}']
    procedure Run; dispid 1;
    property IsRunning: Integer readonly dispid 2;
    procedure SetFileTime(const bsFilePath: WideString); dispid 3;
    procedure SetUpdateRegistry(bAllowUpdate: Integer); dispid 4;
    procedure SetCurrentTest(const bsTestPath: WideString); dispid 5;
  end;

// *********************************************************************//
// Interface: IComponentFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A4CEDAE3-5E32-43FC-9D39-FDA737799A1E}
// *********************************************************************//
  IComponentFactory = interface(IBaseFactory)
    ['{A4CEDAE3-5E32-43FC-9D39-FDA737799A1E}']
    procedure get_ItemFromServer(ItemKey: OleVariant; var pItem: IDispatch); safecall;
    function IsComponentNameValid(const bsName: WideString; out pbsErrorString: WideString): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IComponentFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A4CEDAE3-5E32-43FC-9D39-FDA737799A1E}
// *********************************************************************//
  IComponentFactoryDisp = dispinterface
    ['{A4CEDAE3-5E32-43FC-9D39-FDA737799A1E}']
    procedure get_ItemFromServer(ItemKey: OleVariant; var pItem: IDispatch); dispid 20;
    function IsComponentNameValid(const bsName: WideString; out pbsErrorString: WideString): WordBool; dispid 21;
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: IComponentFolderFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D6F05DAE-7F99-4FE0-9432-D48CAC4BA16E}
// *********************************************************************//
  IComponentFolderFactory = interface(IBaseFactory)
    ['{D6F05DAE-7F99-4FE0-9432-D48CAC4BA16E}']
    function Root: IDispatch; safecall;
    function FolderPath(folderId: Integer): WideString; safecall;
    function FolderByPath(const Path: WideString): IDispatch; safecall;
    function UnattachedComponents: IList; safecall;
    function Templates: IDispatch; safecall;
    function Obsolete: IDispatch; safecall;
  end;

// *********************************************************************//
// DispIntf:  IComponentFolderFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D6F05DAE-7F99-4FE0-9432-D48CAC4BA16E}
// *********************************************************************//
  IComponentFolderFactoryDisp = dispinterface
    ['{D6F05DAE-7F99-4FE0-9432-D48CAC4BA16E}']
    function Root: IDispatch; dispid 8;
    function FolderPath(folderId: Integer): WideString; dispid 9;
    function FolderByPath(const Path: WideString): IDispatch; dispid 10;
    function UnattachedComponents: IList; dispid 11;
    function Templates: IDispatch; dispid 12;
    function Obsolete: IDispatch; dispid 13;
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: IComponent
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E8BFF66F-A020-4909-B9E3-1591182D27D7}
// *********************************************************************//
  IComponent = interface(IBaseFieldEx)
    ['{E8BFF66F-A020-4909-B9E3-1591182D27D7}']
    function Get_ComponentParamFactory: IDispatch; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    function BusinessProcesses: IList; safecall;
    function Get_IsIteratable: WordBool; safecall;
    procedure Set_IsIteratable(pVal: WordBool); safecall;
    function Get_IsObsolete: WordBool; safecall;
    function Get_Folder: IDispatch; safecall;
    function Get_HasScript: WordBool; safecall;
    function Get_HasPicture: WordBool; safecall;
    procedure Set_HasPicture(pvbVal: WordBool); safecall;
    function Get_ExtendedStorage(nEntityType: Integer): IDispatch; safecall;
    function Get_ScriptType: WideString; safecall;
    procedure Set_ScriptType(const pbsVal: WideString); safecall;
    procedure DeletePicture(const bsData: WideString); safecall;
    function Get_ComponentStepFactory: IDispatch; safecall;
    procedure SetStepsData; safecall;
    function Get_ApplicationAreaID: Integer; safecall;
    procedure Set_ApplicationAreaID(pVal: Integer); safecall;
    property ComponentParamFactory: IDispatch read Get_ComponentParamFactory;
    property Name: WideString read Get_Name write Set_Name;
    property IsIteratable: WordBool read Get_IsIteratable write Set_IsIteratable;
    property IsObsolete: WordBool read Get_IsObsolete;
    property Folder: IDispatch read Get_Folder;
    property HasScript: WordBool read Get_HasScript;
    property HasPicture: WordBool read Get_HasPicture write Set_HasPicture;
    property ExtendedStorage[nEntityType: Integer]: IDispatch read Get_ExtendedStorage;
    property ScriptType: WideString read Get_ScriptType write Set_ScriptType;
    property ComponentStepFactory: IDispatch read Get_ComponentStepFactory;
    property ApplicationAreaID: Integer read Get_ApplicationAreaID write Set_ApplicationAreaID;
  end;

// *********************************************************************//
// DispIntf:  IComponentDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E8BFF66F-A020-4909-B9E3-1591182D27D7}
// *********************************************************************//
  IComponentDisp = dispinterface
    ['{E8BFF66F-A020-4909-B9E3-1591182D27D7}']
    property ComponentParamFactory: IDispatch readonly dispid 14;
    property Name: WideString dispid 18;
    function BusinessProcesses: IList; dispid 19;
    property IsIteratable: WordBool dispid 20;
    property IsObsolete: WordBool readonly dispid 21;
    property Folder: IDispatch readonly dispid 22;
    property HasScript: WordBool readonly dispid 23;
    property HasPicture: WordBool dispid 24;
    property ExtendedStorage[nEntityType: Integer]: IDispatch readonly dispid 25;
    property ScriptType: WideString dispid 26;
    procedure DeletePicture(const bsData: WideString); dispid 27;
    property ComponentStepFactory: IDispatch readonly dispid 28;
    procedure SetStepsData; dispid 29;
    property ApplicationAreaID: Integer dispid 30;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IComponentFolder
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7A6F279C-7729-4394-B5BB-BC3E8902DA56}
// *********************************************************************//
  IComponentFolder = interface(IBaseFieldEx)
    ['{7A6F279C-7729-4394-B5BB-BC3E8902DA56}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    function Get_ComponentFactory: IDispatch; safecall;
    function Get_ComponentFolderFactory: IDispatch; safecall;
    function Get_Path: WideString; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property ComponentFactory: IDispatch read Get_ComponentFactory;
    property ComponentFolderFactory: IDispatch read Get_ComponentFolderFactory;
    property Path: WideString read Get_Path;
  end;

// *********************************************************************//
// DispIntf:  IComponentFolderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7A6F279C-7729-4394-B5BB-BC3E8902DA56}
// *********************************************************************//
  IComponentFolderDisp = dispinterface
    ['{7A6F279C-7729-4394-B5BB-BC3E8902DA56}']
    property Name: WideString dispid 14;
    property ComponentFactory: IDispatch readonly dispid 15;
    property ComponentFolderFactory: IDispatch readonly dispid 16;
    property Path: WideString readonly dispid 17;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IBusinessProcess
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {590E515E-D527-4436-B04C-40942DBFFB5F}
// *********************************************************************//
  IBusinessProcess = interface(ITest)
    ['{590E515E-D527-4436-B04C-40942DBFFB5F}']
    procedure Load; safecall;
    procedure Save; safecall;
    function Get_RTParameters: IList; safecall;
    function AddRTParam: IDispatch; safecall;
    procedure DeleteRTParam(const pRTParam: IDispatch); safecall;
    function Get_BPComponents: IList; safecall;
    function AddBPComponent(const pComponent: IDispatch): IDispatch; safecall;
    procedure DeleteBPComponent(const pBPComponent: IDispatch); safecall;
    function AddGroup: IDispatch; safecall;
    procedure DeleteGroup(const pBPGroup: IDispatch); safecall;
    function Get_GroupByID(nGroupID: Integer): IDispatch; safecall;
    procedure DownloadPictures; safecall;
    procedure DownloadPicturesProgress(out Total: Integer; out Current: Integer); safecall;
    procedure CancelDownloadPictures; safecall;
    function Get_HtmlScript: HResult; safecall;
    function Get_BPTHistory: IDispatch; safecall;
    function Get_BPComponentByID(nCompID: Integer): IDispatch; safecall;
    property RTParameters: IList read Get_RTParameters;
    property BPComponents: IList read Get_BPComponents;
    property GroupByID[nGroupID: Integer]: IDispatch read Get_GroupByID;
    property HtmlScript: HResult read Get_HtmlScript;
    property BPTHistory: IDispatch read Get_BPTHistory;
    property BPComponentByID[nCompID: Integer]: IDispatch read Get_BPComponentByID;
  end;

// *********************************************************************//
// DispIntf:  IBusinessProcessDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {590E515E-D527-4436-B04C-40942DBFFB5F}
// *********************************************************************//
  IBusinessProcessDisp = dispinterface
    ['{590E515E-D527-4436-B04C-40942DBFFB5F}']
    procedure Load; dispid 100;
    procedure Save; dispid 101;
    property RTParameters: IList readonly dispid 102;
    function AddRTParam: IDispatch; dispid 103;
    procedure DeleteRTParam(const pRTParam: IDispatch); dispid 104;
    property BPComponents: IList readonly dispid 105;
    function AddBPComponent(const pComponent: IDispatch): IDispatch; dispid 106;
    procedure DeleteBPComponent(const pBPComponent: IDispatch); dispid 107;
    function AddGroup: IDispatch; dispid 108;
    procedure DeleteGroup(const pBPGroup: IDispatch); dispid 109;
    property GroupByID[nGroupID: Integer]: IDispatch readonly dispid 110;
    procedure DownloadPictures; dispid 111;
    procedure DownloadPicturesProgress(out Total: Integer; out Current: Integer); dispid 112;
    procedure CancelDownloadPictures; dispid 113;
    property HtmlScript: HResult readonly dispid 114;
    property BPTHistory: IDispatch readonly dispid 115;
    property BPComponentByID[nCompID: Integer]: IDispatch readonly dispid 116;
    property FullPath: WideString readonly dispid 15;
    property type_: WideString dispid 16;
    property Name: WideString dispid 17;
    property DesignStepFactory: IDispatch readonly dispid 18;
    property DesStepsNum: Integer readonly dispid 19;
    function CoverRequirement(Req: OleVariant; Order: Integer; Recursive: WordBool): Integer; dispid 20;
    procedure RemoveCoverage(Req: OleVariant); dispid 21;
    function GetCoverList: IList; dispid 22;
    property ExtendedStorage: IDispatch readonly dispid 23;
    property ExecStatus: WideString readonly dispid 24;
    property HasCoverage: WordBool readonly dispid 25;
    property LastRun: IDispatch readonly dispid 26;
    property ExecDate: TDateTime readonly dispid 27;
    property TemplateTest: WordBool dispid 28;
    property Params: IDispatch readonly dispid 29;
    property HasParam: WordBool readonly dispid 30;
    property VCS: IDispatch readonly dispid 31;
    property CheckoutPathIfExist: WideString readonly dispid 32;
    property IgnoreDataHiding: WordBool dispid 33;
    property FullPathEx[isOrgFullPath: Integer]: WideString readonly dispid 34;
    procedure Mail(const SendTo: WideString; const SendCc: WideString; Option: Integer; 
                   const Subject: WideString; const Comment: WideString); dispid 14;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IBaseParam
// Flags:     (4096) Dispatchable
// GUID:      {DC091A33-E1E8-4A17-8C55-529C09B0670B}
// *********************************************************************//
  IBaseParam = interface(IBaseField)
    ['{DC091A33-E1E8-4A17-8C55-529C09B0670B}']
    function Get_Name(out pVal: WideString): HResult; stdcall;
    function Set_Name(const pVal: WideString): HResult; stdcall;
    function Get_Value(out pVal: WideString): HResult; stdcall;
    function Set_Value(const pVal: WideString): HResult; stdcall;
    function Get_Desc(out pVal: WideString): HResult; stdcall;
    function Set_Desc(const pVal: WideString): HResult; stdcall;
    function Get_ValueType(out pVal: WideString): HResult; stdcall;
    function Set_ValueType(const pVal: WideString): HResult; stdcall;
    function Get_Order(out pVal: Integer): HResult; stdcall;
    function Set_Order(pVal: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IComponentParam
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F65AD9CD-D5A3-4EC5-8904-017E4E9D2351}
// *********************************************************************//
  IComponentParam = interface(IBaseParam)
    ['{F65AD9CD-D5A3-4EC5-8904-017E4E9D2351}']
    function Get_Component: IDispatch; safecall;
    function Get_IsOut: Integer; safecall;
    procedure Set_IsOut(pVal: Integer); safecall;
    property Component: IDispatch read Get_Component;
    property IsOut: Integer read Get_IsOut write Set_IsOut;
  end;

// *********************************************************************//
// DispIntf:  IComponentParamDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F65AD9CD-D5A3-4EC5-8904-017E4E9D2351}
// *********************************************************************//
  IComponentParamDisp = dispinterface
    ['{F65AD9CD-D5A3-4EC5-8904-017E4E9D2351}']
    property Component: IDispatch readonly dispid 20;
    property IsOut: Integer dispid 21;
    function Name: WideString; dispid 14;
    function Value: WideString; dispid 15;
    function Desc: WideString; dispid 16;
    function ValueType: WideString; dispid 17;
    function Order: Integer; dispid 18;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IBPComponent
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {42AD6542-9DBC-4A66-BC3F-7692832D33CB}
// *********************************************************************//
  IBPComponent = interface(IBaseFieldEx)
    ['{42AD6542-9DBC-4A66-BC3F-7692832D33CB}']
    function Get_Component: IDispatch; safecall;
    function Get_Order: Integer; safecall;
    procedure Set_Order(plVal: Integer); safecall;
    function Get_Test: IDispatch; safecall;
    function Get_FailureCondition: WideString; safecall;
    procedure Set_FailureCondition(const pVal: WideString); safecall;
    function Get_Name: WideString; safecall;
    function Get_Group: IDispatch; safecall;
    procedure Set_GroupId(Param1: Integer); safecall;
    function Get_BPParams: IList; safecall;
    function Get_Iterations: IList; safecall;
    function AddIteration: IDispatch; safecall;
    procedure DeleteIteration(const pVal: IDispatch); safecall;
    function _AddBPParameter(const pComponentParam: IDispatch): IDispatch; safecall;
    property Component: IDispatch read Get_Component;
    property Order: Integer read Get_Order write Set_Order;
    property Test: IDispatch read Get_Test;
    property FailureCondition: WideString read Get_FailureCondition write Set_FailureCondition;
    property Name: WideString read Get_Name;
    property Group: IDispatch read Get_Group;
    property GroupId: Integer write Set_GroupId;
    property BPParams: IList read Get_BPParams;
    property Iterations: IList read Get_Iterations;
  end;

// *********************************************************************//
// DispIntf:  IBPComponentDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {42AD6542-9DBC-4A66-BC3F-7692832D33CB}
// *********************************************************************//
  IBPComponentDisp = dispinterface
    ['{42AD6542-9DBC-4A66-BC3F-7692832D33CB}']
    property Component: IDispatch readonly dispid 14;
    property Order: Integer dispid 15;
    property Test: IDispatch readonly dispid 16;
    property FailureCondition: WideString dispid 17;
    property Name: WideString readonly dispid 18;
    property Group: IDispatch readonly dispid 19;
    property GroupId: Integer writeonly dispid 20;
    property BPParams: IList readonly dispid 21;
    property Iterations: IList readonly dispid 22;
    function AddIteration: IDispatch; dispid 23;
    procedure DeleteIteration(const pVal: IDispatch); dispid 24;
    function _AddBPParameter(const pComponentParam: IDispatch): IDispatch; dispid 25;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IRTParam
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E0C8D290-50AF-4811-A5FB-3ED5B78B99F3}
// *********************************************************************//
  IRTParam = interface(IBaseParam)
    ['{E0C8D290-50AF-4811-A5FB-3ED5B78B99F3}']
  end;

// *********************************************************************//
// DispIntf:  IRTParamDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E0C8D290-50AF-4811-A5FB-3ED5B78B99F3}
// *********************************************************************//
  IRTParamDisp = dispinterface
    ['{E0C8D290-50AF-4811-A5FB-3ED5B78B99F3}']
    function Name: WideString; dispid 14;
    function Value: WideString; dispid 15;
    function Desc: WideString; dispid 16;
    function ValueType: WideString; dispid 17;
    function Order: Integer; dispid 18;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IBPIteration
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F96FB8D9-0CD2-4B82-85FA-AB07C435F87F}
// *********************************************************************//
  IBPIteration = interface(IBaseField)
    ['{F96FB8D9-0CD2-4B82-85FA-AB07C435F87F}']
    function Get_BPComponent: IDispatch; safecall;
    function Get_IterationParams: IList; safecall;
    function AddParam(const pVal: IDispatch): IDispatch; safecall;
    procedure DeleteParam(const pVal: IDispatch); safecall;
    procedure DeleteIterationParams; safecall;
    function Get_Order: Integer; safecall;
    procedure Set_Order(pVal: Integer); safecall;
    property BPComponent: IDispatch read Get_BPComponent;
    property IterationParams: IList read Get_IterationParams;
    property Order: Integer read Get_Order write Set_Order;
  end;

// *********************************************************************//
// DispIntf:  IBPIterationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F96FB8D9-0CD2-4B82-85FA-AB07C435F87F}
// *********************************************************************//
  IBPIterationDisp = dispinterface
    ['{F96FB8D9-0CD2-4B82-85FA-AB07C435F87F}']
    property BPComponent: IDispatch readonly dispid 14;
    property IterationParams: IList readonly dispid 15;
    function AddParam(const pVal: IDispatch): IDispatch; dispid 16;
    procedure DeleteParam(const pVal: IDispatch); dispid 17;
    procedure DeleteIterationParams; dispid 18;
    property Order: Integer dispid 19;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IBPIterationParam
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B40742AD-3BED-40B4-BD58-0F24E41ACDD2}
// *********************************************************************//
  IBPIterationParam = interface(IBaseField)
    ['{B40742AD-3BED-40B4-BD58-0F24E41ACDD2}']
    function Get_BPParameter: IDispatch; safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pVal: WideString); safecall;
    property BPParameter: IDispatch read Get_BPParameter;
    property Value: WideString read Get_Value write Set_Value;
  end;

// *********************************************************************//
// DispIntf:  IBPIterationParamDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B40742AD-3BED-40B4-BD58-0F24E41ACDD2}
// *********************************************************************//
  IBPIterationParamDisp = dispinterface
    ['{B40742AD-3BED-40B4-BD58-0F24E41ACDD2}']
    property BPParameter: IDispatch readonly dispid 20;
    property Value: WideString dispid 21;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IBPParam
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {51A0C1D6-F748-41D1-988F-B0B93013F1BC}
// *********************************************************************//
  IBPParam = interface(IBaseField)
    ['{51A0C1D6-F748-41D1-988F-B0B93013F1BC}']
    function Get_Reference: IDispatch; safecall;
    procedure Set_Reference(const pVal: IDispatch); safecall;
    function Get_type_: Integer; safecall;
    function Get_ComponentParam: IDispatch; safecall;
    function Get_ComponentParamName: WideString; safecall;
    function Get_ComponentParamIsOut: Integer; safecall;
    function Get_BPComponent: IDispatch; safecall;
    function Get_ComponentParamOrder: Integer; safecall;
    property Reference: IDispatch read Get_Reference write Set_Reference;
    property type_: Integer read Get_type_;
    property ComponentParam: IDispatch read Get_ComponentParam;
    property ComponentParamName: WideString read Get_ComponentParamName;
    property ComponentParamIsOut: Integer read Get_ComponentParamIsOut;
    property BPComponent: IDispatch read Get_BPComponent;
    property ComponentParamOrder: Integer read Get_ComponentParamOrder;
  end;

// *********************************************************************//
// DispIntf:  IBPParamDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {51A0C1D6-F748-41D1-988F-B0B93013F1BC}
// *********************************************************************//
  IBPParamDisp = dispinterface
    ['{51A0C1D6-F748-41D1-988F-B0B93013F1BC}']
    property Reference: IDispatch dispid 20;
    property type_: Integer readonly dispid 21;
    property ComponentParam: IDispatch readonly dispid 22;
    property ComponentParamName: WideString readonly dispid 23;
    property ComponentParamIsOut: Integer readonly dispid 26;
    property BPComponent: IDispatch readonly dispid 24;
    property ComponentParamOrder: Integer readonly dispid 25;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IExport
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {08E8895B-686D-4F75-9F16-F9E130D99470}
// *********************************************************************//
  IExport = interface(IDispatch)
    ['{08E8895B-686D-4F75-9F16-F9E130D99470}']
    procedure ExportData(const XMLData: WideString; const ResourceID: WideString); safecall;
  end;

// *********************************************************************//
// DispIntf:  IExportDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {08E8895B-686D-4F75-9F16-F9E130D99470}
// *********************************************************************//
  IExportDisp = dispinterface
    ['{08E8895B-686D-4F75-9F16-F9E130D99470}']
    procedure ExportData(const XMLData: WideString; const ResourceID: WideString); dispid 1;
  end;

// *********************************************************************//
// Interface: IImport
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3A6DFEA9-5E15-4E8F-B480-2B025730F7BD}
// *********************************************************************//
  IImport = interface(IDispatch)
    ['{3A6DFEA9-5E15-4E8F-B480-2B025730F7BD}']
    procedure GetColumnNames(out bstrpColumns: WideString; const bstrResourceeName: WideString); safecall;
    procedure ImportData(const bstrColumnNames: WideString; var bstrpData: WideString); safecall;
  end;

// *********************************************************************//
// DispIntf:  IImportDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3A6DFEA9-5E15-4E8F-B480-2B025730F7BD}
// *********************************************************************//
  IImportDisp = dispinterface
    ['{3A6DFEA9-5E15-4E8F-B480-2B025730F7BD}']
    procedure GetColumnNames(out bstrpColumns: WideString; const bstrResourceeName: WideString); dispid 1;
    procedure ImportData(const bstrColumnNames: WideString; var bstrpData: WideString); dispid 2;
  end;

// *********************************************************************//
// Interface: ITDUtils
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BB603787-CBD0-48CD-AA8A-B4532DC714D1}
// *********************************************************************//
  ITDUtils = interface(IDispatch)
    ['{BB603787-CBD0-48CD-AA8A-B4532DC714D1}']
    function Encrypt(const strToEncrypt: WideString): WideString; safecall;
    function Get_CurrentTimeStamp: WideString; safecall;
    property CurrentTimeStamp: WideString read Get_CurrentTimeStamp;
  end;

// *********************************************************************//
// DispIntf:  ITDUtilsDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BB603787-CBD0-48CD-AA8A-B4532DC714D1}
// *********************************************************************//
  ITDUtilsDisp = dispinterface
    ['{BB603787-CBD0-48CD-AA8A-B4532DC714D1}']
    function Encrypt(const strToEncrypt: WideString): WideString; dispid 1;
    property CurrentTimeStamp: WideString readonly dispid 3;
  end;

// *********************************************************************//
// Interface: IBPHistoryRecord
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E1582AF7-780E-4D93-9771-E196205F96C7}
// *********************************************************************//
  IBPHistoryRecord = interface(IDispatch)
    ['{E1582AF7-780E-4D93-9771-E196205F96C7}']
    function Get_Description: WideString; safecall;
    function Get_Time: WideString; safecall;
    function Get_Changer: WideString; safecall;
    function ToXmlString: WideString; safecall;
    property Description: WideString read Get_Description;
    property Time: WideString read Get_Time;
    property Changer: WideString read Get_Changer;
  end;

// *********************************************************************//
// DispIntf:  IBPHistoryRecordDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E1582AF7-780E-4D93-9771-E196205F96C7}
// *********************************************************************//
  IBPHistoryRecordDisp = dispinterface
    ['{E1582AF7-780E-4D93-9771-E196205F96C7}']
    property Description: WideString readonly dispid 1;
    property Time: WideString readonly dispid 2;
    property Changer: WideString readonly dispid 3;
    function ToXmlString: WideString; dispid 4;
  end;

// *********************************************************************//
// Interface: IBPGroup
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DB466018-78FF-4645-9B45-B32F823C07F3}
// *********************************************************************//
  IBPGroup = interface(IDispatch)
    ['{DB466018-78FF-4645-9B45-B32F823C07F3}']
    function BPComponents: IList; safecall;
    procedure AddBPComponent(const pBPComponent: IDispatch); safecall;
    procedure DeleteBPComponent(const pBPComponent: IDispatch); safecall;
    function Get_ID: Integer; safecall;
    property ID: Integer read Get_ID;
  end;

// *********************************************************************//
// DispIntf:  IBPGroupDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DB466018-78FF-4645-9B45-B32F823C07F3}
// *********************************************************************//
  IBPGroupDisp = dispinterface
    ['{DB466018-78FF-4645-9B45-B32F823C07F3}']
    function BPComponents: IList; dispid 1;
    procedure AddBPComponent(const pBPComponent: IDispatch); dispid 2;
    procedure DeleteBPComponent(const pBPComponent: IDispatch); dispid 3;
    property ID: Integer readonly dispid 4;
  end;

// *********************************************************************//
// Interface: IComponentStep
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6687454E-8D1A-462E-BFDE-E342BFF132D3}
// *********************************************************************//
  IComponentStep = interface(IBaseField)
    ['{6687454E-8D1A-462E-BFDE-E342BFF132D3}']
    function Get_StepDescription: WideString; safecall;
    procedure Set_StepDescription(const pVal: WideString); safecall;
    function Get_Order: Integer; safecall;
    procedure Set_Order(pVal: Integer); safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_StepName: WideString; safecall;
    procedure Set_StepName(const pVal: WideString); safecall;
    function Get_StepExpectedResult: WideString; safecall;
    procedure Set_StepExpectedResult(const pVal: WideString); safecall;
    procedure Validate; safecall;
    property StepDescription: WideString read Get_StepDescription write Set_StepDescription;
    property Order: Integer read Get_Order write Set_Order;
    property Parent: IDispatch read Get_Parent;
    property StepName: WideString read Get_StepName write Set_StepName;
    property StepExpectedResult: WideString read Get_StepExpectedResult write Set_StepExpectedResult;
  end;

// *********************************************************************//
// DispIntf:  IComponentStepDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6687454E-8D1A-462E-BFDE-E342BFF132D3}
// *********************************************************************//
  IComponentStepDisp = dispinterface
    ['{6687454E-8D1A-462E-BFDE-E342BFF132D3}']
    property StepDescription: WideString dispid 11;
    property Order: Integer dispid 12;
    property Parent: IDispatch readonly dispid 13;
    property StepName: WideString dispid 14;
    property StepExpectedResult: WideString dispid 15;
    procedure Validate; dispid 16;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IBPStepParam
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6BA5E493-366C-4068-B572-93D27D405DFE}
// *********************************************************************//
  IBPStepParam = interface(IBaseField)
    ['{6BA5E493-366C-4068-B572-93D27D405DFE}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pVal: WideString); safecall;
    function Get_type_: Integer; safecall;
    procedure Set_type_(pVal: Integer); safecall;
    function Get_ReferencedParamID: Integer; safecall;
    procedure Set_ReferencedParamID(pVal: Integer); safecall;
    function Get_StepID: Integer; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Value: WideString read Get_Value write Set_Value;
    property type_: Integer read Get_type_ write Set_type_;
    property ReferencedParamID: Integer read Get_ReferencedParamID write Set_ReferencedParamID;
    property StepID: Integer read Get_StepID;
  end;

// *********************************************************************//
// DispIntf:  IBPStepParamDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6BA5E493-366C-4068-B572-93D27D405DFE}
// *********************************************************************//
  IBPStepParamDisp = dispinterface
    ['{6BA5E493-366C-4068-B572-93D27D405DFE}']
    property Name: WideString dispid 14;
    property Value: WideString dispid 15;
    property type_: Integer dispid 16;
    property ReferencedParamID: Integer dispid 17;
    property StepID: Integer readonly dispid 18;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IProductInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2C8D6469-AE61-4F01-801E-6B2087216786}
// *********************************************************************//
  IProductInfo = interface(IDispatch)
    ['{2C8D6469-AE61-4F01-801E-6B2087216786}']
    function Get_QCVersion(out pnMajorVersion: Integer; out pnMinorVersion: Integer): Integer; safecall;
    function Get_BPTVersion: Integer; safecall;
    property QCVersion[out pnMajorVersion: Integer; out pnMinorVersion: Integer]: Integer read Get_QCVersion;
    property BPTVersion: Integer read Get_BPTVersion;
  end;

// *********************************************************************//
// DispIntf:  IProductInfoDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2C8D6469-AE61-4F01-801E-6B2087216786}
// *********************************************************************//
  IProductInfoDisp = dispinterface
    ['{2C8D6469-AE61-4F01-801E-6B2087216786}']
    property QCVersion[out pnMajorVersion: Integer; out pnMinorVersion: Integer]: Integer readonly dispid 1;
    property BPTVersion: Integer readonly dispid 2;
  end;

// *********************************************************************//
// Interface: IGroupingManager
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {33CCFC63-CE02-47AB-9A11-BB2E0C324723}
// *********************************************************************//
  IGroupingManager = interface(IDispatch)
    ['{33CCFC63-CE02-47AB-9A11-BB2E0C324723}']
    function Get_Filter: IDispatch; safecall;
    procedure Set_Filter(const pVal: IDispatch); safecall;
    function Get_Group(const Name: WideString): Integer; safecall;
    procedure Set_Group(const Name: WideString; pVal: Integer); safecall;
    function GroupList: IList; safecall;
    function ItemList: IList; safecall;
    procedure Refresh; safecall;
    procedure Clear; safecall;
    function IsClear: WordBool; safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const pVal: WideString); safecall;
    property Filter: IDispatch read Get_Filter write Set_Filter;
    property Group[const Name: WideString]: Integer read Get_Group write Set_Group;
    property Text: WideString read Get_Text write Set_Text;
  end;

// *********************************************************************//
// DispIntf:  IGroupingManagerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {33CCFC63-CE02-47AB-9A11-BB2E0C324723}
// *********************************************************************//
  IGroupingManagerDisp = dispinterface
    ['{33CCFC63-CE02-47AB-9A11-BB2E0C324723}']
    property Filter: IDispatch dispid 1;
    property Group[const Name: WideString]: Integer dispid 2;
    function GroupList: IList; dispid 3;
    function ItemList: IList; dispid 4;
    procedure Refresh; dispid 5;
    procedure Clear; dispid 6;
    function IsClear: WordBool; dispid 7;
    property Text: WideString dispid 8;
  end;

// *********************************************************************//
// Interface: IGroupingItem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {31FDA98D-C50C-416D-BB4F-9D5294896175}
// *********************************************************************//
  IGroupingItem = interface(IDispatch)
    ['{31FDA98D-C50C-416D-BB4F-9D5294896175}']
    function Get_FieldName: WideString; safecall;
    function Get_FieldValue: WideString; safecall;
    function Get_ItemCount: Integer; safecall;
    function Get_ItemList: IList; safecall;
    function Get_GroupList: IList; safecall;
    property FieldName: WideString read Get_FieldName;
    property FieldValue: WideString read Get_FieldValue;
    property ItemCount: Integer read Get_ItemCount;
    property ItemList: IList read Get_ItemList;
    property GroupList: IList read Get_GroupList;
  end;

// *********************************************************************//
// DispIntf:  IGroupingItemDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {31FDA98D-C50C-416D-BB4F-9D5294896175}
// *********************************************************************//
  IGroupingItemDisp = dispinterface
    ['{31FDA98D-C50C-416D-BB4F-9D5294896175}']
    property FieldName: WideString readonly dispid 1;
    property FieldValue: WideString readonly dispid 2;
    property ItemCount: Integer readonly dispid 3;
    property ItemList: IList readonly dispid 4;
    property GroupList: IList readonly dispid 5;
  end;

// *********************************************************************//
// Interface: IAuditRecordFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {10747648-0DF0-4B8C-8853-7408C70D883A}
// *********************************************************************//
  IAuditRecordFactory = interface(IBaseFactory)
    ['{10747648-0DF0-4B8C-8853-7408C70D883A}']
  end;

// *********************************************************************//
// DispIntf:  IAuditRecordFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {10747648-0DF0-4B8C-8853-7408C70D883A}
// *********************************************************************//
  IAuditRecordFactoryDisp = dispinterface
    ['{10747648-0DF0-4B8C-8853-7408C70D883A}']
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: IAuditPropertyFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A3D667D7-2285-4FE1-A799-8581C6D8DE70}
// *********************************************************************//
  IAuditPropertyFactory = interface(IBaseFactory)
    ['{A3D667D7-2285-4FE1-A799-8581C6D8DE70}']
  end;

// *********************************************************************//
// DispIntf:  IAuditPropertyFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A3D667D7-2285-4FE1-A799-8581C6D8DE70}
// *********************************************************************//
  IAuditPropertyFactoryDisp = dispinterface
    ['{A3D667D7-2285-4FE1-A799-8581C6D8DE70}']
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: IAuditable
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3DE03C28-EC6B-4953-96C2-E3216051C907}
// *********************************************************************//
  IAuditable = interface(IDispatch)
    ['{3DE03C28-EC6B-4953-96C2-E3216051C907}']
    function Get_AuditRecordFactory: IDispatch; safecall;
    function Get_AuditPropertyFactory: IDispatch; safecall;
    property AuditRecordFactory: IDispatch read Get_AuditRecordFactory;
    property AuditPropertyFactory: IDispatch read Get_AuditPropertyFactory;
  end;

// *********************************************************************//
// DispIntf:  IAuditableDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3DE03C28-EC6B-4953-96C2-E3216051C907}
// *********************************************************************//
  IAuditableDisp = dispinterface
    ['{3DE03C28-EC6B-4953-96C2-E3216051C907}']
    property AuditRecordFactory: IDispatch readonly dispid 1;
    property AuditPropertyFactory: IDispatch readonly dispid 2;
  end;

// *********************************************************************//
// Interface: IAuditRecord
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1754ECE8-1386-456C-AA7C-AD448412EDA3}
// *********************************************************************//
  IAuditRecord = interface(IBaseField)
    ['{1754ECE8-1386-456C-AA7C-AD448412EDA3}']
    function Get_AuditPropertyFactory: IDispatch; safecall;
    function Get_Action: WideString; safecall;
    function Get_EntityType: WideString; safecall;
    function Get_EntityID: WideString; safecall;
    function Get_UserName: WideString; safecall;
    function Get_SessionID: Integer; safecall;
    function Get_Time: WideString; safecall;
    function Get_ContextID: Integer; safecall;
    function Get_Description: WideString; safecall;
    function Get_ActionID: Integer; safecall;
    property AuditPropertyFactory: IDispatch read Get_AuditPropertyFactory;
    property Action: WideString read Get_Action;
    property EntityType: WideString read Get_EntityType;
    property EntityID: WideString read Get_EntityID;
    property UserName: WideString read Get_UserName;
    property SessionID: Integer read Get_SessionID;
    property Time: WideString read Get_Time;
    property ContextID: Integer read Get_ContextID;
    property Description: WideString read Get_Description;
    property ActionID: Integer read Get_ActionID;
  end;

// *********************************************************************//
// DispIntf:  IAuditRecordDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1754ECE8-1386-456C-AA7C-AD448412EDA3}
// *********************************************************************//
  IAuditRecordDisp = dispinterface
    ['{1754ECE8-1386-456C-AA7C-AD448412EDA3}']
    property AuditPropertyFactory: IDispatch readonly dispid 11;
    property Action: WideString readonly dispid 12;
    property EntityType: WideString readonly dispid 13;
    property EntityID: WideString readonly dispid 14;
    property UserName: WideString readonly dispid 15;
    property SessionID: Integer readonly dispid 16;
    property Time: WideString readonly dispid 17;
    property ContextID: Integer readonly dispid 18;
    property Description: WideString readonly dispid 19;
    property ActionID: Integer readonly dispid 20;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IAuditProperty
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DD1C7F94-5C11-416D-B11D-DA062309D43A}
// *********************************************************************//
  IAuditProperty = interface(IBaseField)
    ['{DD1C7F94-5C11-416D-B11D-DA062309D43A}']
    function Get_TableName: WideString; safecall;
    function Get_FieldName: WideString; safecall;
    function Get_PropertyName: WideString; safecall;
    function Get_OldValue: OleVariant; safecall;
    function Get_NewValue: OleVariant; safecall;
    function Get_ActionID: Integer; safecall;
    function Get_Action: WideString; safecall;
    function Get_UserName: WideString; safecall;
    function Get_SessionID: Integer; safecall;
    function Get_Time: WideString; safecall;
    function Get_EntityType: WideString; safecall;
    function Get_EntityID: WideString; safecall;
    property TableName: WideString read Get_TableName;
    property FieldName: WideString read Get_FieldName;
    property PropertyName: WideString read Get_PropertyName;
    property OldValue: OleVariant read Get_OldValue;
    property NewValue: OleVariant read Get_NewValue;
    property ActionID: Integer read Get_ActionID;
    property Action: WideString read Get_Action;
    property UserName: WideString read Get_UserName;
    property SessionID: Integer read Get_SessionID;
    property Time: WideString read Get_Time;
    property EntityType: WideString read Get_EntityType;
    property EntityID: WideString read Get_EntityID;
  end;

// *********************************************************************//
// DispIntf:  IAuditPropertyDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DD1C7F94-5C11-416D-B11D-DA062309D43A}
// *********************************************************************//
  IAuditPropertyDisp = dispinterface
    ['{DD1C7F94-5C11-416D-B11D-DA062309D43A}']
    property TableName: WideString readonly dispid 11;
    property FieldName: WideString readonly dispid 12;
    property PropertyName: WideString readonly dispid 13;
    property OldValue: OleVariant readonly dispid 14;
    property NewValue: OleVariant readonly dispid 15;
    property ActionID: Integer readonly dispid 16;
    property Action: WideString readonly dispid 17;
    property UserName: WideString readonly dispid 18;
    property SessionID: Integer readonly dispid 19;
    property Time: WideString readonly dispid 20;
    property EntityType: WideString readonly dispid 21;
    property EntityID: WideString readonly dispid 22;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IReqType
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F6B62ACC-B8F1-45EF-9387-3C9FC69B529D}
// *********************************************************************//
  IReqType = interface(IDispatch)
    ['{F6B62ACC-B8F1-45EF-9387-3C9FC69B529D}']
    function Get_ID: Integer; safecall;
    function Get_Name: WideString; safecall;
    function Get_Icon: IStream; safecall;
    function Get_EditingControl: WideString; safecall;
    function Get_HasDirectCoverage: WordBool; safecall;
    function Get_RiskAnalysisType: Integer; safecall;
    function Get_Prefix: WideString; safecall;
    property ID: Integer read Get_ID;
    property Name: WideString read Get_Name;
    property Icon: IStream read Get_Icon;
    property EditingControl: WideString read Get_EditingControl;
    property HasDirectCoverage: WordBool read Get_HasDirectCoverage;
    property RiskAnalysisType: Integer read Get_RiskAnalysisType;
    property Prefix: WideString read Get_Prefix;
  end;

// *********************************************************************//
// DispIntf:  IReqTypeDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F6B62ACC-B8F1-45EF-9387-3C9FC69B529D}
// *********************************************************************//
  IReqTypeDisp = dispinterface
    ['{F6B62ACC-B8F1-45EF-9387-3C9FC69B529D}']
    property ID: Integer readonly dispid 1;
    property Name: WideString readonly dispid 2;
    property Icon: IStream readonly dispid 3;
    property EditingControl: WideString readonly dispid 4;
    property HasDirectCoverage: WordBool readonly dispid 5;
    property RiskAnalysisType: Integer readonly dispid 6;
    property Prefix: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface: IReleaseFolder
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1D7BC0E7-454B-4F73-B693-F6B38763F8E2}
// *********************************************************************//
  IReleaseFolder = interface(IBaseFieldExMail)
    ['{1D7BC0E7-454B-4F73-B693-F6B38763F8E2}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    function Get_ReleaseFactory: IDispatch; safecall;
    function Get_ReleaseFolderFactory: IDispatch; safecall;
    function Get_Parent: IDispatch; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property ReleaseFactory: IDispatch read Get_ReleaseFactory;
    property ReleaseFolderFactory: IDispatch read Get_ReleaseFolderFactory;
    property Parent: IDispatch read Get_Parent;
  end;

// *********************************************************************//
// DispIntf:  IReleaseFolderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1D7BC0E7-454B-4F73-B693-F6B38763F8E2}
// *********************************************************************//
  IReleaseFolderDisp = dispinterface
    ['{1D7BC0E7-454B-4F73-B693-F6B38763F8E2}']
    property Name: WideString dispid 15;
    property ReleaseFactory: IDispatch readonly dispid 16;
    property ReleaseFolderFactory: IDispatch readonly dispid 17;
    property Parent: IDispatch readonly dispid 18;
    procedure Mail(const SendTo: WideString; const SendCc: WideString; Option: Integer; 
                   const Subject: WideString; const Comment: WideString); dispid 14;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IStringRepresentation
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B1DF17B2-7243-40FA-B423-1566A1988246}
// *********************************************************************//
  IStringRepresentation = interface(IDispatch)
    ['{B1DF17B2-7243-40FA-B423-1566A1988246}']
    function ToString: WideString; safecall;
  end;

// *********************************************************************//
// DispIntf:  IStringRepresentationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B1DF17B2-7243-40FA-B423-1566A1988246}
// *********************************************************************//
  IStringRepresentationDisp = dispinterface
    ['{B1DF17B2-7243-40FA-B423-1566A1988246}']
    function ToString: WideString; dispid 1;
  end;

// *********************************************************************//
// Interface: ISysTreeNode2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9A7EB65C-DA52-4CA3-BE0F-010499A82A36}
// *********************************************************************//
  ISysTreeNode2 = interface(ISysTreeNode)
    ['{9A7EB65C-DA52-4CA3-BE0F-010499A82A36}']
    function Get_type_: Integer; safecall;
    property type_: Integer read Get_type_;
  end;

// *********************************************************************//
// DispIntf:  ISysTreeNode2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9A7EB65C-DA52-4CA3-BE0F-010499A82A36}
// *********************************************************************//
  ISysTreeNode2Disp = dispinterface
    ['{9A7EB65C-DA52-4CA3-BE0F-010499A82A36}']
    property type_: Integer readonly dispid 15;
    property Name: WideString dispid 0;
    function AddNode(const NodeName: WideString): ISysTreeNode; dispid 1;
    function NewList: IList; dispid 2;
    property NodeID: Integer readonly dispid 3;
    property Attribute: Integer readonly dispid 4;
    function FindChildNode(const ChildName: WideString): ISysTreeNode; dispid 5;
    procedure RemoveNode(Node: OleVariant); dispid 6;
    property Father: ISysTreeNode readonly dispid 7;
    property Child[Index: Integer]: ISysTreeNode readonly dispid 8;
    property Count: Integer readonly dispid 9;
    property DepthType: Smallint readonly dispid 10;
    function FindChildren(const Pattern: WideString; MatchCase: WordBool; const Filter: WideString): IList; dispid 11;
    property Path: WideString readonly dispid 12;
    procedure Post; dispid 13;
    procedure Refresh; dispid 14;
  end;

// *********************************************************************//
// Interface: IRelease
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B08CEC57-0E62-49BB-9791-0D764F613B2E}
// *********************************************************************//
  IRelease = interface(IBaseFieldExMail)
    ['{B08CEC57-0E62-49BB-9791-0D764F613B2E}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    function Get_StartDate: TDateTime; safecall;
    procedure Set_StartDate(pVal: TDateTime); safecall;
    function Get_EndDate: TDateTime; safecall;
    procedure Set_EndDate(pVal: TDateTime); safecall;
    function Get_Status: WideString; safecall;
    procedure Set_Status(const pVal: WideString); safecall;
    function Get_CycleFactory: IDispatch; safecall;
    function Get_Parent: IDispatch; safecall;
    function DaysLeft: Integer; safecall;
    function Get_ReleaseManagementInfo: IDispatch; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property StartDate: TDateTime read Get_StartDate write Set_StartDate;
    property EndDate: TDateTime read Get_EndDate write Set_EndDate;
    property Status: WideString read Get_Status write Set_Status;
    property CycleFactory: IDispatch read Get_CycleFactory;
    property Parent: IDispatch read Get_Parent;
    property ReleaseManagementInfo: IDispatch read Get_ReleaseManagementInfo;
  end;

// *********************************************************************//
// DispIntf:  IReleaseDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B08CEC57-0E62-49BB-9791-0D764F613B2E}
// *********************************************************************//
  IReleaseDisp = dispinterface
    ['{B08CEC57-0E62-49BB-9791-0D764F613B2E}']
    property Name: WideString dispid 15;
    property StartDate: TDateTime dispid 16;
    property EndDate: TDateTime dispid 17;
    property Status: WideString dispid 18;
    property CycleFactory: IDispatch readonly dispid 19;
    property Parent: IDispatch readonly dispid 20;
    function DaysLeft: Integer; dispid 21;
    property ReleaseManagementInfo: IDispatch readonly dispid 22;
    procedure Mail(const SendTo: WideString; const SendCc: WideString; Option: Integer; 
                   const Subject: WideString; const Comment: WideString); dispid 14;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IReleaseFolderFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {372A0E68-0D49-401A-97E2-C29595E8A562}
// *********************************************************************//
  IReleaseFolderFactory = interface(IBaseFactoryEx)
    ['{372A0E68-0D49-401A-97E2-C29595E8A562}']
    function Get_Root: IDispatch; safecall;
    property Root: IDispatch read Get_Root;
  end;

// *********************************************************************//
// DispIntf:  IReleaseFolderFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {372A0E68-0D49-401A-97E2-C29595E8A562}
// *********************************************************************//
  IReleaseFolderFactoryDisp = dispinterface
    ['{372A0E68-0D49-401A-97E2-C29595E8A562}']
    property Root: IDispatch readonly dispid 9;
    procedure Mail(Items: OleVariant; const SendTo: WideString; const SendCc: WideString; 
                   Option: Integer; const Subject: WideString; const Comment: WideString); dispid 8;
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: IReleaseFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A11A2CBD-C066-4E20-9F2B-73F88AB32198}
// *********************************************************************//
  IReleaseFactory = interface(IBaseFactoryEx)
    ['{A11A2CBD-C066-4E20-9F2B-73F88AB32198}']
    function BuildCoverageGraph(ReleaseID: Integer): IDispatch; safecall;
  end;

// *********************************************************************//
// DispIntf:  IReleaseFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A11A2CBD-C066-4E20-9F2B-73F88AB32198}
// *********************************************************************//
  IReleaseFactoryDisp = dispinterface
    ['{A11A2CBD-C066-4E20-9F2B-73F88AB32198}']
    function BuildCoverageGraph(ReleaseID: Integer): IDispatch; dispid 1610874880;
    procedure Mail(Items: OleVariant; const SendTo: WideString; const SendCc: WideString; 
                   Option: Integer; const Subject: WideString; const Comment: WideString); dispid 8;
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: ICycleFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B5C61825-C184-4FBC-89FA-A7CC04EF815D}
// *********************************************************************//
  ICycleFactory = interface(IBaseFactoryEx)
    ['{B5C61825-C184-4FBC-89FA-A7CC04EF815D}']
    function BuildCoverageGraph(CycleID: Integer): IDispatch; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICycleFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B5C61825-C184-4FBC-89FA-A7CC04EF815D}
// *********************************************************************//
  ICycleFactoryDisp = dispinterface
    ['{B5C61825-C184-4FBC-89FA-A7CC04EF815D}']
    function BuildCoverageGraph(CycleID: Integer): IDispatch; dispid 1610874880;
    procedure Mail(Items: OleVariant; const SendTo: WideString; const SendCc: WideString; 
                   Option: Integer; const Subject: WideString; const Comment: WideString); dispid 8;
    property Item[ItemKey: OleVariant]: IDispatch readonly dispid 0; default;
    function NewList(const Filter: WideString): IList; dispid 1;
    property Fields: IList readonly dispid 2;
    function AddItem(ItemData: OleVariant): IDispatch; dispid 3;
    procedure RemoveItem(ItemKey: OleVariant); dispid 4;
    property Filter: IDispatch readonly dispid 5;
    property History: IDispatch readonly dispid 6;
    property FetchLevel[const FieldName: WideString]: Smallint dispid 7;
  end;

// *********************************************************************//
// Interface: ICycle
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {328B58D8-2591-4E09-AAFB-C3C1321B18FA}
// *********************************************************************//
  ICycle = interface(IBaseFieldExMail)
    ['{328B58D8-2591-4E09-AAFB-C3C1321B18FA}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    function Get_StartDate: TDateTime; safecall;
    procedure Set_StartDate(pVal: TDateTime); safecall;
    function Get_EndDate: TDateTime; safecall;
    procedure Set_EndDate(pVal: TDateTime); safecall;
    function Get_Status: WideString; safecall;
    procedure Set_Status(const pVal: WideString); safecall;
    function Get_Parent: IDispatch; safecall;
    function DaysLeft: Integer; safecall;
    function Get_ReleaseManagementInfo: IDispatch; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property StartDate: TDateTime read Get_StartDate write Set_StartDate;
    property EndDate: TDateTime read Get_EndDate write Set_EndDate;
    property Status: WideString read Get_Status write Set_Status;
    property Parent: IDispatch read Get_Parent;
    property ReleaseManagementInfo: IDispatch read Get_ReleaseManagementInfo;
  end;

// *********************************************************************//
// DispIntf:  ICycleDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {328B58D8-2591-4E09-AAFB-C3C1321B18FA}
// *********************************************************************//
  ICycleDisp = dispinterface
    ['{328B58D8-2591-4E09-AAFB-C3C1321B18FA}']
    property Name: WideString dispid 15;
    property StartDate: TDateTime dispid 16;
    property EndDate: TDateTime dispid 17;
    property Status: WideString dispid 18;
    property Parent: IDispatch readonly dispid 19;
    function DaysLeft: Integer; dispid 20;
    property ReleaseManagementInfo: IDispatch readonly dispid 21;
    procedure Mail(const SendTo: WideString; const SendCc: WideString; Option: Integer; 
                   const Subject: WideString; const Comment: WideString); dispid 14;
    property History: IDispatch readonly dispid 11;
    property Attachments: IDispatch readonly dispid 12;
    property HasAttachment: WordBool readonly dispid 13;
    property Field[const FieldName: WideString]: OleVariant dispid 0; default;
    property ID: OleVariant readonly dispid 4;
    property AutoPost: WordBool dispid 5;
    procedure Post; dispid 6;
    procedure Refresh; dispid 7;
    procedure Undo; dispid 8;
    property Modified: WordBool readonly dispid 9;
    property Virtual: WordBool readonly dispid 10;
    property IsLocked: WordBool readonly dispid 1;
    function LockObject: WordBool; dispid 2;
    procedure UnLockObject; dispid 3;
  end;

// *********************************************************************//
// Interface: IReleaseManagementInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F14FB85C-6419-442F-B1DF-5CC4969695D9}
// *********************************************************************//
  IReleaseManagementInfo = interface(IDispatch)
    ['{F14FB85C-6419-442F-B1DF-5CC4969695D9}']
    function Get_Duration: Integer; safecall;
    function Get_DaysLeft: Integer; safecall;
    function Get_TotalTestInstances: Integer; safecall;
    function Get_UnexecutedTestInstances: Integer; safecall;
    function Get_Started: WordBool; safecall;
    property Duration: Integer read Get_Duration;
    property DaysLeft: Integer read Get_DaysLeft;
    property TotalTestInstances: Integer read Get_TotalTestInstances;
    property UnexecutedTestInstances: Integer read Get_UnexecutedTestInstances;
    property Started: WordBool read Get_Started;
  end;

// *********************************************************************//
// DispIntf:  IReleaseManagementInfoDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F14FB85C-6419-442F-B1DF-5CC4969695D9}
// *********************************************************************//
  IReleaseManagementInfoDisp = dispinterface
    ['{F14FB85C-6419-442F-B1DF-5CC4969695D9}']
    property Duration: Integer readonly dispid 1;
    property DaysLeft: Integer readonly dispid 2;
    property TotalTestInstances: Integer readonly dispid 3;
    property UnexecutedTestInstances: Integer readonly dispid 4;
    property Started: WordBool readonly dispid 5;
  end;

// *********************************************************************//
// Interface: IWarningInfo
// Flags:     (0)
// GUID:      {551A15F5-289D-4C25-AAFA-75CB0171668E}
// *********************************************************************//
  IWarningInfo = interface(IUnknown)
    ['{551A15F5-289D-4C25-AAFA-75CB0171668E}']
    function SetWarning(WarningCode: Integer; const WarningDescription: WideString; 
                        const pCaller: IUnknown): HResult; stdcall;
    function SetWarningFromFrec(const WarningFrec: WideString; const pCaller: IUnknown): HResult; stdcall;
    function WarningExists(out pExists: WordBool): HResult; stdcall;
    function GetWarning(out pWarningCode: Integer; out pWarningDescription: WideString): HResult; stdcall;
    function GetCaller(out ppCaller: IUnknown): HResult; stdcall;
    function ClearWarning: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IExtensionData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3A3FE6C4-6DE7-47AB-8BF1-EE578637596A}
// *********************************************************************//
  IExtensionData = interface(IDispatch)
    ['{3A3FE6C4-6DE7-47AB-8BF1-EE578637596A}']
    function Get_Name: WideString; safecall;
    function Get_DisplayName: WideString; safecall;
    function Get_UIDataProviderId: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_OtaDataProviderId: WideString; safecall;
    function Get_Modules: IList; safecall;
    function Get_RepositoryRoot: WideString; safecall;
    property Name: WideString read Get_Name;
    property DisplayName: WideString read Get_DisplayName;
    property UIDataProviderId: WideString read Get_UIDataProviderId;
    property Version: WideString read Get_Version;
    property OtaDataProviderId: WideString read Get_OtaDataProviderId;
    property Modules: IList read Get_Modules;
    property RepositoryRoot: WideString read Get_RepositoryRoot;
  end;

// *********************************************************************//
// DispIntf:  IExtensionDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3A3FE6C4-6DE7-47AB-8BF1-EE578637596A}
// *********************************************************************//
  IExtensionDataDisp = dispinterface
    ['{3A3FE6C4-6DE7-47AB-8BF1-EE578637596A}']
    property Name: WideString readonly dispid 1;
    property DisplayName: WideString readonly dispid 2;
    property UIDataProviderId: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property OtaDataProviderId: WideString readonly dispid 5;
    property Modules: IList readonly dispid 6;
    property RepositoryRoot: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface: IExtensionServiceProvider
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9B1C51AD-A124-465D-96EE-39DB5168FEFC}
// *********************************************************************//
  IExtensionServiceProvider = interface(IDispatch)
    ['{9B1C51AD-A124-465D-96EE-39DB5168FEFC}']
    function Get_QCConnection: ITDConnection; safecall;
    function Get_WebConnection: IUnknown; safecall;
    function Get_CacheManager: ICacheManager; safecall;
    function Get_SystemFieldService: ISystemFieldService; safecall;
    function Get_DataServiceProvider: IDataServiceProvider; safecall;
    function Get_CustomizationPermission: ICustomizationPermissionService; safecall;
    function Get_FactoryService: IFactoryService; safecall;
    function Get_ExtendedStorage(const ExtensionName: WideString; 
                                 const ServerRelativePath: WideString): IExtendedStorage; safecall;
    property QCConnection: ITDConnection read Get_QCConnection;
    property WebConnection: IUnknown read Get_WebConnection;
    property CacheManager: ICacheManager read Get_CacheManager;
    property SystemFieldService: ISystemFieldService read Get_SystemFieldService;
    property DataServiceProvider: IDataServiceProvider read Get_DataServiceProvider;
    property CustomizationPermission: ICustomizationPermissionService read Get_CustomizationPermission;
    property FactoryService: IFactoryService read Get_FactoryService;
    property ExtendedStorage[const ExtensionName: WideString; const ServerRelativePath: WideString]: IExtendedStorage read Get_ExtendedStorage;
  end;

// *********************************************************************//
// DispIntf:  IExtensionServiceProviderDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9B1C51AD-A124-465D-96EE-39DB5168FEFC}
// *********************************************************************//
  IExtensionServiceProviderDisp = dispinterface
    ['{9B1C51AD-A124-465D-96EE-39DB5168FEFC}']
    property QCConnection: ITDConnection readonly dispid 1;
    property WebConnection: IUnknown readonly dispid 2;
    property CacheManager: ICacheManager readonly dispid 3;
    property SystemFieldService: ISystemFieldService readonly dispid 4;
    property DataServiceProvider: IDataServiceProvider readonly dispid 5;
    property CustomizationPermission: ICustomizationPermissionService readonly dispid 6;
    property FactoryService: IFactoryService readonly dispid 7;
    property ExtendedStorage[const ExtensionName: WideString; const ServerRelativePath: WideString]: IExtendedStorage readonly dispid 8;
  end;

// *********************************************************************//
// Interface: ICacheManager
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0EEC8C98-2379-4B90-BB09-EBBA9B2A73E1}
// *********************************************************************//
  ICacheManager = interface(IDispatch)
    ['{0EEC8C98-2379-4B90-BB09-EBBA9B2A73E1}']
    function Get_CacheKey: Integer; safecall;
    function Get_CachedData(const DataType: WideString; const DataCacheKey: WideString): WideString; safecall;
    procedure Set_CachedData(const DataType: WideString; const DataCacheKey: WideString; 
                             const Data: WideString); safecall;
    procedure RemoveCachedData(const DataType: WideString; const DataCacheKey: WideString; 
                               TimeDelay: Integer); safecall;
    property CacheKey: Integer read Get_CacheKey;
    property CachedData[const DataType: WideString; const DataCacheKey: WideString]: WideString read Get_CachedData write Set_CachedData;
  end;

// *********************************************************************//
// DispIntf:  ICacheManagerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0EEC8C98-2379-4B90-BB09-EBBA9B2A73E1}
// *********************************************************************//
  ICacheManagerDisp = dispinterface
    ['{0EEC8C98-2379-4B90-BB09-EBBA9B2A73E1}']
    property CacheKey: Integer readonly dispid 1;
    property CachedData[const DataType: WideString; const DataCacheKey: WideString]: WideString dispid 2;
    procedure RemoveCachedData(const DataType: WideString; const DataCacheKey: WideString; 
                               TimeDelay: Integer); dispid 3;
  end;

// *********************************************************************//
// Interface: ISystemFieldService
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B721DBBD-D7C2-4765-A4B9-164AD6604BD3}
// *********************************************************************//
  ISystemFieldService = interface(IDispatch)
    ['{B721DBBD-D7C2-4765-A4B9-164AD6604BD3}']
    function Get_FieldProperty(const FieldName: WideString; const PropName: WideString): WideString; safecall;
    function Get_FieldRoot(const FieldName: WideString): IDispatch; safecall;
    property FieldProperty[const FieldName: WideString; const PropName: WideString]: WideString read Get_FieldProperty;
    property FieldRoot[const FieldName: WideString]: IDispatch read Get_FieldRoot;
  end;

// *********************************************************************//
// DispIntf:  ISystemFieldServiceDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B721DBBD-D7C2-4765-A4B9-164AD6604BD3}
// *********************************************************************//
  ISystemFieldServiceDisp = dispinterface
    ['{B721DBBD-D7C2-4765-A4B9-164AD6604BD3}']
    property FieldProperty[const FieldName: WideString; const PropName: WideString]: WideString readonly dispid 1;
    property FieldRoot[const FieldName: WideString]: IDispatch readonly dispid 2;
  end;

// *********************************************************************//
// Interface: IDataServiceProvider
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4EA0B972-9132-4485-90BE-AE502F08F784}
// *********************************************************************//
  IDataServiceProvider = interface(IDispatch)
    ['{4EA0B972-9132-4485-90BE-AE502F08F784}']
    function Get_ItemByTypeAndId(ObjectType: Integer; ObjectId: Integer): IDispatch; safecall;
    function Get_ItemByTableNameAndId(const ObjectType: WideString; ObjectId: Integer): IDispatch; safecall;
    function ConvertObjectTypeToName(ObjectType: Integer): WideString; safecall;
    property ItemByTypeAndId[ObjectType: Integer; ObjectId: Integer]: IDispatch read Get_ItemByTypeAndId;
    property ItemByTableNameAndId[const ObjectType: WideString; ObjectId: Integer]: IDispatch read Get_ItemByTableNameAndId;
  end;

// *********************************************************************//
// DispIntf:  IDataServiceProviderDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4EA0B972-9132-4485-90BE-AE502F08F784}
// *********************************************************************//
  IDataServiceProviderDisp = dispinterface
    ['{4EA0B972-9132-4485-90BE-AE502F08F784}']
    property ItemByTypeAndId[ObjectType: Integer; ObjectId: Integer]: IDispatch readonly dispid 1;
    property ItemByTableNameAndId[const ObjectType: WideString; ObjectId: Integer]: IDispatch readonly dispid 2;
    function ConvertObjectTypeToName(ObjectType: Integer): WideString; dispid 3;
  end;

// *********************************************************************//
// Interface: ICustomizationPermissionService
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C5F2DD90-484A-48B3-874F-9BFF5C14AC67}
// *********************************************************************//
  ICustomizationPermissionService = interface(IDispatch)
    ['{C5F2DD90-484A-48B3-874F-9BFF5C14AC67}']
    procedure VerifyAddItem(const TableName: WideString); safecall;
    procedure VerifyRemoveItem(const pBaseField: IBaseField; const TableName: WideString); safecall;
    function Get_FieldOwner(const pBaseField: IBaseField): WideString; safecall;
    function Get_CanModifyField(const EntityName: WideString; Field: OleVariant; Group: OleVariant; 
                                UserSpecific: WordBool): Integer; safecall;
    property FieldOwner[const pBaseField: IBaseField]: WideString read Get_FieldOwner;
    property CanModifyField[const EntityName: WideString; Field: OleVariant; Group: OleVariant; 
                            UserSpecific: WordBool]: Integer read Get_CanModifyField;
  end;

// *********************************************************************//
// DispIntf:  ICustomizationPermissionServiceDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C5F2DD90-484A-48B3-874F-9BFF5C14AC67}
// *********************************************************************//
  ICustomizationPermissionServiceDisp = dispinterface
    ['{C5F2DD90-484A-48B3-874F-9BFF5C14AC67}']
    procedure VerifyAddItem(const TableName: WideString); dispid 1;
    procedure VerifyRemoveItem(const pBaseField: IBaseField; const TableName: WideString); dispid 2;
    property FieldOwner[const pBaseField: IBaseField]: WideString readonly dispid 3;
    property CanModifyField[const EntityName: WideString; Field: OleVariant; Group: OleVariant; 
                            UserSpecific: WordBool]: Integer readonly dispid 4;
  end;

// *********************************************************************//
// Interface: IFactoryService
// Flags:     (16) Hidden
// GUID:      {6332415A-E7DB-4287-95E5-5BD206F6AA8A}
// *********************************************************************//
  IFactoryService = interface(IUnknown)
    ['{6332415A-E7DB-4287-95E5-5BD206F6AA8A}']
    function CreateReqCoverageFactory(OwnerType: Integer; OwnerKey: OleVariant; 
                                      IsVirtualFather: WordBool; out ppFactory: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ICITFactoryService
// Flags:     (16) Hidden
// GUID:      {AAEF1B4C-4B50-4502-BE8E-11AD9A78B9E7}
// *********************************************************************//
  ICITFactoryService = interface(IUnknown)
    ['{AAEF1B4C-4B50-4502-BE8E-11AD9A78B9E7}']
    function CreateApplicationEntityFactory(OwnerType: Integer; OwnerKey: OleVariant; 
                                            IsVirtualFather: WordBool; out ppFactory: IDispatch): HResult; stdcall;
    function CreateApplicationImpactFactory(OwnerType: Integer; OwnerKey: OleVariant; 
                                            IsVirtualFather: WordBool; out ppFactory: IDispatch): HResult; stdcall;
    function CreateChangeEntityFactory(OwnerType: Integer; OwnerKey: OleVariant; 
                                       IsVirtualFather: WordBool; out ppFactory: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISOAFactoryService
// Flags:     (16) Hidden
// GUID:      {30EFB8D1-09A7-44C4-91D4-A4D721CF7370}
// *********************************************************************//
  ISOAFactoryService = interface(IUnknown)
    ['{30EFB8D1-09A7-44C4-91D4-A4D721CF7370}']
    function CreateServiceFactory(OwnerType: Integer; OwnerKey: OleVariant; 
                                  IsVirtualFather: WordBool; out ppFactory: IDispatch): HResult; stdcall;
    function CreateServiceFolderFactory(OwnerType: Integer; OwnerKey: OleVariant; 
                                        IsVirtualFather: WordBool; out ppFactory: IDispatch): HResult; stdcall;
    function CreateServiceGroupFactory(OwnerType: Integer; OwnerKey: OleVariant; 
                                       IsVirtualFather: WordBool; out ppFactory: IDispatch): HResult; stdcall;
    function CreateWsdlOperationFactory(OwnerType: Integer; OwnerKey: OleVariant; 
                                        IsVirtualFather: WordBool; out ppFactory: IDispatch): HResult; stdcall;
    function CreateWsdlOperationParamFactory(OwnerType: Integer; OwnerKey: OleVariant; 
                                             IsVirtualFather: WordBool; out ppFactory: IDispatch): HResult; stdcall;
    function CreateServiceChangeFactory(OwnerType: Integer; OwnerKey: OleVariant; 
                                        IsVirtualFather: WordBool; out ppFactory: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IExtensionManager
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {34AC6EC7-3E2D-4A15-90A0-DF789E91A966}
// *********************************************************************//
  IExtensionManager = interface(IDispatch)
    ['{34AC6EC7-3E2D-4A15-90A0-DF789E91A966}']
    function Get_LoadedExtensions: WideString; safecall;
    property LoadedExtensions: WideString read Get_LoadedExtensions;
  end;

// *********************************************************************//
// DispIntf:  IExtensionManagerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {34AC6EC7-3E2D-4A15-90A0-DF789E91A966}
// *********************************************************************//
  IExtensionManagerDisp = dispinterface
    ['{34AC6EC7-3E2D-4A15-90A0-DF789E91A966}']
    property LoadedExtensions: WideString readonly dispid 1;
  end;

// *********************************************************************//
// Interface: IBaseHierarchyTreeManager
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0225839A-79F8-4493-872C-004FFDDF0CA1}
// *********************************************************************//
  IBaseHierarchyTreeManager = interface(IDispatch)
    ['{0225839A-79F8-4493-872C-004FFDDF0CA1}']
    function Get_Root: IDispatch; safecall;
    function Get_NodeByPath(const Path: WideString): IDispatch; safecall;
    function Get_NodeById(NodeID: Integer): IDispatch; safecall;
    function Get_Unattached: IDispatch; safecall;
    property Root: IDispatch read Get_Root;
    property NodeByPath[const Path: WideString]: IDispatch read Get_NodeByPath;
    property NodeById[NodeID: Integer]: IDispatch read Get_NodeById;
    property Unattached: IDispatch read Get_Unattached;
  end;

// *********************************************************************//
// DispIntf:  IBaseHierarchyTreeManagerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0225839A-79F8-4493-872C-004FFDDF0CA1}
// *********************************************************************//
  IBaseHierarchyTreeManagerDisp = dispinterface
    ['{0225839A-79F8-4493-872C-004FFDDF0CA1}']
    property Root: IDispatch readonly dispid 0;
    property NodeByPath[const Path: WideString]: IDispatch readonly dispid 1;
    property NodeById[NodeID: Integer]: IDispatch readonly dispid 2;
    property Unattached: IDispatch readonly dispid 3;
  end;

// *********************************************************************//
// Interface: IBaseEntityFolder
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {73598F2E-D89E-4144-B9B1-6A4C4D933276}
// *********************************************************************//
  IBaseEntityFolder = interface(ISysTreeNode)
    ['{73598F2E-D89E-4144-B9B1-6A4C4D933276}']
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pVal: WideString); safecall;
    function Get_FatherID: Integer; safecall;
    function Get_FatherDisp: IDispatch; safecall;
    function Get_ViewOrder: Integer; safecall;
    procedure Set_ViewOrder(pVal: Integer); safecall;
    function Get_SubNodes: IList; safecall;
    function AddNodeDisp(const NodeName: WideString): IDispatch; safecall;
    procedure RemoveNodeEx(Node: OleVariant; DeleteSubEntity: WordBool); safecall;
    procedure Move(Father: OleVariant); safecall;
    function Get_EntityFactory: IDispatch; safecall;
    function Get_HasAttachment: WordBool; safecall;
    function Get_Attachments: IDispatch; safecall;
    function FindEntity(const Pattern: WideString; MatchCase: WordBool; const Filter: WideString): IList; safecall;
    function Get_EntityFactoryEx(FactoryType: Integer): IDispatch; safecall;
    property Description: WideString read Get_Description write Set_Description;
    property FatherID: Integer read Get_FatherID;
    property FatherDisp: IDispatch read Get_FatherDisp;
    property ViewOrder: Integer read Get_ViewOrder write Set_ViewOrder;
    property SubNodes: IList read Get_SubNodes;
    property EntityFactory: IDispatch read Get_EntityFactory;
    property HasAttachment: WordBool read Get_HasAttachment;
    property Attachments: IDispatch read Get_Attachments;
    property EntityFactoryEx[FactoryType: Integer]: IDispatch read Get_EntityFactoryEx;
  end;

// *********************************************************************//
// DispIntf:  IBaseEntityFolderDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {73598F2E-D89E-4144-B9B1-6A4C4D933276}
// *********************************************************************//
  IBaseEntityFolderDisp = dispinterface
    ['{73598F2E-D89E-4144-B9B1-6A4C4D933276}']
    property Description: WideString dispid 15;
    property FatherID: Integer readonly dispid 16;
    property FatherDisp: IDispatch readonly dispid 17;
    property ViewOrder: Integer dispid 18;
    property SubNodes: IList readonly dispid 19;
    function AddNodeDisp(const NodeName: WideString): IDispatch; dispid 20;
    procedure RemoveNodeEx(Node: OleVariant; DeleteSubEntity: WordBool); dispid 21;
    procedure Move(Father: OleVariant); dispid 22;
    property EntityFactory: IDispatch readonly dispid 23;
    property HasAttachment: WordBool readonly dispid 24;
    property Attachments: IDispatch readonly dispid 25;
    function FindEntity(const Pattern: WideString; MatchCase: WordBool; const Filter: WideString): IList; dispid 26;
    property EntityFactoryEx[FactoryType: Integer]: IDispatch readonly dispid 27;
    property Name: WideString dispid 0;
    function AddNode(const NodeName: WideString): ISysTreeNode; dispid 1;
    function NewList: IList; dispid 2;
    property NodeID: Integer readonly dispid 3;
    property Attribute: Integer readonly dispid 4;
    function FindChildNode(const ChildName: WideString): ISysTreeNode; dispid 5;
    procedure RemoveNode(Node: OleVariant); dispid 6;
    property Father: ISysTreeNode readonly dispid 7;
    property Child[Index: Integer]: ISysTreeNode readonly dispid 8;
    property Count: Integer readonly dispid 9;
    property DepthType: Smallint readonly dispid 10;
    function FindChildren(const Pattern: WideString; MatchCase: WordBool; const Filter: WideString): IList; dispid 11;
    property Path: WideString readonly dispid 12;
    procedure Post; dispid 13;
    procedure Refresh; dispid 14;
  end;

// *********************************************************************//
// Interface: _IBaseEntityFolder
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {93E2B82D-3DB2-4D46-97D5-BCFCAB106BDF}
// *********************************************************************//
  _IBaseEntityFolder = interface(IUnknown)
    ['{93E2B82D-3DB2-4D46-97D5-BCFCAB106BDF}']
    procedure _FindChildNode_(const ChildName: WideString; Recursive: WordBool; 
                              out pNode: IBaseEntityFolder; out pIndex: Integer); safecall;
    function _IsInitialized_: WordBool; safecall;
    procedure _SetNodeData_(const NodeData: WideString); safecall;
    procedure _MoveChild_(const Node: IDispatch; Order: WordBool); safecall;
  end;

// *********************************************************************//
// DispIntf:  _IBaseEntityFolderDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {93E2B82D-3DB2-4D46-97D5-BCFCAB106BDF}
// *********************************************************************//
  _IBaseEntityFolderDisp = dispinterface
    ['{93E2B82D-3DB2-4D46-97D5-BCFCAB106BDF}']
    procedure _FindChildNode_(const ChildName: WideString; Recursive: WordBool; 
                              out pNode: IBaseEntityFolder; out pIndex: Integer); dispid 1610678272;
    function _IsInitialized_: WordBool; dispid 1610678273;
    procedure _SetNodeData_(const NodeData: WideString); dispid 1610678274;
    procedure _MoveChild_(const Node: IDispatch; Order: WordBool); dispid 1610678275;
  end;

// *********************************************************************//
// The Class CoTDConnection provides a Create and CreateRemote method to          
// create instances of the default interface ITDConnection3 exposed by              
// the CoClass TDConnection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTDConnection = class
    class function Create: ITDConnection3;
    class function CreateRemote(const MachineName: string): ITDConnection3;
  end;

// *********************************************************************//
// The Class CoFileData provides a Create and CreateRemote method to          
// create instances of the default interface IFileData exposed by              
// the CoClass FileData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFileData = class
    class function Create: IFileData;
    class function CreateRemote(const MachineName: string): IFileData;
  end;

// *********************************************************************//
// The Class CoExtendedStorage provides a Create and CreateRemote method to          
// create instances of the default interface IExtendedStorage exposed by              
// the CoClass ExtendedStorage. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExtendedStorage = class
    class function Create: IExtendedStorage;
    class function CreateRemote(const MachineName: string): IExtendedStorage;
  end;

// *********************************************************************//
// The Class CoProjectRepository provides a Create and CreateRemote method to          
// create instances of the default interface IExtendedStorage exposed by              
// the CoClass ProjectRepository. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoProjectRepository = class
    class function Create: IExtendedStorage;
    class function CreateRemote(const MachineName: string): IExtendedStorage;
  end;

// *********************************************************************//
// The Class CoExtendedStorageProxy provides a Create and CreateRemote method to          
// create instances of the default interface IExtendedStorage exposed by              
// the CoClass ExtendedStorageProxy. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExtendedStorageProxy = class
    class function Create: IExtendedStorage;
    class function CreateRemote(const MachineName: string): IExtendedStorage;
  end;

// *********************************************************************//
// The Class CoTestFactory provides a Create and CreateRemote method to          
// create instances of the default interface ITestFactory exposed by              
// the CoClass TestFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTestFactory = class
    class function Create: ITestFactory;
    class function CreateRemote(const MachineName: string): ITestFactory;
  end;

// *********************************************************************//
// The Class CoBugFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBugFactory exposed by              
// the CoClass BugFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBugFactory = class
    class function Create: IBugFactory;
    class function CreateRemote(const MachineName: string): IBugFactory;
  end;

// *********************************************************************//
// The Class CoCoverageFactory provides a Create and CreateRemote method to          
// create instances of the default interface ICoverageFactory exposed by              
// the CoClass CoverageFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCoverageFactory = class
    class function Create: ICoverageFactory;
    class function CreateRemote(const MachineName: string): ICoverageFactory;
  end;

// *********************************************************************//
// The Class CoReqCoverageFactory provides a Create and CreateRemote method to          
// create instances of the default interface IReqCoverageFactory exposed by              
// the CoClass ReqCoverageFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReqCoverageFactory = class
    class function Create: IReqCoverageFactory;
    class function CreateRemote(const MachineName: string): IReqCoverageFactory;
  end;

// *********************************************************************//
// The Class CoCoverageEntity provides a Create and CreateRemote method to          
// create instances of the default interface ICoverageEntity exposed by              
// the CoClass CoverageEntity. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCoverageEntity = class
    class function Create: ICoverageEntity;
    class function CreateRemote(const MachineName: string): ICoverageEntity;
  end;

// *********************************************************************//
// The Class CoTestSetFactory provides a Create and CreateRemote method to          
// create instances of the default interface ITestSetFactory exposed by              
// the CoClass TestSetFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTestSetFactory = class
    class function Create: ITestSetFactory;
    class function CreateRemote(const MachineName: string): ITestSetFactory;
  end;

// *********************************************************************//
// The Class CoHostFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass HostFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHostFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoSubjectNode provides a Create and CreateRemote method to          
// create instances of the default interface ISubjectNode exposed by              
// the CoClass SubjectNode. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSubjectNode = class
    class function Create: ISubjectNode;
    class function CreateRemote(const MachineName: string): ISubjectNode;
  end;

// *********************************************************************//
// The Class CoSysTreeNode provides a Create and CreateRemote method to          
// create instances of the default interface ISysTreeNode exposed by              
// the CoClass SysTreeNode. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSysTreeNode = class
    class function Create: ISysTreeNode;
    class function CreateRemote(const MachineName: string): ISysTreeNode;
  end;

// *********************************************************************//
// The Class CoTreeManager provides a Create and CreateRemote method to          
// create instances of the default interface ITreeManager exposed by              
// the CoClass TreeManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTreeManager = class
    class function Create: ITreeManager;
    class function CreateRemote(const MachineName: string): ITreeManager;
  end;

// *********************************************************************//
// The Class CoVCS provides a Create and CreateRemote method to          
// create instances of the default interface IVCS exposed by              
// the CoClass VCS. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoVCS = class
    class function Create: IVCS;
    class function CreateRemote(const MachineName: string): IVCS;
  end;

// *********************************************************************//
// The Class CoAttachmentVcs provides a Create and CreateRemote method to          
// create instances of the default interface IAttachmentVcs exposed by              
// the CoClass AttachmentVcs. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAttachmentVcs = class
    class function Create: IAttachmentVcs;
    class function CreateRemote(const MachineName: string): IAttachmentVcs;
  end;

// *********************************************************************//
// The Class CoList provides a Create and CreateRemote method to          
// create instances of the default interface IList exposed by              
// the CoClass List. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoList = class
    class function Create: IList;
    class function CreateRemote(const MachineName: string): IList;
  end;

// *********************************************************************//
// The Class CoFactoryList provides a Create and CreateRemote method to          
// create instances of the default interface IFactoryList exposed by              
// the CoClass FactoryList. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFactoryList = class
    class function Create: IFactoryList;
    class function CreateRemote(const MachineName: string): IFactoryList;
  end;

// *********************************************************************//
// The Class CoHierarchySupportList provides a Create and CreateRemote method to          
// create instances of the default interface IHierarchySupportList exposed by              
// the CoClass HierarchySupportList. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHierarchySupportList = class
    class function Create: IHierarchySupportList;
    class function CreateRemote(const MachineName: string): IHierarchySupportList;
  end;

// *********************************************************************//
// The Class CoFieldProperty provides a Create and CreateRemote method to          
// create instances of the default interface IFieldProperty3 exposed by              
// the CoClass FieldProperty. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFieldProperty = class
    class function Create: IFieldProperty3;
    class function CreateRemote(const MachineName: string): IFieldProperty3;
  end;

// *********************************************************************//
// The Class CoTDField provides a Create and CreateRemote method to          
// create instances of the default interface ITDField exposed by              
// the CoClass TDField. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTDField = class
    class function Create: ITDField;
    class function CreateRemote(const MachineName: string): ITDField;
  end;

// *********************************************************************//
// The Class CoTest provides a Create and CreateRemote method to          
// create instances of the default interface ITest exposed by              
// the CoClass Test. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTest = class
    class function Create: ITest;
    class function CreateRemote(const MachineName: string): ITest;
  end;

// *********************************************************************//
// The Class CoDesignStepFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass DesignStepFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDesignStepFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoDesignStep provides a Create and CreateRemote method to          
// create instances of the default interface IDesignStep exposed by              
// the CoClass DesignStep. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDesignStep = class
    class function Create: IDesignStep;
    class function CreateRemote(const MachineName: string): IDesignStep;
  end;

// *********************************************************************//
// The Class CoBug provides a Create and CreateRemote method to          
// create instances of the default interface IBug exposed by              
// the CoClass Bug. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBug = class
    class function Create: IBug;
    class function CreateRemote(const MachineName: string): IBug;
  end;

// *********************************************************************//
// The Class CoTestSet provides a Create and CreateRemote method to          
// create instances of the default interface ITestSet exposed by              
// the CoClass TestSet. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTestSet = class
    class function Create: ITestSet;
    class function CreateRemote(const MachineName: string): ITestSet;
  end;

// *********************************************************************//
// The Class CoRunFactory provides a Create and CreateRemote method to          
// create instances of the default interface IRunFactory exposed by              
// the CoClass RunFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRunFactory = class
    class function Create: IRunFactory;
    class function CreateRemote(const MachineName: string): IRunFactory;
  end;

// *********************************************************************//
// The Class CoRun provides a Create and CreateRemote method to          
// create instances of the default interface IRun2 exposed by              
// the CoClass Run. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRun = class
    class function Create: IRun2;
    class function CreateRemote(const MachineName: string): IRun2;
  end;

// *********************************************************************//
// The Class CoStepFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass StepFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStepFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoBPStepFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass BPStepFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBPStepFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoStep provides a Create and CreateRemote method to          
// create instances of the default interface IStep2 exposed by              
// the CoClass Step. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStep = class
    class function Create: IStep2;
    class function CreateRemote(const MachineName: string): IStep2;
  end;

// *********************************************************************//
// The Class CoHostGroupFactory provides a Create and CreateRemote method to          
// create instances of the default interface IHostGroupFactory exposed by              
// the CoClass HostGroupFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHostGroupFactory = class
    class function Create: IHostGroupFactory;
    class function CreateRemote(const MachineName: string): IHostGroupFactory;
  end;

// *********************************************************************//
// The Class CoHostGroup provides a Create and CreateRemote method to          
// create instances of the default interface IHostGroup exposed by              
// the CoClass HostGroup. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHostGroup = class
    class function Create: IHostGroup;
    class function CreateRemote(const MachineName: string): IHostGroup;
  end;

// *********************************************************************//
// The Class CoHost provides a Create and CreateRemote method to          
// create instances of the default interface IHost exposed by              
// the CoClass Host. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHost = class
    class function Create: IHost;
    class function CreateRemote(const MachineName: string): IHost;
  end;

// *********************************************************************//
// The Class CoTSTestFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass TSTestFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTSTestFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoTSTest provides a Create and CreateRemote method to          
// create instances of the default interface ITSTest2 exposed by              
// the CoClass TSTest. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTSTest = class
    class function Create: ITSTest2;
    class function CreateRemote(const MachineName: string): ITSTest2;
  end;

// *********************************************************************//
// The Class CoConditionFactory provides a Create and CreateRemote method to          
// create instances of the default interface IConditionFactory exposed by              
// the CoClass ConditionFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoConditionFactory = class
    class function Create: IConditionFactory;
    class function CreateRemote(const MachineName: string): IConditionFactory;
  end;

// *********************************************************************//
// The Class CoCondition provides a Create and CreateRemote method to          
// create instances of the default interface ICondition exposed by              
// the CoClass Condition. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCondition = class
    class function Create: ICondition;
    class function CreateRemote(const MachineName: string): ICondition;
  end;

// *********************************************************************//
// The Class CoCommand provides a Create and CreateRemote method to          
// create instances of the default interface ICommand2 exposed by              
// the CoClass Command. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCommand = class
    class function Create: ICommand2;
    class function CreateRemote(const MachineName: string): ICommand2;
  end;

// *********************************************************************//
// The Class CoRecordset provides a Create and CreateRemote method to          
// create instances of the default interface IRecordset exposed by              
// the CoClass Recordset. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRecordset = class
    class function Create: IRecordset;
    class function CreateRemote(const MachineName: string): IRecordset;
  end;

// *********************************************************************//
// The Class CoTDFilter provides a Create and CreateRemote method to          
// create instances of the default interface ITDFilter2 exposed by              
// the CoClass TDFilter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTDFilter = class
    class function Create: ITDFilter2;
    class function CreateRemote(const MachineName: string): ITDFilter2;
  end;

// *********************************************************************//
// The Class CoHierarchyFilter provides a Create and CreateRemote method to          
// create instances of the default interface IHierarchyFilter exposed by              
// the CoClass HierarchyFilter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHierarchyFilter = class
    class function Create: IHierarchyFilter;
    class function CreateRemote(const MachineName: string): IHierarchyFilter;
  end;

// *********************************************************************//
// The Class CoHistory provides a Create and CreateRemote method to          
// create instances of the default interface IHistory exposed by              
// the CoClass History. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHistory = class
    class function Create: IHistory;
    class function CreateRemote(const MachineName: string): IHistory;
  end;

// *********************************************************************//
// The Class CoHistoryRecord provides a Create and CreateRemote method to          
// create instances of the default interface IHistoryRecord2 exposed by              
// the CoClass HistoryRecord. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHistoryRecord = class
    class function Create: IHistoryRecord2;
    class function CreateRemote(const MachineName: string): IHistoryRecord2;
  end;

// *********************************************************************//
// The Class CoAttachmentFactory provides a Create and CreateRemote method to          
// create instances of the default interface IAttachmentFactory exposed by              
// the CoClass AttachmentFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAttachmentFactory = class
    class function Create: IAttachmentFactory;
    class function CreateRemote(const MachineName: string): IAttachmentFactory;
  end;

// *********************************************************************//
// The Class CoAttachment provides a Create and CreateRemote method to          
// create instances of the default interface IAttachment exposed by              
// the CoClass Attachment. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAttachment = class
    class function Create: IAttachment;
    class function CreateRemote(const MachineName: string): IAttachment;
  end;

// *********************************************************************//
// The Class CoLink provides a Create and CreateRemote method to          
// create instances of the default interface ILink exposed by              
// the CoClass Link. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLink = class
    class function Create: ILink;
    class function CreateRemote(const MachineName: string): ILink;
  end;

// *********************************************************************//
// The Class CoLinkFactory provides a Create and CreateRemote method to          
// create instances of the default interface ILinkFactory exposed by              
// the CoClass LinkFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLinkFactory = class
    class function Create: ILinkFactory;
    class function CreateRemote(const MachineName: string): ILinkFactory;
  end;

// *********************************************************************//
// The Class CoReqTraceFactory provides a Create and CreateRemote method to          
// create instances of the default interface IReqTraceFactory exposed by              
// the CoClass ReqTraceFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReqTraceFactory = class
    class function Create: IReqTraceFactory;
    class function CreateRemote(const MachineName: string): IReqTraceFactory;
  end;

// *********************************************************************//
// The Class CoTrace provides a Create and CreateRemote method to          
// create instances of the default interface ITrace exposed by              
// the CoClass Trace. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTrace = class
    class function Create: ITrace;
    class function CreateRemote(const MachineName: string): ITrace;
  end;

// *********************************************************************//
// The Class CoReq provides a Create and CreateRemote method to          
// create instances of the default interface IReq2 exposed by              
// the CoClass Req. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReq = class
    class function Create: IReq2;
    class function CreateRemote(const MachineName: string): IReq2;
  end;

// *********************************************************************//
// The Class CoReqFactory provides a Create and CreateRemote method to          
// create instances of the default interface IReqFactory3 exposed by              
// the CoClass ReqFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReqFactory = class
    class function Create: IReqFactory3;
    class function CreateRemote(const MachineName: string): IReqFactory3;
  end;

// *********************************************************************//
// The Class CoActionPermission provides a Create and CreateRemote method to          
// create instances of the default interface IActionPermission exposed by              
// the CoClass ActionPermission. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoActionPermission = class
    class function Create: IActionPermission;
    class function CreateRemote(const MachineName: string): IActionPermission;
  end;

// *********************************************************************//
// The Class CoGraphDefinition provides a Create and CreateRemote method to          
// create instances of the default interface IGraphDefinition exposed by              
// the CoClass GraphDefinition. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGraphDefinition = class
    class function Create: IGraphDefinition;
    class function CreateRemote(const MachineName: string): IGraphDefinition;
  end;

// *********************************************************************//
// The Class CoGraphBuilder provides a Create and CreateRemote method to          
// create instances of the default interface IGraphBuilder exposed by              
// the CoClass GraphBuilder. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGraphBuilder = class
    class function Create: IGraphBuilder;
    class function CreateRemote(const MachineName: string): IGraphBuilder;
  end;

// *********************************************************************//
// The Class CoGraph provides a Create and CreateRemote method to          
// create instances of the default interface IGraph exposed by              
// the CoClass Graph. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGraph = class
    class function Create: IGraph;
    class function CreateRemote(const MachineName: string): IGraph;
  end;

// *********************************************************************//
// The Class CoSearchOptions provides a Create and CreateRemote method to          
// create instances of the default interface ISearchOptions exposed by              
// the CoClass SearchOptions. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSearchOptions = class
    class function Create: ISearchOptions;
    class function CreateRemote(const MachineName: string): ISearchOptions;
  end;

// *********************************************************************//
// The Class CoTestExecStatus provides a Create and CreateRemote method to          
// create instances of the default interface ITestExecStatus exposed by              
// the CoClass TestExecStatus. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTestExecStatus = class
    class function Create: ITestExecStatus;
    class function CreateRemote(const MachineName: string): ITestExecStatus;
  end;

// *********************************************************************//
// The Class CoExecutionStatus provides a Create and CreateRemote method to          
// create instances of the default interface IExecutionStatus exposed by              
// the CoClass ExecutionStatus. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExecutionStatus = class
    class function Create: IExecutionStatus;
    class function CreateRemote(const MachineName: string): IExecutionStatus;
  end;

// *********************************************************************//
// The Class CoTSScheduler provides a Create and CreateRemote method to          
// create instances of the default interface ITSScheduler exposed by              
// the CoClass TSScheduler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTSScheduler = class
    class function Create: ITSScheduler;
    class function CreateRemote(const MachineName: string): ITSScheduler;
  end;

// *********************************************************************//
// The Class CoDBManager provides a Create and CreateRemote method to          
// create instances of the default interface IDBManager exposed by              
// the CoClass DBManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDBManager = class
    class function Create: IDBManager;
    class function CreateRemote(const MachineName: string): IDBManager;
  end;

// *********************************************************************//
// The Class CoCustomization provides a Create and CreateRemote method to          
// create instances of the default interface ICustomization3 exposed by              
// the CoClass Customization. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomization = class
    class function Create: ICustomization3;
    class function CreateRemote(const MachineName: string): ICustomization3;
  end;

// *********************************************************************//
// The Class CoCustomizationField provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationField2 exposed by              
// the CoClass CustomizationField. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationField = class
    class function Create: ICustomizationField2;
    class function CreateRemote(const MachineName: string): ICustomizationField2;
  end;

// *********************************************************************//
// The Class CoCustomizationFields provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationFields exposed by              
// the CoClass CustomizationFields. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationFields = class
    class function Create: ICustomizationFields;
    class function CreateRemote(const MachineName: string): ICustomizationFields;
  end;

// *********************************************************************//
// The Class CoCustomizationLists provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationLists exposed by              
// the CoClass CustomizationLists. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationLists = class
    class function Create: ICustomizationLists;
    class function CreateRemote(const MachineName: string): ICustomizationLists;
  end;

// *********************************************************************//
// The Class CoCustomizationList provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationList exposed by              
// the CoClass CustomizationList. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationList = class
    class function Create: ICustomizationList;
    class function CreateRemote(const MachineName: string): ICustomizationList;
  end;

// *********************************************************************//
// The Class CoCustomizationListNode provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationListNode exposed by              
// the CoClass CustomizationListNode. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationListNode = class
    class function Create: ICustomizationListNode;
    class function CreateRemote(const MachineName: string): ICustomizationListNode;
  end;

// *********************************************************************//
// The Class CoCustomizationTypedField provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationTypedField exposed by              
// the CoClass CustomizationTypedField. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationTypedField = class
    class function Create: ICustomizationTypedField;
    class function CreateRemote(const MachineName: string): ICustomizationTypedField;
  end;

// *********************************************************************//
// The Class CoCustomizationTypes provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationTypes exposed by              
// the CoClass CustomizationTypes. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationTypes = class
    class function Create: ICustomizationTypes;
    class function CreateRemote(const MachineName: string): ICustomizationTypes;
  end;

// *********************************************************************//
// The Class CoTableProperties provides a Create and CreateRemote method to          
// create instances of the default interface ITableProperties exposed by              
// the CoClass TableProperties. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTableProperties = class
    class function Create: ITableProperties;
    class function CreateRemote(const MachineName: string): ITableProperties;
  end;

// *********************************************************************//
// The Class CoCustomizationReqType provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationReqType exposed by              
// the CoClass CustomizationReqType. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationReqType = class
    class function Create: ICustomizationReqType;
    class function CreateRemote(const MachineName: string): ICustomizationReqType;
  end;

// *********************************************************************//
// The Class CoCustomizationRBT provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationRBT exposed by              
// the CoClass CustomizationRBT. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationRBT = class
    class function Create: ICustomizationRBT;
    class function CreateRemote(const MachineName: string): ICustomizationRBT;
  end;

// *********************************************************************//
// The Class CoCustomizationRBTQuestion provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationRBTQuestion exposed by              
// the CoClass CustomizationRBTQuestion. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationRBTQuestion = class
    class function Create: ICustomizationRBTQuestion;
    class function CreateRemote(const MachineName: string): ICustomizationRBTQuestion;
  end;

// *********************************************************************//
// The Class CoCustomizationRBTAnswer provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationRBTAnswer exposed by              
// the CoClass CustomizationRBTAnswer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationRBTAnswer = class
    class function Create: ICustomizationRBTAnswer;
    class function CreateRemote(const MachineName: string): ICustomizationRBTAnswer;
  end;

// *********************************************************************//
// The Class CoSettings provides a Create and CreateRemote method to          
// create instances of the default interface ISettings2 exposed by              
// the CoClass Settings. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSettings = class
    class function Create: ISettings2;
    class function CreateRemote(const MachineName: string): ISettings2;
  end;

// *********************************************************************//
// The Class CoTDMailConditions provides a Create and CreateRemote method to          
// create instances of the default interface ITDMailConditions exposed by              
// the CoClass TDMailConditions. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTDMailConditions = class
    class function Create: ITDMailConditions;
    class function CreateRemote(const MachineName: string): ITDMailConditions;
  end;

// *********************************************************************//
// The Class CoCustomizationPermissions provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationPermissions exposed by              
// the CoClass CustomizationPermissions. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationPermissions = class
    class function Create: ICustomizationPermissions;
    class function CreateRemote(const MachineName: string): ICustomizationPermissions;
  end;

// *********************************************************************//
// The Class CoCustomizationUsersGroups provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationUsersGroups2 exposed by              
// the CoClass CustomizationUsersGroups. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationUsersGroups = class
    class function Create: ICustomizationUsersGroups2;
    class function CreateRemote(const MachineName: string): ICustomizationUsersGroups2;
  end;

// *********************************************************************//
// The Class CoCustomizationUsersGroup provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationUsersGroup exposed by              
// the CoClass CustomizationUsersGroup. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationUsersGroup = class
    class function Create: ICustomizationUsersGroup;
    class function CreateRemote(const MachineName: string): ICustomizationUsersGroup;
  end;

// *********************************************************************//
// The Class CoCustomizationUser provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationUser exposed by              
// the CoClass CustomizationUser. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationUser = class
    class function Create: ICustomizationUser;
    class function CreateRemote(const MachineName: string): ICustomizationUser;
  end;

// *********************************************************************//
// The Class CoCustomizationUsers provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationUsers3 exposed by              
// the CoClass CustomizationUsers. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationUsers = class
    class function Create: ICustomizationUsers3;
    class function CreateRemote(const MachineName: string): ICustomizationUsers3;
  end;

// *********************************************************************//
// The Class CoCustomizationActions provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationActions exposed by              
// the CoClass CustomizationActions. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationActions = class
    class function Create: ICustomizationActions;
    class function CreateRemote(const MachineName: string): ICustomizationActions;
  end;

// *********************************************************************//
// The Class CoCustomizationAction provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationAction exposed by              
// the CoClass CustomizationAction. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationAction = class
    class function Create: ICustomizationAction;
    class function CreateRemote(const MachineName: string): ICustomizationAction;
  end;

// *********************************************************************//
// The Class CoCustomizationModules provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationModules3 exposed by              
// the CoClass CustomizationModules. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationModules = class
    class function Create: ICustomizationModules3;
    class function CreateRemote(const MachineName: string): ICustomizationModules3;
  end;

// *********************************************************************//
// The Class CoTDChat provides a Create and CreateRemote method to          
// create instances of the default interface ITDChat exposed by              
// the CoClass TDChat. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTDChat = class
    class function Create: ITDChat;
    class function CreateRemote(const MachineName: string): ITDChat;
  end;

// *********************************************************************//
// The Class CoCustomizationTransitionRule provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationTransitionRule exposed by              
// the CoClass CustomizationTransitionRule. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationTransitionRule = class
    class function Create: ICustomizationTransitionRule;
    class function CreateRemote(const MachineName: string): ICustomizationTransitionRule;
  end;

// *********************************************************************//
// The Class CoCustomizationTransitionRules provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationTransitionRules exposed by              
// the CoClass CustomizationTransitionRules. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationTransitionRules = class
    class function Create: ICustomizationTransitionRules;
    class function CreateRemote(const MachineName: string): ICustomizationTransitionRules;
  end;

// *********************************************************************//
// The Class CoTDErrorInfo provides a Create and CreateRemote method to          
// create instances of the default interface ITDErrorInfo exposed by              
// the CoClass TDErrorInfo. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTDErrorInfo = class
    class function Create: ITDErrorInfo;
    class function CreateRemote(const MachineName: string): ITDErrorInfo;
  end;

// *********************************************************************//
// The Class CoChangeEntryFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass ChangeEntryFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoChangeEntryFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoChangeEntry provides a Create and CreateRemote method to          
// create instances of the default interface IChangeEntry exposed by              
// the CoClass ChangeEntry. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoChangeEntry = class
    class function Create: IChangeEntry;
    class function CreateRemote(const MachineName: string): IChangeEntry;
  end;

// *********************************************************************//
// The Class CoChangeFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass ChangeFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoChangeFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoChange provides a Create and CreateRemote method to          
// create instances of the default interface IChange exposed by              
// the CoClass Change. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoChange = class
    class function Create: IChange;
    class function CreateRemote(const MachineName: string): IChange;
  end;

// *********************************************************************//
// The Class CoComFrec provides a Create and CreateRemote method to          
// create instances of the default interface IComFrec exposed by              
// the CoClass ComFrec. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoComFrec = class
    class function Create: IComFrec;
    class function CreateRemote(const MachineName: string): IComFrec;
  end;

// *********************************************************************//
// The Class CoExecEventNotifyByMailSettings provides a Create and CreateRemote method to          
// create instances of the default interface IExecEventNotifyByMailSettings exposed by              
// the CoClass ExecEventNotifyByMailSettings. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExecEventNotifyByMailSettings = class
    class function Create: IExecEventNotifyByMailSettings;
    class function CreateRemote(const MachineName: string): IExecEventNotifyByMailSettings;
  end;

// *********************************************************************//
// The Class CoProjectProperties provides a Create and CreateRemote method to          
// create instances of the default interface IProjectProperties exposed by              
// the CoClass ProjectProperties. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoProjectProperties = class
    class function Create: IProjectProperties;
    class function CreateRemote(const MachineName: string): IProjectProperties;
  end;

// *********************************************************************//
// The Class CoStepParams provides a Create and CreateRemote method to          
// create instances of the default interface IStepParams exposed by              
// the CoClass StepParams. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStepParams = class
    class function Create: IStepParams;
    class function CreateRemote(const MachineName: string): IStepParams;
  end;

// *********************************************************************//
// The Class CoTextParser provides a Create and CreateRemote method to          
// create instances of the default interface ITextParser exposed by              
// the CoClass TextParser. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTextParser = class
    class function Create: ITextParser;
    class function CreateRemote(const MachineName: string): ITextParser;
  end;

// *********************************************************************//
// The Class CoExecEventInfo provides a Create and CreateRemote method to          
// create instances of the default interface IExecEventInfo exposed by              
// the CoClass ExecEventInfo. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExecEventInfo = class
    class function Create: IExecEventInfo;
    class function CreateRemote(const MachineName: string): IExecEventInfo;
  end;

// *********************************************************************//
// The Class CoAmarillusHash provides a Create and CreateRemote method to          
// create instances of the default interface IAmarillusHash exposed by              
// the CoClass AmarillusHash. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAmarillusHash = class
    class function Create: IAmarillusHash;
    class function CreateRemote(const MachineName: string): IAmarillusHash;
  end;

// *********************************************************************//
// The Class CoVersionItem provides a Create and CreateRemote method to          
// create instances of the default interface IVersionItem exposed by              
// the CoClass VersionItem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoVersionItem = class
    class function Create: IVersionItem;
    class function CreateRemote(const MachineName: string): IVersionItem;
  end;

// *********************************************************************//
// The Class CoVcsAdmin provides a Create and CreateRemote method to          
// create instances of the default interface IVcsAdmin exposed by              
// the CoClass VcsAdmin. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoVcsAdmin = class
    class function Create: IVcsAdmin;
    class function CreateRemote(const MachineName: string): IVcsAdmin;
  end;

// *********************************************************************//
// The Class CoExecSettings provides a Create and CreateRemote method to          
// create instances of the default interface IExecutionSettings exposed by              
// the CoClass ExecSettings. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExecSettings = class
    class function Create: IExecutionSettings;
    class function CreateRemote(const MachineName: string): IExecutionSettings;
  end;

// *********************************************************************//
// The Class CoExecEventActionParams provides a Create and CreateRemote method to          
// create instances of the default interface IOnExecEventSchedulerActionParams exposed by              
// the CoClass ExecEventActionParams. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExecEventActionParams = class
    class function Create: IOnExecEventSchedulerActionParams;
    class function CreateRemote(const MachineName: string): IOnExecEventSchedulerActionParams;
  end;

// *********************************************************************//
// The Class CoExecEventRestartActionParams provides a Create and CreateRemote method to          
// create instances of the default interface IOnExecEventSchedulerRestartParams exposed by              
// the CoClass ExecEventRestartActionParams. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExecEventRestartActionParams = class
    class function Create: IOnExecEventSchedulerRestartParams;
    class function CreateRemote(const MachineName: string): IOnExecEventSchedulerRestartParams;
  end;

// *********************************************************************//
// The Class CoTestSetTreeManager provides a Create and CreateRemote method to          
// create instances of the default interface ITestSetTreeManager exposed by              
// the CoClass TestSetTreeManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTestSetTreeManager = class
    class function Create: ITestSetTreeManager;
    class function CreateRemote(const MachineName: string): ITestSetTreeManager;
  end;

// *********************************************************************//
// The Class CoTestSetFolder provides a Create and CreateRemote method to          
// create instances of the default interface ITestSetFolder3 exposed by              
// the CoClass TestSetFolder. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTestSetFolder = class
    class function Create: ITestSetFolder3;
    class function CreateRemote(const MachineName: string): ITestSetFolder3;
  end;

// *********************************************************************//
// The Class CoCustomizationMailConditions provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationMailConditions exposed by              
// the CoClass CustomizationMailConditions. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationMailConditions = class
    class function Create: ICustomizationMailConditions;
    class function CreateRemote(const MachineName: string): ICustomizationMailConditions;
  end;

// *********************************************************************//
// The Class CoCustomizationMailCondition provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationMailCondition exposed by              
// the CoClass CustomizationMailCondition. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationMailCondition = class
    class function Create: ICustomizationMailCondition;
    class function CreateRemote(const MachineName: string): ICustomizationMailCondition;
  end;

// *********************************************************************//
// The Class CoAnalysis provides a Create and CreateRemote method to          
// create instances of the default interface IAnalysis exposed by              
// the CoClass Analysis. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnalysis = class
    class function Create: IAnalysis;
    class function CreateRemote(const MachineName: string): IAnalysis;
  end;

// *********************************************************************//
// The Class CoAlert provides a Create and CreateRemote method to          
// create instances of the default interface IAlert exposed by              
// the CoClass Alert. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAlert = class
    class function Create: IAlert;
    class function CreateRemote(const MachineName: string): IAlert;
  end;

// *********************************************************************//
// The Class CoAlertManager provides a Create and CreateRemote method to          
// create instances of the default interface IAlertManager2 exposed by              
// the CoClass AlertManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAlertManager = class
    class function Create: IAlertManager2;
    class function CreateRemote(const MachineName: string): IAlertManager2;
  end;

// *********************************************************************//
// The Class CoRuleManager provides a Create and CreateRemote method to          
// create instances of the default interface IRuleManager exposed by              
// the CoClass RuleManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRuleManager = class
    class function Create: IRuleManager;
    class function CreateRemote(const MachineName: string): IRuleManager;
  end;

// *********************************************************************//
// The Class CoRule provides a Create and CreateRemote method to          
// create instances of the default interface IRule2 exposed by              
// the CoClass Rule. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRule = class
    class function Create: IRule2;
    class function CreateRemote(const MachineName: string): IRule2;
  end;

// *********************************************************************//
// The Class CoReqSummaryStatus provides a Create and CreateRemote method to          
// create instances of the default interface IReqSummaryStatus exposed by              
// the CoClass ReqSummaryStatus. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReqSummaryStatus = class
    class function Create: IReqSummaryStatus;
    class function CreateRemote(const MachineName: string): IReqSummaryStatus;
  end;

// *********************************************************************//
// The Class CoReqCoverageStatus provides a Create and CreateRemote method to          
// create instances of the default interface IReqCoverageStatus exposed by              
// the CoClass ReqCoverageStatus. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReqCoverageStatus = class
    class function Create: IReqCoverageStatus;
    class function CreateRemote(const MachineName: string): IReqCoverageStatus;
  end;

// *********************************************************************//
// The Class CoCacheMgr provides a Create and CreateRemote method to          
// create instances of the default interface ICacheMgr exposed by              
// the CoClass CacheMgr. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCacheMgr = class
    class function Create: ICacheMgr;
    class function CreateRemote(const MachineName: string): ICacheMgr;
  end;

// *********************************************************************//
// The Class CoComponentFactory provides a Create and CreateRemote method to          
// create instances of the default interface IComponentFactory exposed by              
// the CoClass ComponentFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoComponentFactory = class
    class function Create: IComponentFactory;
    class function CreateRemote(const MachineName: string): IComponentFactory;
  end;

// *********************************************************************//
// The Class CoComponentFolderFactory provides a Create and CreateRemote method to          
// create instances of the default interface IComponentFolderFactory exposed by              
// the CoClass ComponentFolderFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoComponentFolderFactory = class
    class function Create: IComponentFolderFactory;
    class function CreateRemote(const MachineName: string): IComponentFolderFactory;
  end;

// *********************************************************************//
// The Class CoComponent provides a Create and CreateRemote method to          
// create instances of the default interface IComponent exposed by              
// the CoClass Component. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoComponent = class
    class function Create: IComponent;
    class function CreateRemote(const MachineName: string): IComponent;
  end;

// *********************************************************************//
// The Class CoComponentFolder provides a Create and CreateRemote method to          
// create instances of the default interface IComponentFolder exposed by              
// the CoClass ComponentFolder. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoComponentFolder = class
    class function Create: IComponentFolder;
    class function CreateRemote(const MachineName: string): IComponentFolder;
  end;

// *********************************************************************//
// The Class CoBusinessProcess provides a Create and CreateRemote method to          
// create instances of the default interface IBusinessProcess exposed by              
// the CoClass BusinessProcess. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBusinessProcess = class
    class function Create: IBusinessProcess;
    class function CreateRemote(const MachineName: string): IBusinessProcess;
  end;

// *********************************************************************//
// The Class CoComponentParamFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass ComponentParamFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoComponentParamFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoComponentParam provides a Create and CreateRemote method to          
// create instances of the default interface IComponentParam exposed by              
// the CoClass ComponentParam. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoComponentParam = class
    class function Create: IComponentParam;
    class function CreateRemote(const MachineName: string): IComponentParam;
  end;

// *********************************************************************//
// The Class CoBPComponent provides a Create and CreateRemote method to          
// create instances of the default interface IBPComponent exposed by              
// the CoClass BPComponent. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBPComponent = class
    class function Create: IBPComponent;
    class function CreateRemote(const MachineName: string): IBPComponent;
  end;

// *********************************************************************//
// The Class CoRTParam provides a Create and CreateRemote method to          
// create instances of the default interface IRTParam exposed by              
// the CoClass RTParam. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRTParam = class
    class function Create: IRTParam;
    class function CreateRemote(const MachineName: string): IRTParam;
  end;

// *********************************************************************//
// The Class CoBPIteration provides a Create and CreateRemote method to          
// create instances of the default interface IBPIteration exposed by              
// the CoClass BPIteration. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBPIteration = class
    class function Create: IBPIteration;
    class function CreateRemote(const MachineName: string): IBPIteration;
  end;

// *********************************************************************//
// The Class CoBPIterationParam provides a Create and CreateRemote method to          
// create instances of the default interface IBPIterationParam exposed by              
// the CoClass BPIterationParam. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBPIterationParam = class
    class function Create: IBPIterationParam;
    class function CreateRemote(const MachineName: string): IBPIterationParam;
  end;

// *********************************************************************//
// The Class CoBPParameter provides a Create and CreateRemote method to          
// create instances of the default interface IBPParam exposed by              
// the CoClass BPParameter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBPParameter = class
    class function Create: IBPParam;
    class function CreateRemote(const MachineName: string): IBPParam;
  end;

// *********************************************************************//
// The Class CoExport provides a Create and CreateRemote method to          
// create instances of the default interface IExport exposed by              
// the CoClass Export. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExport = class
    class function Create: IExport;
    class function CreateRemote(const MachineName: string): IExport;
  end;

// *********************************************************************//
// The Class CoImport provides a Create and CreateRemote method to          
// create instances of the default interface IImport exposed by              
// the CoClass Import. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoImport = class
    class function Create: IImport;
    class function CreateRemote(const MachineName: string): IImport;
  end;

// *********************************************************************//
// The Class CoTDUtils provides a Create and CreateRemote method to          
// create instances of the default interface ITDUtils exposed by              
// the CoClass TDUtils. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTDUtils = class
    class function Create: ITDUtils;
    class function CreateRemote(const MachineName: string): ITDUtils;
  end;

// *********************************************************************//
// The Class CoBPHistoryRecord provides a Create and CreateRemote method to          
// create instances of the default interface IBPHistoryRecord exposed by              
// the CoClass BPHistoryRecord. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBPHistoryRecord = class
    class function Create: IBPHistoryRecord;
    class function CreateRemote(const MachineName: string): IBPHistoryRecord;
  end;

// *********************************************************************//
// The Class CoBPGroup provides a Create and CreateRemote method to          
// create instances of the default interface IBPGroup exposed by              
// the CoClass BPGroup. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBPGroup = class
    class function Create: IBPGroup;
    class function CreateRemote(const MachineName: string): IBPGroup;
  end;

// *********************************************************************//
// The Class CoComponentStepFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass ComponentStepFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoComponentStepFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoComponentStep provides a Create and CreateRemote method to          
// create instances of the default interface IComponentStep exposed by              
// the CoClass ComponentStep. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoComponentStep = class
    class function Create: IComponentStep;
    class function CreateRemote(const MachineName: string): IComponentStep;
  end;

// *********************************************************************//
// The Class CoBPStepParamFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass BPStepParamFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBPStepParamFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoBPStepParam provides a Create and CreateRemote method to          
// create instances of the default interface IBPStepParam exposed by              
// the CoClass BPStepParam. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBPStepParam = class
    class function Create: IBPStepParam;
    class function CreateRemote(const MachineName: string): IBPStepParam;
  end;

// *********************************************************************//
// The Class CoProductInfo provides a Create and CreateRemote method to          
// create instances of the default interface IProductInfo exposed by              
// the CoClass ProductInfo. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoProductInfo = class
    class function Create: IProductInfo;
    class function CreateRemote(const MachineName: string): IProductInfo;
  end;

// *********************************************************************//
// The Class CoGroupingManager provides a Create and CreateRemote method to          
// create instances of the default interface IGroupingManager exposed by              
// the CoClass GroupingManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGroupingManager = class
    class function Create: IGroupingManager;
    class function CreateRemote(const MachineName: string): IGroupingManager;
  end;

// *********************************************************************//
// The Class CoGroupingItem provides a Create and CreateRemote method to          
// create instances of the default interface IGroupingItem exposed by              
// the CoClass GroupingItem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGroupingItem = class
    class function Create: IGroupingItem;
    class function CreateRemote(const MachineName: string): IGroupingItem;
  end;

// *********************************************************************//
// The Class CoAuditRecordFactory provides a Create and CreateRemote method to          
// create instances of the default interface IAuditRecordFactory exposed by              
// the CoClass AuditRecordFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAuditRecordFactory = class
    class function Create: IAuditRecordFactory;
    class function CreateRemote(const MachineName: string): IAuditRecordFactory;
  end;

// *********************************************************************//
// The Class CoAuditPropertyFactory provides a Create and CreateRemote method to          
// create instances of the default interface IAuditPropertyFactory exposed by              
// the CoClass AuditPropertyFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAuditPropertyFactory = class
    class function Create: IAuditPropertyFactory;
    class function CreateRemote(const MachineName: string): IAuditPropertyFactory;
  end;

// *********************************************************************//
// The Class CoAuditable provides a Create and CreateRemote method to          
// create instances of the default interface IAuditable exposed by              
// the CoClass Auditable. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAuditable = class
    class function Create: IAuditable;
    class function CreateRemote(const MachineName: string): IAuditable;
  end;

// *********************************************************************//
// The Class CoAuditRecord provides a Create and CreateRemote method to          
// create instances of the default interface IAuditRecord exposed by              
// the CoClass AuditRecord. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAuditRecord = class
    class function Create: IAuditRecord;
    class function CreateRemote(const MachineName: string): IAuditRecord;
  end;

// *********************************************************************//
// The Class CoAuditProperty provides a Create and CreateRemote method to          
// create instances of the default interface IAuditProperty exposed by              
// the CoClass AuditProperty. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAuditProperty = class
    class function Create: IAuditProperty;
    class function CreateRemote(const MachineName: string): IAuditProperty;
  end;

// *********************************************************************//
// The Class CoMultiValue provides a Create and CreateRemote method to          
// create instances of the default interface IMultiValue exposed by              
// the CoClass MultiValue. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMultiValue = class
    class function Create: IMultiValue;
    class function CreateRemote(const MachineName: string): IMultiValue;
  end;

// *********************************************************************//
// The Class CoReqType provides a Create and CreateRemote method to          
// create instances of the default interface IReqType exposed by              
// the CoClass ReqType. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReqType = class
    class function Create: IReqType;
    class function CreateRemote(const MachineName: string): IReqType;
  end;

// *********************************************************************//
// The Class CoReleaseFolder provides a Create and CreateRemote method to          
// create instances of the default interface IReleaseFolder exposed by              
// the CoClass ReleaseFolder. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReleaseFolder = class
    class function Create: IReleaseFolder;
    class function CreateRemote(const MachineName: string): IReleaseFolder;
  end;

// *********************************************************************//
// The Class CoRelease provides a Create and CreateRemote method to          
// create instances of the default interface IRelease exposed by              
// the CoClass Release. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRelease = class
    class function Create: IRelease;
    class function CreateRemote(const MachineName: string): IRelease;
  end;

// *********************************************************************//
// The Class CoReleaseFolderFactory provides a Create and CreateRemote method to          
// create instances of the default interface IReleaseFolderFactory exposed by              
// the CoClass ReleaseFolderFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReleaseFolderFactory = class
    class function Create: IReleaseFolderFactory;
    class function CreateRemote(const MachineName: string): IReleaseFolderFactory;
  end;

// *********************************************************************//
// The Class CoReleaseFactory provides a Create and CreateRemote method to          
// create instances of the default interface IReleaseFactory exposed by              
// the CoClass ReleaseFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReleaseFactory = class
    class function Create: IReleaseFactory;
    class function CreateRemote(const MachineName: string): IReleaseFactory;
  end;

// *********************************************************************//
// The Class CoCycleFactory provides a Create and CreateRemote method to          
// create instances of the default interface ICycleFactory exposed by              
// the CoClass CycleFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCycleFactory = class
    class function Create: ICycleFactory;
    class function CreateRemote(const MachineName: string): ICycleFactory;
  end;

// *********************************************************************//
// The Class CoCycle provides a Create and CreateRemote method to          
// create instances of the default interface ICycle exposed by              
// the CoClass Cycle. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCycle = class
    class function Create: ICycle;
    class function CreateRemote(const MachineName: string): ICycle;
  end;

// *********************************************************************//
// The Class CoReleaseManagementInfo provides a Create and CreateRemote method to          
// create instances of the default interface IReleaseManagementInfo exposed by              
// the CoClass ReleaseManagementInfo. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReleaseManagementInfo = class
    class function Create: IReleaseManagementInfo;
    class function CreateRemote(const MachineName: string): IReleaseManagementInfo;
  end;

// *********************************************************************//
// The Class CoWarningInfo provides a Create and CreateRemote method to          
// create instances of the default interface IWarningInfo exposed by              
// the CoClass WarningInfo. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWarningInfo = class
    class function Create: IWarningInfo;
    class function CreateRemote(const MachineName: string): IWarningInfo;
  end;

// *********************************************************************//
// The Class CoExtensionData provides a Create and CreateRemote method to          
// create instances of the default interface IExtensionData exposed by              
// the CoClass ExtensionData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExtensionData = class
    class function Create: IExtensionData;
    class function CreateRemote(const MachineName: string): IExtensionData;
  end;

// *********************************************************************//
// The Class CoExtensionServiceProvider provides a Create and CreateRemote method to          
// create instances of the default interface IExtensionServiceProvider exposed by              
// the CoClass ExtensionServiceProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExtensionServiceProvider = class
    class function Create: IExtensionServiceProvider;
    class function CreateRemote(const MachineName: string): IExtensionServiceProvider;
  end;

// *********************************************************************//
// The Class CoFactoryService provides a Create and CreateRemote method to          
// create instances of the default interface IFactoryService exposed by              
// the CoClass FactoryService. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFactoryService = class
    class function Create: IFactoryService;
    class function CreateRemote(const MachineName: string): IFactoryService;
  end;

// *********************************************************************//
// The Class CoCacheManager provides a Create and CreateRemote method to          
// create instances of the default interface ICacheManager exposed by              
// the CoClass CacheManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCacheManager = class
    class function Create: ICacheManager;
    class function CreateRemote(const MachineName: string): ICacheManager;
  end;

// *********************************************************************//
// The Class CoSystemFieldService provides a Create and CreateRemote method to          
// create instances of the default interface ISystemFieldService exposed by              
// the CoClass SystemFieldService. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSystemFieldService = class
    class function Create: ISystemFieldService;
    class function CreateRemote(const MachineName: string): ISystemFieldService;
  end;

// *********************************************************************//
// The Class CoDataServiceProvider provides a Create and CreateRemote method to          
// create instances of the default interface IDataServiceProvider exposed by              
// the CoClass DataServiceProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDataServiceProvider = class
    class function Create: IDataServiceProvider;
    class function CreateRemote(const MachineName: string): IDataServiceProvider;
  end;

// *********************************************************************//
// The Class CoCustomizationPermissionService provides a Create and CreateRemote method to          
// create instances of the default interface ICustomizationPermissionService exposed by              
// the CoClass CustomizationPermissionService. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomizationPermissionService = class
    class function Create: ICustomizationPermissionService;
    class function CreateRemote(const MachineName: string): ICustomizationPermissionService;
  end;

// *********************************************************************//
// The Class CoExtensionManager provides a Create and CreateRemote method to          
// create instances of the default interface IExtensionManager exposed by              
// the CoClass ExtensionManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExtensionManager = class
    class function Create: IExtensionManager;
    class function CreateRemote(const MachineName: string): IExtensionManager;
  end;

// *********************************************************************//
// The Class CoServiceFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass ServiceFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoServiceFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoServiceFolderFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass ServiceFolderFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoServiceFolderFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoServiceGroupFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass ServiceGroupFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoServiceGroupFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoWsdlOperationFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass WsdlOperationFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWsdlOperationFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoWsdlOperationParamFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass WsdlOperationParamFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWsdlOperationParamFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoServiceChangeFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass ServiceChangeFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoServiceChangeFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoService provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFieldEx exposed by              
// the CoClass Service. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoService = class
    class function Create: IBaseFieldEx;
    class function CreateRemote(const MachineName: string): IBaseFieldEx;
  end;

// *********************************************************************//
// The Class CoServiceFolder provides a Create and CreateRemote method to          
// create instances of the default interface IBaseField exposed by              
// the CoClass ServiceFolder. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoServiceFolder = class
    class function Create: IBaseField;
    class function CreateRemote(const MachineName: string): IBaseField;
  end;

// *********************************************************************//
// The Class CoServiceGroup provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFieldEx exposed by              
// the CoClass ServiceGroup. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoServiceGroup = class
    class function Create: IBaseFieldEx;
    class function CreateRemote(const MachineName: string): IBaseFieldEx;
  end;

// *********************************************************************//
// The Class CoWsdlOperation provides a Create and CreateRemote method to          
// create instances of the default interface IBaseField exposed by              
// the CoClass WsdlOperation. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWsdlOperation = class
    class function Create: IBaseField;
    class function CreateRemote(const MachineName: string): IBaseField;
  end;

// *********************************************************************//
// The Class CoWsdlOperationParam provides a Create and CreateRemote method to          
// create instances of the default interface IBaseField exposed by              
// the CoClass WsdlOperationParam. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWsdlOperationParam = class
    class function Create: IBaseField;
    class function CreateRemote(const MachineName: string): IBaseField;
  end;

// *********************************************************************//
// The Class CoServiceChange provides a Create and CreateRemote method to          
// create instances of the default interface IBaseField exposed by              
// the CoClass ServiceChange. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoServiceChange = class
    class function Create: IBaseField;
    class function CreateRemote(const MachineName: string): IBaseField;
  end;

// *********************************************************************//
// The Class CoApplicationEntity provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFieldEx exposed by              
// the CoClass ApplicationEntity. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoApplicationEntity = class
    class function Create: IBaseFieldEx;
    class function CreateRemote(const MachineName: string): IBaseFieldEx;
  end;

// *********************************************************************//
// The Class CoApplicationEntityFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass ApplicationEntityFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoApplicationEntityFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoBlueprintEntity provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFieldEx exposed by              
// the CoClass BlueprintEntity. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBlueprintEntity = class
    class function Create: IBaseFieldEx;
    class function CreateRemote(const MachineName: string): IBaseFieldEx;
  end;

// *********************************************************************//
// The Class CoBlueprintFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass BlueprintFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBlueprintFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoApplicationEntityTreeManager provides a Create and CreateRemote method to          
// create instances of the default interface IBaseHierarchyTreeManager exposed by              
// the CoClass ApplicationEntityTreeManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoApplicationEntityTreeManager = class
    class function Create: IBaseHierarchyTreeManager;
    class function CreateRemote(const MachineName: string): IBaseHierarchyTreeManager;
  end;

// *********************************************************************//
// The Class CoApplicationEntityFolder provides a Create and CreateRemote method to          
// create instances of the default interface IBaseEntityFolder exposed by              
// the CoClass ApplicationEntityFolder. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoApplicationEntityFolder = class
    class function Create: IBaseEntityFolder;
    class function CreateRemote(const MachineName: string): IBaseEntityFolder;
  end;

// *********************************************************************//
// The Class CoChangeEntity provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFieldEx exposed by              
// the CoClass ChangeEntity. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoChangeEntity = class
    class function Create: IBaseFieldEx;
    class function CreateRemote(const MachineName: string): IBaseFieldEx;
  end;

// *********************************************************************//
// The Class CoChangeEntityFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass ChangeEntityFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoChangeEntityFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoChangeEntityTreeManager provides a Create and CreateRemote method to          
// create instances of the default interface IBaseHierarchyTreeManager exposed by              
// the CoClass ChangeEntityTreeManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoChangeEntityTreeManager = class
    class function Create: IBaseHierarchyTreeManager;
    class function CreateRemote(const MachineName: string): IBaseHierarchyTreeManager;
  end;

// *********************************************************************//
// The Class CoChangeEntityFolder provides a Create and CreateRemote method to          
// create instances of the default interface IBaseEntityFolder exposed by              
// the CoClass ChangeEntityFolder. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoChangeEntityFolder = class
    class function Create: IBaseEntityFolder;
    class function CreateRemote(const MachineName: string): IBaseEntityFolder;
  end;

// *********************************************************************//
// The Class CoApplicationConfiguration provides a Create and CreateRemote method to          
// create instances of the default interface IBaseField exposed by              
// the CoClass ApplicationConfiguration. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoApplicationConfiguration = class
    class function Create: IBaseField;
    class function CreateRemote(const MachineName: string): IBaseField;
  end;

// *********************************************************************//
// The Class CoApplicationConfigurationFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass ApplicationConfigurationFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoApplicationConfigurationFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoApplicationImpact provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFieldEx exposed by              
// the CoClass ApplicationImpact. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoApplicationImpact = class
    class function Create: IBaseFieldEx;
    class function CreateRemote(const MachineName: string): IBaseFieldEx;
  end;

// *********************************************************************//
// The Class CoApplicationImpactFactory provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFactory exposed by              
// the CoClass ApplicationImpactFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoApplicationImpactFactory = class
    class function Create: IBaseFactory;
    class function CreateRemote(const MachineName: string): IBaseFactory;
  end;

// *********************************************************************//
// The Class CoModule provides a Create and CreateRemote method to          
// create instances of the default interface IModule exposed by              
// the CoClass Module. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoModule = class
    class function Create: IModule;
    class function CreateRemote(const MachineName: string): IModule;
  end;

implementation

uses ComObj;

class function CoTDConnection.Create: ITDConnection3;
begin
  Result := CreateComObject(CLASS_TDConnection) as ITDConnection3;
end;

class function CoTDConnection.CreateRemote(const MachineName: string): ITDConnection3;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TDConnection) as ITDConnection3;
end;

class function CoFileData.Create: IFileData;
begin
  Result := CreateComObject(CLASS_FileData) as IFileData;
end;

class function CoFileData.CreateRemote(const MachineName: string): IFileData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FileData) as IFileData;
end;

class function CoExtendedStorage.Create: IExtendedStorage;
begin
  Result := CreateComObject(CLASS_ExtendedStorage) as IExtendedStorage;
end;

class function CoExtendedStorage.CreateRemote(const MachineName: string): IExtendedStorage;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ExtendedStorage) as IExtendedStorage;
end;

class function CoProjectRepository.Create: IExtendedStorage;
begin
  Result := CreateComObject(CLASS_ProjectRepository) as IExtendedStorage;
end;

class function CoProjectRepository.CreateRemote(const MachineName: string): IExtendedStorage;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ProjectRepository) as IExtendedStorage;
end;

class function CoExtendedStorageProxy.Create: IExtendedStorage;
begin
  Result := CreateComObject(CLASS_ExtendedStorageProxy) as IExtendedStorage;
end;

class function CoExtendedStorageProxy.CreateRemote(const MachineName: string): IExtendedStorage;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ExtendedStorageProxy) as IExtendedStorage;
end;

class function CoTestFactory.Create: ITestFactory;
begin
  Result := CreateComObject(CLASS_TestFactory) as ITestFactory;
end;

class function CoTestFactory.CreateRemote(const MachineName: string): ITestFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TestFactory) as ITestFactory;
end;

class function CoBugFactory.Create: IBugFactory;
begin
  Result := CreateComObject(CLASS_BugFactory) as IBugFactory;
end;

class function CoBugFactory.CreateRemote(const MachineName: string): IBugFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BugFactory) as IBugFactory;
end;

class function CoCoverageFactory.Create: ICoverageFactory;
begin
  Result := CreateComObject(CLASS_CoverageFactory) as ICoverageFactory;
end;

class function CoCoverageFactory.CreateRemote(const MachineName: string): ICoverageFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CoverageFactory) as ICoverageFactory;
end;

class function CoReqCoverageFactory.Create: IReqCoverageFactory;
begin
  Result := CreateComObject(CLASS_ReqCoverageFactory) as IReqCoverageFactory;
end;

class function CoReqCoverageFactory.CreateRemote(const MachineName: string): IReqCoverageFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReqCoverageFactory) as IReqCoverageFactory;
end;

class function CoCoverageEntity.Create: ICoverageEntity;
begin
  Result := CreateComObject(CLASS_CoverageEntity) as ICoverageEntity;
end;

class function CoCoverageEntity.CreateRemote(const MachineName: string): ICoverageEntity;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CoverageEntity) as ICoverageEntity;
end;

class function CoTestSetFactory.Create: ITestSetFactory;
begin
  Result := CreateComObject(CLASS_TestSetFactory) as ITestSetFactory;
end;

class function CoTestSetFactory.CreateRemote(const MachineName: string): ITestSetFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TestSetFactory) as ITestSetFactory;
end;

class function CoHostFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_HostFactory) as IBaseFactory;
end;

class function CoHostFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_HostFactory) as IBaseFactory;
end;

class function CoSubjectNode.Create: ISubjectNode;
begin
  Result := CreateComObject(CLASS_SubjectNode) as ISubjectNode;
end;

class function CoSubjectNode.CreateRemote(const MachineName: string): ISubjectNode;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SubjectNode) as ISubjectNode;
end;

class function CoSysTreeNode.Create: ISysTreeNode;
begin
  Result := CreateComObject(CLASS_SysTreeNode) as ISysTreeNode;
end;

class function CoSysTreeNode.CreateRemote(const MachineName: string): ISysTreeNode;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SysTreeNode) as ISysTreeNode;
end;

class function CoTreeManager.Create: ITreeManager;
begin
  Result := CreateComObject(CLASS_TreeManager) as ITreeManager;
end;

class function CoTreeManager.CreateRemote(const MachineName: string): ITreeManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TreeManager) as ITreeManager;
end;

class function CoVCS.Create: IVCS;
begin
  Result := CreateComObject(CLASS_VCS) as IVCS;
end;

class function CoVCS.CreateRemote(const MachineName: string): IVCS;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_VCS) as IVCS;
end;

class function CoAttachmentVcs.Create: IAttachmentVcs;
begin
  Result := CreateComObject(CLASS_AttachmentVcs) as IAttachmentVcs;
end;

class function CoAttachmentVcs.CreateRemote(const MachineName: string): IAttachmentVcs;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AttachmentVcs) as IAttachmentVcs;
end;

class function CoList.Create: IList;
begin
  Result := CreateComObject(CLASS_List) as IList;
end;

class function CoList.CreateRemote(const MachineName: string): IList;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_List) as IList;
end;

class function CoFactoryList.Create: IFactoryList;
begin
  Result := CreateComObject(CLASS_FactoryList) as IFactoryList;
end;

class function CoFactoryList.CreateRemote(const MachineName: string): IFactoryList;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FactoryList) as IFactoryList;
end;

class function CoHierarchySupportList.Create: IHierarchySupportList;
begin
  Result := CreateComObject(CLASS_HierarchySupportList) as IHierarchySupportList;
end;

class function CoHierarchySupportList.CreateRemote(const MachineName: string): IHierarchySupportList;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_HierarchySupportList) as IHierarchySupportList;
end;

class function CoFieldProperty.Create: IFieldProperty3;
begin
  Result := CreateComObject(CLASS_FieldProperty) as IFieldProperty3;
end;

class function CoFieldProperty.CreateRemote(const MachineName: string): IFieldProperty3;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FieldProperty) as IFieldProperty3;
end;

class function CoTDField.Create: ITDField;
begin
  Result := CreateComObject(CLASS_TDField) as ITDField;
end;

class function CoTDField.CreateRemote(const MachineName: string): ITDField;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TDField) as ITDField;
end;

class function CoTest.Create: ITest;
begin
  Result := CreateComObject(CLASS_Test) as ITest;
end;

class function CoTest.CreateRemote(const MachineName: string): ITest;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Test) as ITest;
end;

class function CoDesignStepFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_DesignStepFactory) as IBaseFactory;
end;

class function CoDesignStepFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DesignStepFactory) as IBaseFactory;
end;

class function CoDesignStep.Create: IDesignStep;
begin
  Result := CreateComObject(CLASS_DesignStep) as IDesignStep;
end;

class function CoDesignStep.CreateRemote(const MachineName: string): IDesignStep;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DesignStep) as IDesignStep;
end;

class function CoBug.Create: IBug;
begin
  Result := CreateComObject(CLASS_Bug) as IBug;
end;

class function CoBug.CreateRemote(const MachineName: string): IBug;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Bug) as IBug;
end;

class function CoTestSet.Create: ITestSet;
begin
  Result := CreateComObject(CLASS_TestSet) as ITestSet;
end;

class function CoTestSet.CreateRemote(const MachineName: string): ITestSet;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TestSet) as ITestSet;
end;

class function CoRunFactory.Create: IRunFactory;
begin
  Result := CreateComObject(CLASS_RunFactory) as IRunFactory;
end;

class function CoRunFactory.CreateRemote(const MachineName: string): IRunFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RunFactory) as IRunFactory;
end;

class function CoRun.Create: IRun2;
begin
  Result := CreateComObject(CLASS_Run) as IRun2;
end;

class function CoRun.CreateRemote(const MachineName: string): IRun2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Run) as IRun2;
end;

class function CoStepFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_StepFactory) as IBaseFactory;
end;

class function CoStepFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StepFactory) as IBaseFactory;
end;

class function CoBPStepFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_BPStepFactory) as IBaseFactory;
end;

class function CoBPStepFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BPStepFactory) as IBaseFactory;
end;

class function CoStep.Create: IStep2;
begin
  Result := CreateComObject(CLASS_Step) as IStep2;
end;

class function CoStep.CreateRemote(const MachineName: string): IStep2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Step) as IStep2;
end;

class function CoHostGroupFactory.Create: IHostGroupFactory;
begin
  Result := CreateComObject(CLASS_HostGroupFactory) as IHostGroupFactory;
end;

class function CoHostGroupFactory.CreateRemote(const MachineName: string): IHostGroupFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_HostGroupFactory) as IHostGroupFactory;
end;

class function CoHostGroup.Create: IHostGroup;
begin
  Result := CreateComObject(CLASS_HostGroup) as IHostGroup;
end;

class function CoHostGroup.CreateRemote(const MachineName: string): IHostGroup;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_HostGroup) as IHostGroup;
end;

class function CoHost.Create: IHost;
begin
  Result := CreateComObject(CLASS_Host) as IHost;
end;

class function CoHost.CreateRemote(const MachineName: string): IHost;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Host) as IHost;
end;

class function CoTSTestFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_TSTestFactory) as IBaseFactory;
end;

class function CoTSTestFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TSTestFactory) as IBaseFactory;
end;

class function CoTSTest.Create: ITSTest2;
begin
  Result := CreateComObject(CLASS_TSTest) as ITSTest2;
end;

class function CoTSTest.CreateRemote(const MachineName: string): ITSTest2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TSTest) as ITSTest2;
end;

class function CoConditionFactory.Create: IConditionFactory;
begin
  Result := CreateComObject(CLASS_ConditionFactory) as IConditionFactory;
end;

class function CoConditionFactory.CreateRemote(const MachineName: string): IConditionFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ConditionFactory) as IConditionFactory;
end;

class function CoCondition.Create: ICondition;
begin
  Result := CreateComObject(CLASS_Condition) as ICondition;
end;

class function CoCondition.CreateRemote(const MachineName: string): ICondition;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Condition) as ICondition;
end;

class function CoCommand.Create: ICommand2;
begin
  Result := CreateComObject(CLASS_Command) as ICommand2;
end;

class function CoCommand.CreateRemote(const MachineName: string): ICommand2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Command) as ICommand2;
end;

class function CoRecordset.Create: IRecordset;
begin
  Result := CreateComObject(CLASS_Recordset) as IRecordset;
end;

class function CoRecordset.CreateRemote(const MachineName: string): IRecordset;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Recordset) as IRecordset;
end;

class function CoTDFilter.Create: ITDFilter2;
begin
  Result := CreateComObject(CLASS_TDFilter) as ITDFilter2;
end;

class function CoTDFilter.CreateRemote(const MachineName: string): ITDFilter2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TDFilter) as ITDFilter2;
end;

class function CoHierarchyFilter.Create: IHierarchyFilter;
begin
  Result := CreateComObject(CLASS_HierarchyFilter) as IHierarchyFilter;
end;

class function CoHierarchyFilter.CreateRemote(const MachineName: string): IHierarchyFilter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_HierarchyFilter) as IHierarchyFilter;
end;

class function CoHistory.Create: IHistory;
begin
  Result := CreateComObject(CLASS_History) as IHistory;
end;

class function CoHistory.CreateRemote(const MachineName: string): IHistory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_History) as IHistory;
end;

class function CoHistoryRecord.Create: IHistoryRecord2;
begin
  Result := CreateComObject(CLASS_HistoryRecord) as IHistoryRecord2;
end;

class function CoHistoryRecord.CreateRemote(const MachineName: string): IHistoryRecord2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_HistoryRecord) as IHistoryRecord2;
end;

class function CoAttachmentFactory.Create: IAttachmentFactory;
begin
  Result := CreateComObject(CLASS_AttachmentFactory) as IAttachmentFactory;
end;

class function CoAttachmentFactory.CreateRemote(const MachineName: string): IAttachmentFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AttachmentFactory) as IAttachmentFactory;
end;

class function CoAttachment.Create: IAttachment;
begin
  Result := CreateComObject(CLASS_Attachment) as IAttachment;
end;

class function CoAttachment.CreateRemote(const MachineName: string): IAttachment;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Attachment) as IAttachment;
end;

class function CoLink.Create: ILink;
begin
  Result := CreateComObject(CLASS_Link) as ILink;
end;

class function CoLink.CreateRemote(const MachineName: string): ILink;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Link) as ILink;
end;

class function CoLinkFactory.Create: ILinkFactory;
begin
  Result := CreateComObject(CLASS_LinkFactory) as ILinkFactory;
end;

class function CoLinkFactory.CreateRemote(const MachineName: string): ILinkFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LinkFactory) as ILinkFactory;
end;

class function CoReqTraceFactory.Create: IReqTraceFactory;
begin
  Result := CreateComObject(CLASS_ReqTraceFactory) as IReqTraceFactory;
end;

class function CoReqTraceFactory.CreateRemote(const MachineName: string): IReqTraceFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReqTraceFactory) as IReqTraceFactory;
end;

class function CoTrace.Create: ITrace;
begin
  Result := CreateComObject(CLASS_Trace) as ITrace;
end;

class function CoTrace.CreateRemote(const MachineName: string): ITrace;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Trace) as ITrace;
end;

class function CoReq.Create: IReq2;
begin
  Result := CreateComObject(CLASS_Req) as IReq2;
end;

class function CoReq.CreateRemote(const MachineName: string): IReq2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Req) as IReq2;
end;

class function CoReqFactory.Create: IReqFactory3;
begin
  Result := CreateComObject(CLASS_ReqFactory) as IReqFactory3;
end;

class function CoReqFactory.CreateRemote(const MachineName: string): IReqFactory3;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReqFactory) as IReqFactory3;
end;

class function CoActionPermission.Create: IActionPermission;
begin
  Result := CreateComObject(CLASS_ActionPermission) as IActionPermission;
end;

class function CoActionPermission.CreateRemote(const MachineName: string): IActionPermission;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ActionPermission) as IActionPermission;
end;

class function CoGraphDefinition.Create: IGraphDefinition;
begin
  Result := CreateComObject(CLASS_GraphDefinition) as IGraphDefinition;
end;

class function CoGraphDefinition.CreateRemote(const MachineName: string): IGraphDefinition;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GraphDefinition) as IGraphDefinition;
end;

class function CoGraphBuilder.Create: IGraphBuilder;
begin
  Result := CreateComObject(CLASS_GraphBuilder) as IGraphBuilder;
end;

class function CoGraphBuilder.CreateRemote(const MachineName: string): IGraphBuilder;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GraphBuilder) as IGraphBuilder;
end;

class function CoGraph.Create: IGraph;
begin
  Result := CreateComObject(CLASS_Graph) as IGraph;
end;

class function CoGraph.CreateRemote(const MachineName: string): IGraph;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Graph) as IGraph;
end;

class function CoSearchOptions.Create: ISearchOptions;
begin
  Result := CreateComObject(CLASS_SearchOptions) as ISearchOptions;
end;

class function CoSearchOptions.CreateRemote(const MachineName: string): ISearchOptions;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SearchOptions) as ISearchOptions;
end;

class function CoTestExecStatus.Create: ITestExecStatus;
begin
  Result := CreateComObject(CLASS_TestExecStatus) as ITestExecStatus;
end;

class function CoTestExecStatus.CreateRemote(const MachineName: string): ITestExecStatus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TestExecStatus) as ITestExecStatus;
end;

class function CoExecutionStatus.Create: IExecutionStatus;
begin
  Result := CreateComObject(CLASS_ExecutionStatus) as IExecutionStatus;
end;

class function CoExecutionStatus.CreateRemote(const MachineName: string): IExecutionStatus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ExecutionStatus) as IExecutionStatus;
end;

class function CoTSScheduler.Create: ITSScheduler;
begin
  Result := CreateComObject(CLASS_TSScheduler) as ITSScheduler;
end;

class function CoTSScheduler.CreateRemote(const MachineName: string): ITSScheduler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TSScheduler) as ITSScheduler;
end;

class function CoDBManager.Create: IDBManager;
begin
  Result := CreateComObject(CLASS_DBManager) as IDBManager;
end;

class function CoDBManager.CreateRemote(const MachineName: string): IDBManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DBManager) as IDBManager;
end;

class function CoCustomization.Create: ICustomization3;
begin
  Result := CreateComObject(CLASS_Customization) as ICustomization3;
end;

class function CoCustomization.CreateRemote(const MachineName: string): ICustomization3;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Customization) as ICustomization3;
end;

class function CoCustomizationField.Create: ICustomizationField2;
begin
  Result := CreateComObject(CLASS_CustomizationField) as ICustomizationField2;
end;

class function CoCustomizationField.CreateRemote(const MachineName: string): ICustomizationField2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationField) as ICustomizationField2;
end;

class function CoCustomizationFields.Create: ICustomizationFields;
begin
  Result := CreateComObject(CLASS_CustomizationFields) as ICustomizationFields;
end;

class function CoCustomizationFields.CreateRemote(const MachineName: string): ICustomizationFields;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationFields) as ICustomizationFields;
end;

class function CoCustomizationLists.Create: ICustomizationLists;
begin
  Result := CreateComObject(CLASS_CustomizationLists) as ICustomizationLists;
end;

class function CoCustomizationLists.CreateRemote(const MachineName: string): ICustomizationLists;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationLists) as ICustomizationLists;
end;

class function CoCustomizationList.Create: ICustomizationList;
begin
  Result := CreateComObject(CLASS_CustomizationList) as ICustomizationList;
end;

class function CoCustomizationList.CreateRemote(const MachineName: string): ICustomizationList;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationList) as ICustomizationList;
end;

class function CoCustomizationListNode.Create: ICustomizationListNode;
begin
  Result := CreateComObject(CLASS_CustomizationListNode) as ICustomizationListNode;
end;

class function CoCustomizationListNode.CreateRemote(const MachineName: string): ICustomizationListNode;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationListNode) as ICustomizationListNode;
end;

class function CoCustomizationTypedField.Create: ICustomizationTypedField;
begin
  Result := CreateComObject(CLASS_CustomizationTypedField) as ICustomizationTypedField;
end;

class function CoCustomizationTypedField.CreateRemote(const MachineName: string): ICustomizationTypedField;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationTypedField) as ICustomizationTypedField;
end;

class function CoCustomizationTypes.Create: ICustomizationTypes;
begin
  Result := CreateComObject(CLASS_CustomizationTypes) as ICustomizationTypes;
end;

class function CoCustomizationTypes.CreateRemote(const MachineName: string): ICustomizationTypes;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationTypes) as ICustomizationTypes;
end;

class function CoTableProperties.Create: ITableProperties;
begin
  Result := CreateComObject(CLASS_TableProperties) as ITableProperties;
end;

class function CoTableProperties.CreateRemote(const MachineName: string): ITableProperties;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TableProperties) as ITableProperties;
end;

class function CoCustomizationReqType.Create: ICustomizationReqType;
begin
  Result := CreateComObject(CLASS_CustomizationReqType) as ICustomizationReqType;
end;

class function CoCustomizationReqType.CreateRemote(const MachineName: string): ICustomizationReqType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationReqType) as ICustomizationReqType;
end;

class function CoCustomizationRBT.Create: ICustomizationRBT;
begin
  Result := CreateComObject(CLASS_CustomizationRBT) as ICustomizationRBT;
end;

class function CoCustomizationRBT.CreateRemote(const MachineName: string): ICustomizationRBT;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationRBT) as ICustomizationRBT;
end;

class function CoCustomizationRBTQuestion.Create: ICustomizationRBTQuestion;
begin
  Result := CreateComObject(CLASS_CustomizationRBTQuestion) as ICustomizationRBTQuestion;
end;

class function CoCustomizationRBTQuestion.CreateRemote(const MachineName: string): ICustomizationRBTQuestion;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationRBTQuestion) as ICustomizationRBTQuestion;
end;

class function CoCustomizationRBTAnswer.Create: ICustomizationRBTAnswer;
begin
  Result := CreateComObject(CLASS_CustomizationRBTAnswer) as ICustomizationRBTAnswer;
end;

class function CoCustomizationRBTAnswer.CreateRemote(const MachineName: string): ICustomizationRBTAnswer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationRBTAnswer) as ICustomizationRBTAnswer;
end;

class function CoSettings.Create: ISettings2;
begin
  Result := CreateComObject(CLASS_Settings) as ISettings2;
end;

class function CoSettings.CreateRemote(const MachineName: string): ISettings2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Settings) as ISettings2;
end;

class function CoTDMailConditions.Create: ITDMailConditions;
begin
  Result := CreateComObject(CLASS_TDMailConditions) as ITDMailConditions;
end;

class function CoTDMailConditions.CreateRemote(const MachineName: string): ITDMailConditions;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TDMailConditions) as ITDMailConditions;
end;

class function CoCustomizationPermissions.Create: ICustomizationPermissions;
begin
  Result := CreateComObject(CLASS_CustomizationPermissions) as ICustomizationPermissions;
end;

class function CoCustomizationPermissions.CreateRemote(const MachineName: string): ICustomizationPermissions;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationPermissions) as ICustomizationPermissions;
end;

class function CoCustomizationUsersGroups.Create: ICustomizationUsersGroups2;
begin
  Result := CreateComObject(CLASS_CustomizationUsersGroups) as ICustomizationUsersGroups2;
end;

class function CoCustomizationUsersGroups.CreateRemote(const MachineName: string): ICustomizationUsersGroups2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationUsersGroups) as ICustomizationUsersGroups2;
end;

class function CoCustomizationUsersGroup.Create: ICustomizationUsersGroup;
begin
  Result := CreateComObject(CLASS_CustomizationUsersGroup) as ICustomizationUsersGroup;
end;

class function CoCustomizationUsersGroup.CreateRemote(const MachineName: string): ICustomizationUsersGroup;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationUsersGroup) as ICustomizationUsersGroup;
end;

class function CoCustomizationUser.Create: ICustomizationUser;
begin
  Result := CreateComObject(CLASS_CustomizationUser) as ICustomizationUser;
end;

class function CoCustomizationUser.CreateRemote(const MachineName: string): ICustomizationUser;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationUser) as ICustomizationUser;
end;

class function CoCustomizationUsers.Create: ICustomizationUsers3;
begin
  Result := CreateComObject(CLASS_CustomizationUsers) as ICustomizationUsers3;
end;

class function CoCustomizationUsers.CreateRemote(const MachineName: string): ICustomizationUsers3;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationUsers) as ICustomizationUsers3;
end;

class function CoCustomizationActions.Create: ICustomizationActions;
begin
  Result := CreateComObject(CLASS_CustomizationActions) as ICustomizationActions;
end;

class function CoCustomizationActions.CreateRemote(const MachineName: string): ICustomizationActions;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationActions) as ICustomizationActions;
end;

class function CoCustomizationAction.Create: ICustomizationAction;
begin
  Result := CreateComObject(CLASS_CustomizationAction) as ICustomizationAction;
end;

class function CoCustomizationAction.CreateRemote(const MachineName: string): ICustomizationAction;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationAction) as ICustomizationAction;
end;

class function CoCustomizationModules.Create: ICustomizationModules3;
begin
  Result := CreateComObject(CLASS_CustomizationModules) as ICustomizationModules3;
end;

class function CoCustomizationModules.CreateRemote(const MachineName: string): ICustomizationModules3;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationModules) as ICustomizationModules3;
end;

class function CoTDChat.Create: ITDChat;
begin
  Result := CreateComObject(CLASS_TDChat) as ITDChat;
end;

class function CoTDChat.CreateRemote(const MachineName: string): ITDChat;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TDChat) as ITDChat;
end;

class function CoCustomizationTransitionRule.Create: ICustomizationTransitionRule;
begin
  Result := CreateComObject(CLASS_CustomizationTransitionRule) as ICustomizationTransitionRule;
end;

class function CoCustomizationTransitionRule.CreateRemote(const MachineName: string): ICustomizationTransitionRule;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationTransitionRule) as ICustomizationTransitionRule;
end;

class function CoCustomizationTransitionRules.Create: ICustomizationTransitionRules;
begin
  Result := CreateComObject(CLASS_CustomizationTransitionRules) as ICustomizationTransitionRules;
end;

class function CoCustomizationTransitionRules.CreateRemote(const MachineName: string): ICustomizationTransitionRules;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationTransitionRules) as ICustomizationTransitionRules;
end;

class function CoTDErrorInfo.Create: ITDErrorInfo;
begin
  Result := CreateComObject(CLASS_TDErrorInfo) as ITDErrorInfo;
end;

class function CoTDErrorInfo.CreateRemote(const MachineName: string): ITDErrorInfo;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TDErrorInfo) as ITDErrorInfo;
end;

class function CoChangeEntryFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_ChangeEntryFactory) as IBaseFactory;
end;

class function CoChangeEntryFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ChangeEntryFactory) as IBaseFactory;
end;

class function CoChangeEntry.Create: IChangeEntry;
begin
  Result := CreateComObject(CLASS_ChangeEntry) as IChangeEntry;
end;

class function CoChangeEntry.CreateRemote(const MachineName: string): IChangeEntry;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ChangeEntry) as IChangeEntry;
end;

class function CoChangeFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_ChangeFactory) as IBaseFactory;
end;

class function CoChangeFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ChangeFactory) as IBaseFactory;
end;

class function CoChange.Create: IChange;
begin
  Result := CreateComObject(CLASS_Change) as IChange;
end;

class function CoChange.CreateRemote(const MachineName: string): IChange;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Change) as IChange;
end;

class function CoComFrec.Create: IComFrec;
begin
  Result := CreateComObject(CLASS_ComFrec) as IComFrec;
end;

class function CoComFrec.CreateRemote(const MachineName: string): IComFrec;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ComFrec) as IComFrec;
end;

class function CoExecEventNotifyByMailSettings.Create: IExecEventNotifyByMailSettings;
begin
  Result := CreateComObject(CLASS_ExecEventNotifyByMailSettings) as IExecEventNotifyByMailSettings;
end;

class function CoExecEventNotifyByMailSettings.CreateRemote(const MachineName: string): IExecEventNotifyByMailSettings;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ExecEventNotifyByMailSettings) as IExecEventNotifyByMailSettings;
end;

class function CoProjectProperties.Create: IProjectProperties;
begin
  Result := CreateComObject(CLASS_ProjectProperties) as IProjectProperties;
end;

class function CoProjectProperties.CreateRemote(const MachineName: string): IProjectProperties;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ProjectProperties) as IProjectProperties;
end;

class function CoStepParams.Create: IStepParams;
begin
  Result := CreateComObject(CLASS_StepParams) as IStepParams;
end;

class function CoStepParams.CreateRemote(const MachineName: string): IStepParams;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StepParams) as IStepParams;
end;

class function CoTextParser.Create: ITextParser;
begin
  Result := CreateComObject(CLASS_TextParser) as ITextParser;
end;

class function CoTextParser.CreateRemote(const MachineName: string): ITextParser;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TextParser) as ITextParser;
end;

class function CoExecEventInfo.Create: IExecEventInfo;
begin
  Result := CreateComObject(CLASS_ExecEventInfo) as IExecEventInfo;
end;

class function CoExecEventInfo.CreateRemote(const MachineName: string): IExecEventInfo;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ExecEventInfo) as IExecEventInfo;
end;

class function CoAmarillusHash.Create: IAmarillusHash;
begin
  Result := CreateComObject(CLASS_AmarillusHash) as IAmarillusHash;
end;

class function CoAmarillusHash.CreateRemote(const MachineName: string): IAmarillusHash;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AmarillusHash) as IAmarillusHash;
end;

class function CoVersionItem.Create: IVersionItem;
begin
  Result := CreateComObject(CLASS_VersionItem) as IVersionItem;
end;

class function CoVersionItem.CreateRemote(const MachineName: string): IVersionItem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_VersionItem) as IVersionItem;
end;

class function CoVcsAdmin.Create: IVcsAdmin;
begin
  Result := CreateComObject(CLASS_VcsAdmin) as IVcsAdmin;
end;

class function CoVcsAdmin.CreateRemote(const MachineName: string): IVcsAdmin;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_VcsAdmin) as IVcsAdmin;
end;

class function CoExecSettings.Create: IExecutionSettings;
begin
  Result := CreateComObject(CLASS_ExecSettings) as IExecutionSettings;
end;

class function CoExecSettings.CreateRemote(const MachineName: string): IExecutionSettings;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ExecSettings) as IExecutionSettings;
end;

class function CoExecEventActionParams.Create: IOnExecEventSchedulerActionParams;
begin
  Result := CreateComObject(CLASS_ExecEventActionParams) as IOnExecEventSchedulerActionParams;
end;

class function CoExecEventActionParams.CreateRemote(const MachineName: string): IOnExecEventSchedulerActionParams;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ExecEventActionParams) as IOnExecEventSchedulerActionParams;
end;

class function CoExecEventRestartActionParams.Create: IOnExecEventSchedulerRestartParams;
begin
  Result := CreateComObject(CLASS_ExecEventRestartActionParams) as IOnExecEventSchedulerRestartParams;
end;

class function CoExecEventRestartActionParams.CreateRemote(const MachineName: string): IOnExecEventSchedulerRestartParams;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ExecEventRestartActionParams) as IOnExecEventSchedulerRestartParams;
end;

class function CoTestSetTreeManager.Create: ITestSetTreeManager;
begin
  Result := CreateComObject(CLASS_TestSetTreeManager) as ITestSetTreeManager;
end;

class function CoTestSetTreeManager.CreateRemote(const MachineName: string): ITestSetTreeManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TestSetTreeManager) as ITestSetTreeManager;
end;

class function CoTestSetFolder.Create: ITestSetFolder3;
begin
  Result := CreateComObject(CLASS_TestSetFolder) as ITestSetFolder3;
end;

class function CoTestSetFolder.CreateRemote(const MachineName: string): ITestSetFolder3;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TestSetFolder) as ITestSetFolder3;
end;

class function CoCustomizationMailConditions.Create: ICustomizationMailConditions;
begin
  Result := CreateComObject(CLASS_CustomizationMailConditions) as ICustomizationMailConditions;
end;

class function CoCustomizationMailConditions.CreateRemote(const MachineName: string): ICustomizationMailConditions;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationMailConditions) as ICustomizationMailConditions;
end;

class function CoCustomizationMailCondition.Create: ICustomizationMailCondition;
begin
  Result := CreateComObject(CLASS_CustomizationMailCondition) as ICustomizationMailCondition;
end;

class function CoCustomizationMailCondition.CreateRemote(const MachineName: string): ICustomizationMailCondition;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationMailCondition) as ICustomizationMailCondition;
end;

class function CoAnalysis.Create: IAnalysis;
begin
  Result := CreateComObject(CLASS_Analysis) as IAnalysis;
end;

class function CoAnalysis.CreateRemote(const MachineName: string): IAnalysis;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Analysis) as IAnalysis;
end;

class function CoAlert.Create: IAlert;
begin
  Result := CreateComObject(CLASS_Alert) as IAlert;
end;

class function CoAlert.CreateRemote(const MachineName: string): IAlert;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Alert) as IAlert;
end;

class function CoAlertManager.Create: IAlertManager2;
begin
  Result := CreateComObject(CLASS_AlertManager) as IAlertManager2;
end;

class function CoAlertManager.CreateRemote(const MachineName: string): IAlertManager2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AlertManager) as IAlertManager2;
end;

class function CoRuleManager.Create: IRuleManager;
begin
  Result := CreateComObject(CLASS_RuleManager) as IRuleManager;
end;

class function CoRuleManager.CreateRemote(const MachineName: string): IRuleManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RuleManager) as IRuleManager;
end;

class function CoRule.Create: IRule2;
begin
  Result := CreateComObject(CLASS_Rule) as IRule2;
end;

class function CoRule.CreateRemote(const MachineName: string): IRule2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Rule) as IRule2;
end;

class function CoReqSummaryStatus.Create: IReqSummaryStatus;
begin
  Result := CreateComObject(CLASS_ReqSummaryStatus) as IReqSummaryStatus;
end;

class function CoReqSummaryStatus.CreateRemote(const MachineName: string): IReqSummaryStatus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReqSummaryStatus) as IReqSummaryStatus;
end;

class function CoReqCoverageStatus.Create: IReqCoverageStatus;
begin
  Result := CreateComObject(CLASS_ReqCoverageStatus) as IReqCoverageStatus;
end;

class function CoReqCoverageStatus.CreateRemote(const MachineName: string): IReqCoverageStatus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReqCoverageStatus) as IReqCoverageStatus;
end;

class function CoCacheMgr.Create: ICacheMgr;
begin
  Result := CreateComObject(CLASS_CacheMgr) as ICacheMgr;
end;

class function CoCacheMgr.CreateRemote(const MachineName: string): ICacheMgr;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CacheMgr) as ICacheMgr;
end;

class function CoComponentFactory.Create: IComponentFactory;
begin
  Result := CreateComObject(CLASS_ComponentFactory) as IComponentFactory;
end;

class function CoComponentFactory.CreateRemote(const MachineName: string): IComponentFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ComponentFactory) as IComponentFactory;
end;

class function CoComponentFolderFactory.Create: IComponentFolderFactory;
begin
  Result := CreateComObject(CLASS_ComponentFolderFactory) as IComponentFolderFactory;
end;

class function CoComponentFolderFactory.CreateRemote(const MachineName: string): IComponentFolderFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ComponentFolderFactory) as IComponentFolderFactory;
end;

class function CoComponent.Create: IComponent;
begin
  Result := CreateComObject(CLASS_Component) as IComponent;
end;

class function CoComponent.CreateRemote(const MachineName: string): IComponent;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Component) as IComponent;
end;

class function CoComponentFolder.Create: IComponentFolder;
begin
  Result := CreateComObject(CLASS_ComponentFolder) as IComponentFolder;
end;

class function CoComponentFolder.CreateRemote(const MachineName: string): IComponentFolder;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ComponentFolder) as IComponentFolder;
end;

class function CoBusinessProcess.Create: IBusinessProcess;
begin
  Result := CreateComObject(CLASS_BusinessProcess) as IBusinessProcess;
end;

class function CoBusinessProcess.CreateRemote(const MachineName: string): IBusinessProcess;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BusinessProcess) as IBusinessProcess;
end;

class function CoComponentParamFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_ComponentParamFactory) as IBaseFactory;
end;

class function CoComponentParamFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ComponentParamFactory) as IBaseFactory;
end;

class function CoComponentParam.Create: IComponentParam;
begin
  Result := CreateComObject(CLASS_ComponentParam) as IComponentParam;
end;

class function CoComponentParam.CreateRemote(const MachineName: string): IComponentParam;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ComponentParam) as IComponentParam;
end;

class function CoBPComponent.Create: IBPComponent;
begin
  Result := CreateComObject(CLASS_BPComponent) as IBPComponent;
end;

class function CoBPComponent.CreateRemote(const MachineName: string): IBPComponent;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BPComponent) as IBPComponent;
end;

class function CoRTParam.Create: IRTParam;
begin
  Result := CreateComObject(CLASS_RTParam) as IRTParam;
end;

class function CoRTParam.CreateRemote(const MachineName: string): IRTParam;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RTParam) as IRTParam;
end;

class function CoBPIteration.Create: IBPIteration;
begin
  Result := CreateComObject(CLASS_BPIteration) as IBPIteration;
end;

class function CoBPIteration.CreateRemote(const MachineName: string): IBPIteration;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BPIteration) as IBPIteration;
end;

class function CoBPIterationParam.Create: IBPIterationParam;
begin
  Result := CreateComObject(CLASS_BPIterationParam) as IBPIterationParam;
end;

class function CoBPIterationParam.CreateRemote(const MachineName: string): IBPIterationParam;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BPIterationParam) as IBPIterationParam;
end;

class function CoBPParameter.Create: IBPParam;
begin
  Result := CreateComObject(CLASS_BPParameter) as IBPParam;
end;

class function CoBPParameter.CreateRemote(const MachineName: string): IBPParam;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BPParameter) as IBPParam;
end;

class function CoExport.Create: IExport;
begin
  Result := CreateComObject(CLASS_Export) as IExport;
end;

class function CoExport.CreateRemote(const MachineName: string): IExport;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Export) as IExport;
end;

class function CoImport.Create: IImport;
begin
  Result := CreateComObject(CLASS_Import) as IImport;
end;

class function CoImport.CreateRemote(const MachineName: string): IImport;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Import) as IImport;
end;

class function CoTDUtils.Create: ITDUtils;
begin
  Result := CreateComObject(CLASS_TDUtils) as ITDUtils;
end;

class function CoTDUtils.CreateRemote(const MachineName: string): ITDUtils;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TDUtils) as ITDUtils;
end;

class function CoBPHistoryRecord.Create: IBPHistoryRecord;
begin
  Result := CreateComObject(CLASS_BPHistoryRecord) as IBPHistoryRecord;
end;

class function CoBPHistoryRecord.CreateRemote(const MachineName: string): IBPHistoryRecord;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BPHistoryRecord) as IBPHistoryRecord;
end;

class function CoBPGroup.Create: IBPGroup;
begin
  Result := CreateComObject(CLASS_BPGroup) as IBPGroup;
end;

class function CoBPGroup.CreateRemote(const MachineName: string): IBPGroup;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BPGroup) as IBPGroup;
end;

class function CoComponentStepFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_ComponentStepFactory) as IBaseFactory;
end;

class function CoComponentStepFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ComponentStepFactory) as IBaseFactory;
end;

class function CoComponentStep.Create: IComponentStep;
begin
  Result := CreateComObject(CLASS_ComponentStep) as IComponentStep;
end;

class function CoComponentStep.CreateRemote(const MachineName: string): IComponentStep;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ComponentStep) as IComponentStep;
end;

class function CoBPStepParamFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_BPStepParamFactory) as IBaseFactory;
end;

class function CoBPStepParamFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BPStepParamFactory) as IBaseFactory;
end;

class function CoBPStepParam.Create: IBPStepParam;
begin
  Result := CreateComObject(CLASS_BPStepParam) as IBPStepParam;
end;

class function CoBPStepParam.CreateRemote(const MachineName: string): IBPStepParam;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BPStepParam) as IBPStepParam;
end;

class function CoProductInfo.Create: IProductInfo;
begin
  Result := CreateComObject(CLASS_ProductInfo) as IProductInfo;
end;

class function CoProductInfo.CreateRemote(const MachineName: string): IProductInfo;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ProductInfo) as IProductInfo;
end;

class function CoGroupingManager.Create: IGroupingManager;
begin
  Result := CreateComObject(CLASS_GroupingManager) as IGroupingManager;
end;

class function CoGroupingManager.CreateRemote(const MachineName: string): IGroupingManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GroupingManager) as IGroupingManager;
end;

class function CoGroupingItem.Create: IGroupingItem;
begin
  Result := CreateComObject(CLASS_GroupingItem) as IGroupingItem;
end;

class function CoGroupingItem.CreateRemote(const MachineName: string): IGroupingItem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GroupingItem) as IGroupingItem;
end;

class function CoAuditRecordFactory.Create: IAuditRecordFactory;
begin
  Result := CreateComObject(CLASS_AuditRecordFactory) as IAuditRecordFactory;
end;

class function CoAuditRecordFactory.CreateRemote(const MachineName: string): IAuditRecordFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AuditRecordFactory) as IAuditRecordFactory;
end;

class function CoAuditPropertyFactory.Create: IAuditPropertyFactory;
begin
  Result := CreateComObject(CLASS_AuditPropertyFactory) as IAuditPropertyFactory;
end;

class function CoAuditPropertyFactory.CreateRemote(const MachineName: string): IAuditPropertyFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AuditPropertyFactory) as IAuditPropertyFactory;
end;

class function CoAuditable.Create: IAuditable;
begin
  Result := CreateComObject(CLASS_Auditable) as IAuditable;
end;

class function CoAuditable.CreateRemote(const MachineName: string): IAuditable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Auditable) as IAuditable;
end;

class function CoAuditRecord.Create: IAuditRecord;
begin
  Result := CreateComObject(CLASS_AuditRecord) as IAuditRecord;
end;

class function CoAuditRecord.CreateRemote(const MachineName: string): IAuditRecord;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AuditRecord) as IAuditRecord;
end;

class function CoAuditProperty.Create: IAuditProperty;
begin
  Result := CreateComObject(CLASS_AuditProperty) as IAuditProperty;
end;

class function CoAuditProperty.CreateRemote(const MachineName: string): IAuditProperty;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AuditProperty) as IAuditProperty;
end;

class function CoMultiValue.Create: IMultiValue;
begin
  Result := CreateComObject(CLASS_MultiValue) as IMultiValue;
end;

class function CoMultiValue.CreateRemote(const MachineName: string): IMultiValue;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MultiValue) as IMultiValue;
end;

class function CoReqType.Create: IReqType;
begin
  Result := CreateComObject(CLASS_ReqType) as IReqType;
end;

class function CoReqType.CreateRemote(const MachineName: string): IReqType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReqType) as IReqType;
end;

class function CoReleaseFolder.Create: IReleaseFolder;
begin
  Result := CreateComObject(CLASS_ReleaseFolder) as IReleaseFolder;
end;

class function CoReleaseFolder.CreateRemote(const MachineName: string): IReleaseFolder;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReleaseFolder) as IReleaseFolder;
end;

class function CoRelease.Create: IRelease;
begin
  Result := CreateComObject(CLASS_Release) as IRelease;
end;

class function CoRelease.CreateRemote(const MachineName: string): IRelease;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Release) as IRelease;
end;

class function CoReleaseFolderFactory.Create: IReleaseFolderFactory;
begin
  Result := CreateComObject(CLASS_ReleaseFolderFactory) as IReleaseFolderFactory;
end;

class function CoReleaseFolderFactory.CreateRemote(const MachineName: string): IReleaseFolderFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReleaseFolderFactory) as IReleaseFolderFactory;
end;

class function CoReleaseFactory.Create: IReleaseFactory;
begin
  Result := CreateComObject(CLASS_ReleaseFactory) as IReleaseFactory;
end;

class function CoReleaseFactory.CreateRemote(const MachineName: string): IReleaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReleaseFactory) as IReleaseFactory;
end;

class function CoCycleFactory.Create: ICycleFactory;
begin
  Result := CreateComObject(CLASS_CycleFactory) as ICycleFactory;
end;

class function CoCycleFactory.CreateRemote(const MachineName: string): ICycleFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CycleFactory) as ICycleFactory;
end;

class function CoCycle.Create: ICycle;
begin
  Result := CreateComObject(CLASS_Cycle) as ICycle;
end;

class function CoCycle.CreateRemote(const MachineName: string): ICycle;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Cycle) as ICycle;
end;

class function CoReleaseManagementInfo.Create: IReleaseManagementInfo;
begin
  Result := CreateComObject(CLASS_ReleaseManagementInfo) as IReleaseManagementInfo;
end;

class function CoReleaseManagementInfo.CreateRemote(const MachineName: string): IReleaseManagementInfo;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReleaseManagementInfo) as IReleaseManagementInfo;
end;

class function CoWarningInfo.Create: IWarningInfo;
begin
  Result := CreateComObject(CLASS_WarningInfo) as IWarningInfo;
end;

class function CoWarningInfo.CreateRemote(const MachineName: string): IWarningInfo;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WarningInfo) as IWarningInfo;
end;

class function CoExtensionData.Create: IExtensionData;
begin
  Result := CreateComObject(CLASS_ExtensionData) as IExtensionData;
end;

class function CoExtensionData.CreateRemote(const MachineName: string): IExtensionData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ExtensionData) as IExtensionData;
end;

class function CoExtensionServiceProvider.Create: IExtensionServiceProvider;
begin
  Result := CreateComObject(CLASS_ExtensionServiceProvider) as IExtensionServiceProvider;
end;

class function CoExtensionServiceProvider.CreateRemote(const MachineName: string): IExtensionServiceProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ExtensionServiceProvider) as IExtensionServiceProvider;
end;

class function CoFactoryService.Create: IFactoryService;
begin
  Result := CreateComObject(CLASS_FactoryService) as IFactoryService;
end;

class function CoFactoryService.CreateRemote(const MachineName: string): IFactoryService;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FactoryService) as IFactoryService;
end;

class function CoCacheManager.Create: ICacheManager;
begin
  Result := CreateComObject(CLASS_CacheManager) as ICacheManager;
end;

class function CoCacheManager.CreateRemote(const MachineName: string): ICacheManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CacheManager) as ICacheManager;
end;

class function CoSystemFieldService.Create: ISystemFieldService;
begin
  Result := CreateComObject(CLASS_SystemFieldService) as ISystemFieldService;
end;

class function CoSystemFieldService.CreateRemote(const MachineName: string): ISystemFieldService;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SystemFieldService) as ISystemFieldService;
end;

class function CoDataServiceProvider.Create: IDataServiceProvider;
begin
  Result := CreateComObject(CLASS_DataServiceProvider) as IDataServiceProvider;
end;

class function CoDataServiceProvider.CreateRemote(const MachineName: string): IDataServiceProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DataServiceProvider) as IDataServiceProvider;
end;

class function CoCustomizationPermissionService.Create: ICustomizationPermissionService;
begin
  Result := CreateComObject(CLASS_CustomizationPermissionService) as ICustomizationPermissionService;
end;

class function CoCustomizationPermissionService.CreateRemote(const MachineName: string): ICustomizationPermissionService;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomizationPermissionService) as ICustomizationPermissionService;
end;

class function CoExtensionManager.Create: IExtensionManager;
begin
  Result := CreateComObject(CLASS_ExtensionManager) as IExtensionManager;
end;

class function CoExtensionManager.CreateRemote(const MachineName: string): IExtensionManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ExtensionManager) as IExtensionManager;
end;

class function CoServiceFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_ServiceFactory) as IBaseFactory;
end;

class function CoServiceFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ServiceFactory) as IBaseFactory;
end;

class function CoServiceFolderFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_ServiceFolderFactory) as IBaseFactory;
end;

class function CoServiceFolderFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ServiceFolderFactory) as IBaseFactory;
end;

class function CoServiceGroupFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_ServiceGroupFactory) as IBaseFactory;
end;

class function CoServiceGroupFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ServiceGroupFactory) as IBaseFactory;
end;

class function CoWsdlOperationFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_WsdlOperationFactory) as IBaseFactory;
end;

class function CoWsdlOperationFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WsdlOperationFactory) as IBaseFactory;
end;

class function CoWsdlOperationParamFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_WsdlOperationParamFactory) as IBaseFactory;
end;

class function CoWsdlOperationParamFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WsdlOperationParamFactory) as IBaseFactory;
end;

class function CoServiceChangeFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_ServiceChangeFactory) as IBaseFactory;
end;

class function CoServiceChangeFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ServiceChangeFactory) as IBaseFactory;
end;

class function CoService.Create: IBaseFieldEx;
begin
  Result := CreateComObject(CLASS_Service) as IBaseFieldEx;
end;

class function CoService.CreateRemote(const MachineName: string): IBaseFieldEx;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Service) as IBaseFieldEx;
end;

class function CoServiceFolder.Create: IBaseField;
begin
  Result := CreateComObject(CLASS_ServiceFolder) as IBaseField;
end;

class function CoServiceFolder.CreateRemote(const MachineName: string): IBaseField;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ServiceFolder) as IBaseField;
end;

class function CoServiceGroup.Create: IBaseFieldEx;
begin
  Result := CreateComObject(CLASS_ServiceGroup) as IBaseFieldEx;
end;

class function CoServiceGroup.CreateRemote(const MachineName: string): IBaseFieldEx;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ServiceGroup) as IBaseFieldEx;
end;

class function CoWsdlOperation.Create: IBaseField;
begin
  Result := CreateComObject(CLASS_WsdlOperation) as IBaseField;
end;

class function CoWsdlOperation.CreateRemote(const MachineName: string): IBaseField;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WsdlOperation) as IBaseField;
end;

class function CoWsdlOperationParam.Create: IBaseField;
begin
  Result := CreateComObject(CLASS_WsdlOperationParam) as IBaseField;
end;

class function CoWsdlOperationParam.CreateRemote(const MachineName: string): IBaseField;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WsdlOperationParam) as IBaseField;
end;

class function CoServiceChange.Create: IBaseField;
begin
  Result := CreateComObject(CLASS_ServiceChange) as IBaseField;
end;

class function CoServiceChange.CreateRemote(const MachineName: string): IBaseField;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ServiceChange) as IBaseField;
end;

class function CoApplicationEntity.Create: IBaseFieldEx;
begin
  Result := CreateComObject(CLASS_ApplicationEntity) as IBaseFieldEx;
end;

class function CoApplicationEntity.CreateRemote(const MachineName: string): IBaseFieldEx;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ApplicationEntity) as IBaseFieldEx;
end;

class function CoApplicationEntityFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_ApplicationEntityFactory) as IBaseFactory;
end;

class function CoApplicationEntityFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ApplicationEntityFactory) as IBaseFactory;
end;

class function CoBlueprintEntity.Create: IBaseFieldEx;
begin
  Result := CreateComObject(CLASS_BlueprintEntity) as IBaseFieldEx;
end;

class function CoBlueprintEntity.CreateRemote(const MachineName: string): IBaseFieldEx;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BlueprintEntity) as IBaseFieldEx;
end;

class function CoBlueprintFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_BlueprintFactory) as IBaseFactory;
end;

class function CoBlueprintFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BlueprintFactory) as IBaseFactory;
end;

class function CoApplicationEntityTreeManager.Create: IBaseHierarchyTreeManager;
begin
  Result := CreateComObject(CLASS_ApplicationEntityTreeManager) as IBaseHierarchyTreeManager;
end;

class function CoApplicationEntityTreeManager.CreateRemote(const MachineName: string): IBaseHierarchyTreeManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ApplicationEntityTreeManager) as IBaseHierarchyTreeManager;
end;

class function CoApplicationEntityFolder.Create: IBaseEntityFolder;
begin
  Result := CreateComObject(CLASS_ApplicationEntityFolder) as IBaseEntityFolder;
end;

class function CoApplicationEntityFolder.CreateRemote(const MachineName: string): IBaseEntityFolder;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ApplicationEntityFolder) as IBaseEntityFolder;
end;

class function CoChangeEntity.Create: IBaseFieldEx;
begin
  Result := CreateComObject(CLASS_ChangeEntity) as IBaseFieldEx;
end;

class function CoChangeEntity.CreateRemote(const MachineName: string): IBaseFieldEx;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ChangeEntity) as IBaseFieldEx;
end;

class function CoChangeEntityFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_ChangeEntityFactory) as IBaseFactory;
end;

class function CoChangeEntityFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ChangeEntityFactory) as IBaseFactory;
end;

class function CoChangeEntityTreeManager.Create: IBaseHierarchyTreeManager;
begin
  Result := CreateComObject(CLASS_ChangeEntityTreeManager) as IBaseHierarchyTreeManager;
end;

class function CoChangeEntityTreeManager.CreateRemote(const MachineName: string): IBaseHierarchyTreeManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ChangeEntityTreeManager) as IBaseHierarchyTreeManager;
end;

class function CoChangeEntityFolder.Create: IBaseEntityFolder;
begin
  Result := CreateComObject(CLASS_ChangeEntityFolder) as IBaseEntityFolder;
end;

class function CoChangeEntityFolder.CreateRemote(const MachineName: string): IBaseEntityFolder;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ChangeEntityFolder) as IBaseEntityFolder;
end;

class function CoApplicationConfiguration.Create: IBaseField;
begin
  Result := CreateComObject(CLASS_ApplicationConfiguration) as IBaseField;
end;

class function CoApplicationConfiguration.CreateRemote(const MachineName: string): IBaseField;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ApplicationConfiguration) as IBaseField;
end;

class function CoApplicationConfigurationFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_ApplicationConfigurationFactory) as IBaseFactory;
end;

class function CoApplicationConfigurationFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ApplicationConfigurationFactory) as IBaseFactory;
end;

class function CoApplicationImpact.Create: IBaseFieldEx;
begin
  Result := CreateComObject(CLASS_ApplicationImpact) as IBaseFieldEx;
end;

class function CoApplicationImpact.CreateRemote(const MachineName: string): IBaseFieldEx;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ApplicationImpact) as IBaseFieldEx;
end;

class function CoApplicationImpactFactory.Create: IBaseFactory;
begin
  Result := CreateComObject(CLASS_ApplicationImpactFactory) as IBaseFactory;
end;

class function CoApplicationImpactFactory.CreateRemote(const MachineName: string): IBaseFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ApplicationImpactFactory) as IBaseFactory;
end;

class function CoModule.Create: IModule;
begin
  Result := CreateComObject(CLASS_Module) as IModule;
end;

class function CoModule.CreateRemote(const MachineName: string): IModule;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Module) as IModule;
end;

end.
